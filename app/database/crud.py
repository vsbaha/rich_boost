from .models import User, Base, BoosterAccount, PaymentRequest
from sqlalchemy.future import select
from .models import Base
from .db import engine
from sqlalchemy.exc import IntegrityError
from sqlalchemy import func, or_
from datetime import datetime, timezone
import uuid
from aiogram import Bot
from app.config import BOT_TOKEN
from app.database.db import AsyncSessionLocal
from sqlalchemy import delete
from app.database.models import User, BonusHistory, PromoCode, PromoActivation, Order, BotSettings, BoosterAccount
import logging

logger = logging.getLogger(__name__)
bot = Bot(token=BOT_TOKEN)

async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    from app.utils.settings import SettingsManager
    await SettingsManager.initialize_default_settings()

async def add_user(tg_id, username, region=None, role="user", referrer_id=None):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if not user:
            now = datetime.now(timezone.utc)
            user = User(
                tg_id=tg_id,
                username=username,
                region=region,
                role=role,
                created_at=now,
                referrer_id=referrer_id,
            )
            session.add(user)
            await session.commit()

async def update_user_region(tg_id: int, new_region: str):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if user:
            user.region = new_region
            await session.commit()

async def get_user_by_tg_id(tg_id):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        return result.scalar_one_or_none()

async def update_user_username(tg_id, username):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if user and user.username != username:
            user.username = username
            await session.commit()

async def get_booster_account(tg_id):
    async with AsyncSessionLocal() as session:
        # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram ID
        user_result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = user_result.scalar_one_or_none()
        
        if not user:
            return None
            
        # –ó–∞—Ç–µ–º –∏—â–µ–º –∞–∫–∫–∞—É–Ω—Ç –±—É—Å—Ç–µ—Ä–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(BoosterAccount).where(BoosterAccount.user_id == user.id))
        return result.scalar_one_or_none()

async def create_booster_account(user_id, username, session):
    from app.database.models import BoosterAccount
    account = BoosterAccount(user_id=user_id, username=username)
    session.add(account)
    try:
        await session.commit()
    except IntegrityError:
        await session.rollback()

async def update_booster_balance(user_id, amount, currency="—Ä—É–±."):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –±—É—Å—Ç–µ—Ä–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∞–ª—é—Ç–µ"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(BoosterAccount).where(BoosterAccount.user_id == user_id))
        account = result.scalar_one_or_none()
        if account:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ –≤–∞–ª—é—Ç–µ
            currency_fields = {
                "—Å–æ–º": "balance_kg",
                "—Ç–µ–Ω–≥–µ": "balance_kz", 
                "—Ä—É–±.": "balance_ru"
            }
            balance_field = currency_fields.get(currency, "balance_ru")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = getattr(account, balance_field, 0)
            setattr(account, balance_field, current_balance + amount)
            await session.commit()

async def get_booster_balance_by_region(user_id, region):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –±—É—Å—Ç–µ—Ä–∞ –≤ –≤–∞–ª—é—Ç–µ –µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(BoosterAccount).where(BoosterAccount.user_id == user_id))
        account = result.scalar_one_or_none()
        if account:
            region_balances = {
                "üá∞üá¨ –ö–†": account.balance_kg,
                "üá∞üáø –ö–ó": account.balance_kz,
                "üá∑üá∫ –†–£": account.balance_ru
            }
            return region_balances.get(region, account.balance_ru)
        return 0

async def get_booster_total_balance_in_currency(user_id, target_currency):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –±—É—Å—Ç–µ—Ä–∞, —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É"""
    from app.utils.currency_converter import convert_booster_balance
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(BoosterAccount).where(BoosterAccount.user_id == user_id))
        account = result.scalar_one_or_none()
        if not account:
            return 0
        
        total_balance = 0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã –∏–∑ –≤—Å–µ—Ö –≤–∞–ª—é—Ç –≤ —Ü–µ–ª–µ–≤—É—é
        if account.balance_kg > 0:
            converted = await convert_booster_balance(account.balance_kg, "—Å–æ–º", target_currency)
            total_balance += converted
            
        if account.balance_kz > 0:
            converted = await convert_booster_balance(account.balance_kz, "—Ç–µ–Ω–≥–µ", target_currency)
            total_balance += converted
            
        if account.balance_ru > 0:
            converted = await convert_booster_balance(account.balance_ru, "—Ä—É–±.", target_currency)
            total_balance += converted
        
        return round(total_balance, 2)

async def convert_booster_balance_to_region(user_id, target_region):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –±—É—Å—Ç–µ—Ä–∞ –≤ –≤–∞–ª—é—Ç—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
    from app.utils.currency_converter import convert_booster_balance
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
    region_currencies = {
        "üá∞üá¨ –ö–†": "—Å–æ–º",
        "üá∞üáø –ö–ó": "—Ç–µ–Ω–≥–µ",
        "üá∑üá∫ –†–£": "—Ä—É–±."
    }
    target_currency = region_currencies.get(target_region, "—Ä—É–±.")
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(BoosterAccount).where(BoosterAccount.user_id == user_id))
        account = result.scalar_one_or_none()
        if not account:
            return False, "–ê–∫–∫–∞—É–Ω—Ç –±—É—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç–µ
        total_balance = 0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –≤—Å–µ—Ö –≤–∞–ª—é—Ç
        if account.balance_kg > 0:
            converted = await convert_booster_balance(account.balance_kg, "—Å–æ–º", target_currency)
            total_balance += converted
            
        if account.balance_kz > 0:
            converted = await convert_booster_balance(account.balance_kz, "—Ç–µ–Ω–≥–µ", target_currency)
            total_balance += converted
            
        if account.balance_ru > 0:
            converted = await convert_booster_balance(account.balance_ru, "—Ä—É–±.", target_currency)
            total_balance += converted
        
        # –û–±–Ω—É–ª—è–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
        account.balance_kg = 0
        account.balance_kz = 0
        account.balance_ru = 0
        
        if target_currency == "—Å–æ–º":
            account.balance_kg = total_balance
        elif target_currency == "—Ç–µ–Ω–≥–µ":
            account.balance_kz = total_balance
        elif target_currency == "—Ä—É–±.":
            account.balance_ru = total_balance
            
        await session.commit()
        return True, f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {target_currency}: {total_balance:.2f}"

async def get_users_page(offset=0, limit=5):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).offset(offset).limit(limit))
        return result.scalars().all()

async def count_users():
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(func.count()).select_from(User))
        return result.scalar_one()

async def count_users_by_role(role: str):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(func.count()).select_from(User).where(User.role == role))
        return result.scalar_one()

async def search_users(query: str):
    async with AsyncSessionLocal() as session:
        stmt = select(User).where(
            or_(
                User.username.ilike(f"%{query}%"),
                User.tg_id == query if query.isdigit() else False
            )
        )
        result = await session.execute(stmt)
        return result.scalars().all()

async def update_user_balance(tg_id, new_balance, region=None):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if user:
            target_region = region or user.region
            if target_region == "üá∞üá¨ –ö–†" or target_region == "kg":
                user.balance_kg = new_balance
            elif target_region == "üá∞üáø –ö–ó" or target_region == "kz":
                user.balance_kz = new_balance
            elif target_region == "üá∑üá∫ –†–£" or target_region == "ru":
                user.balance_ru = new_balance
            await session.commit()

async def update_user_bonus_balance(tg_id, new_bonus_balance, region=None):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if user:
            target_region = region or user.region
            if target_region == "üá∞üá¨ –ö–†" or target_region == "kg":
                user.bonus_kg = new_bonus_balance
            elif target_region == "üá∞üáø –ö–ó" or target_region == "kz":
                user.bonus_kz = new_bonus_balance
            elif target_region == "üá∑üá∫ –†–£" or target_region == "ru":
                user.bonus_ru = new_bonus_balance
            await session.commit()

async def update_user_role(tg_id, new_role):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if user:
            user.role = new_role
            await session.commit()


async def create_payment_request(user_id, region, amount, receipt_file_id):
    async with AsyncSessionLocal() as session:
        request = PaymentRequest(
            user_id=user_id,
            region=region,
            amount=amount,
            receipt_file_id=receipt_file_id,
            status="pending"
        )
        session.add(request)
        await session.commit()
        await session.refresh(request)
        return request

async def get_payment_request_by_id(request_id):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(PaymentRequest).where(PaymentRequest.id == request_id))
        return result.scalar_one_or_none()

async def update_payment_request_status(request_id, status):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(PaymentRequest).where(PaymentRequest.id == request_id))
        request = result.scalar_one_or_none()
        if request:
            request.status = status
            await session.commit()

async def get_user_by_id(user_id):
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        return result.scalar_one_or_none()

async def update_user_balance_by_region(user_id: int, balance_field: str, amount: float):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user_db = result.scalar_one_or_none()
        if user_db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ amount –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)
            is_first_topup = False
            if amount > 0:
                is_first_topup = (
                    user_db.balance_kg == 0 and
                    user_db.balance_kz == 0 and
                    user_db.balance_ru == 0
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            current_balance = getattr(user_db, balance_field)
            setattr(user_db, balance_field, current_balance + amount)
            
            await session.commit()

            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
            if is_first_topup and user_db.referrer_id:
                BONUS_AMOUNT = 50  # —É–∫–∞–∂–∏ –Ω—É–∂–Ω—É—é —Å—É–º–º—É
                await add_bonus_to_referrer(user_db.id, BONUS_AMOUNT)
            
            return getattr(user_db, balance_field)
        return None

async def get_admins():
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(User.tg_id).where(User.role == "admin"))
        return [row[0] for row in result.all()]
    
async def get_payment_requests_by_user(user_id):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(PaymentRequest).where(PaymentRequest.user_id == user_id).order_by(PaymentRequest.created_at.desc())
        )
        return result.scalars().all()
    
async def get_all_payment_requests():
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(PaymentRequest).order_by(PaymentRequest.created_at.desc())
        )
        return result.scalars().all()

from sqlalchemy import select

async def set_booster_status(user_id: int, status: str, session):
    result = await session.execute(
        select(BoosterAccount).where(BoosterAccount.user_id == user_id)
    )
    account = result.scalar_one_or_none()
    if account:
        account.status = status
        await session.commit()



async def add_bonus_to_referrer(user_id: int, amount: float):
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if user and user.referrer_id:
            referrer = await session.get(User, user.referrer_id)
            if referrer:
                # –ú–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª—è—Ç—å –≤ –±–æ–Ω—É—Å_kg, –±–æ–Ω—É—Å_kz, –±–æ–Ω—É—Å_ru –ø–æ —Ä–µ–≥–∏–æ–Ω—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                if user.region == "üá∞üá¨ –ö–†":
                    referrer.bonus_kg += amount
                elif user.region == "üá∞üáø –ö–ó":
                    referrer.bonus_kz += amount
                elif user.region == "üá∑üá∫ –†–£":
                    referrer.bonus_ru += amount
                await session.commit()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤
                history = BonusHistory(
                    user_id=referrer.id,
                    amount=amount,
                    source="–†–µ—Ñ–µ—Ä–∞–ª",
                    comment=(
                        f"–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
                        f"{'@' + user.username if user.username else user.tg_id}"
                    )
                )
                session.add(history)
                await session.commit()

                if referrer.tg_id:
                    try:
                        await bot.send_message(
                            referrer.tg_id,
                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å {amount} –∑–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
                        )
                    except Exception:
                        pass  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ —Ç.–¥.

async def check_and_activate_promo(user_id: int, code: str):
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        result = await session.execute(
            select(PromoCode).where(PromoCode.code == code)
        )
        promo = result.scalar_one_or_none()
        if not promo:
            return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if promo.expires_at:
            expires_at = promo.expires_at
            if expires_at.tzinfo is None:
                expires_at = expires_at.replace(tzinfo=timezone.utc)
            if expires_at < datetime.now(timezone.utc):
                return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        if promo.max_activations is not None and promo.activations >= promo.max_activations:
            return False, "–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω."

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ user_id –∏ promo_code
        activation = await session.execute(
            select(PromoActivation).where(
                PromoActivation.user_id == user_id,
                PromoActivation.promo_code == promo.code
            )
        )
        if activation.scalar_one_or_none():
            return False, "–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥."

        # –í—Å—ë –æ–∫ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        promo.activations += 1
        session.add(PromoActivation(user_id=user_id, promo_id=promo.id, promo_code=promo.code))

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        user = await session.get(User, user_id)
        if promo.type == "discount":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–∫–∞–∑–µ
            user.active_discount_percent = promo.value
            await session.commit()
            return True, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–∫–∏–¥–∫–∞ {promo.value}% –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É."
        elif promo.type == "bonus":
            if promo.currency == "—Å–æ–º":
                user.bonus_kg += promo.value
            elif promo.currency == "—Ç–µ–Ω–≥–µ":
                user.bonus_kz += promo.value
            elif promo.currency == "—Ä—É–±.":
                user.bonus_ru += promo.value
            else:
                user.bonus_ru += promo.value  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ä—É–±–ª—è—Ö
            session.add(BonusHistory(
                user_id=user_id,
                amount=promo.value,
                source="–ü—Ä–æ–º–æ–∫–æ–¥",
                comment=f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo.code}"
            ))
            await session.commit()
            return True, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo.value} {promo.currency or ''} –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç."
        else:
            await session.commit()
            return True, "–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"


async def get_user_active_discount(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if user:
            return user.active_discount_percent or 0
        return 0


async def apply_user_discount(user_id: int):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if user and user.active_discount_percent:
            discount = user.active_discount_percent
            user.active_discount_percent = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            return discount
        return 0


async def get_user_bonus_balance(user_id: int, currency: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ"""
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            return 0
        
        if currency == "—Å–æ–º":
            return user.bonus_kg or 0
        elif currency == "—Ç–µ–Ω–≥–µ":
            return user.bonus_kz or 0
        elif currency == "—Ä—É–±.":
            return user.bonus_ru or 0
        else:
            return 0


async def use_user_bonus(user_id: int, amount: float, currency: str):
    """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    async with AsyncSessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –±–æ–Ω—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        if currency == "—Å–æ–º":
            current_bonus = user.bonus_kg or 0
            if current_bonus < amount:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {current_bonus:.2f} —Å–æ–º"
            user.bonus_kg -= amount
        elif currency == "—Ç–µ–Ω–≥–µ":
            current_bonus = user.bonus_kz or 0
            if current_bonus < amount:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {current_bonus:.2f} —Ç–µ–Ω–≥–µ"
            user.bonus_kz -= amount
        elif currency == "—Ä—É–±.":
            current_bonus = user.bonus_ru or 0
            if current_bonus < amount:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {current_bonus:.2f} —Ä—É–±."
            user.bonus_ru -= amount
        else:
            return False, "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤
        session.add(BonusHistory(
            user_id=user_id,
            amount=-amount,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ø–∏—Å–∞–Ω–∏–µ
            source="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            comment=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ ({amount} {currency})"
        ))
        
        await session.commit()
        return True, f"–°–ø–∏—Å–∞–Ω–æ {amount:.2f} {currency} —Å –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞."


async def delete_expired_promocodes():
    async with AsyncSessionLocal() as session:
        now_utc = datetime.now(timezone.utc)
        await session.execute(
            delete(PromoCode).where(
                PromoCode.expires_at.isnot(None),
                PromoCode.expires_at < now_utc
            )
        )
        await session.commit()

async def create_order(order_data: dict) -> Order:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    async with AsyncSessionLocal() as session:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = f"#Z{uuid.uuid4().hex[:6].upper()}"
        
        order = Order(
            order_id=order_id,
            user_id=order_data.get("user_id"),
            service_type=order_data.get("service_type"),
            boost_type=order_data.get("boost_type"),
            region=order_data.get("region"),
            current_rank=order_data.get("current_rank"),
            target_rank=order_data.get("target_rank"),
            current_mythic_stars=order_data.get("current_mythic_stars"),
            target_mythic_stars=order_data.get("target_mythic_stars"),
            hero=order_data.get("hero"),
            lane=order_data.get("lane"),
            heroes_mains=order_data.get("heroes_mains"),
            game_login=order_data.get("game_login"),
            game_password=order_data.get("game_password"),
            game_id=order_data.get("game_id"),
            contact_info=order_data.get("contact_info"),
            base_cost=order_data.get("base_cost"),
            multiplier=order_data.get("multiplier", 1.0),
            total_cost=order_data.get("total_cost"),
            currency=order_data.get("currency"),
            details=order_data.get("details"),
            preferred_time=order_data.get("preferred_time"),
            coaching_topic=order_data.get("coaching_topic"),
            coaching_hours=order_data.get("coaching_hours"),
            status="pending"
        )
        
        session.add(order)
        await session.commit()
        await session.refresh(order)
        return order

async def get_user_orders(user_id: int, limit: int = 10, offset: int = 0):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order)
            .where(Order.user_id == user_id)
            .order_by(Order.created_at.desc())
            .limit(limit)
            .offset(offset)
        )
        return result.scalars().all()

# === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê–ú–ò ===

async def get_order_by_id(order_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ ID"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order).where(Order.order_id == order_id)
        )
        return result.scalar_one_or_none()

async def get_all_orders(status_filter: str = "all", limit: int = 20, offset: int = 0):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    async with AsyncSessionLocal() as session:
        query = select(Order).order_by(Order.created_at.desc())
        
        if status_filter != "all":
            query = query.where(Order.status == status_filter)
        
        result = await session.execute(query.limit(limit).offset(offset))
        return result.scalars().all()

async def update_order_status(order_id: str, new_status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order).where(Order.order_id == order_id)
        )
        order = result.scalar_one_or_none()
        if order:
            order.status = new_status
            await session.commit()
            return order
        return None

async def assign_booster_to_order(order_id: str, booster_id: int):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –±—É—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order).where(Order.order_id == order_id)
        )
        order = result.scalar_one_or_none()
        if order:
            order.assigned_booster_id = booster_id
            order.status = "confirmed"
            await session.commit()
            return order
        return None

async def get_boosters():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(User).where(User.role == "booster")
        )
        return result.scalars().all()

async def get_active_boosters():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤ —Å –∏—Ö –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(BoosterAccount)
            .join(User, BoosterAccount.user_id == User.id)
            .where(BoosterAccount.status == "active")
        )
        return result.scalars().all()

async def get_orders_by_booster(booster_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –±—É—Å—Ç–µ—Ä—É"""
    import logging
    logger = logging.getLogger(__name__)
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order)
            .where(Order.assigned_booster_id == booster_id)
            .order_by(Order.created_at.desc())
        )
        orders = result.scalars().all()
        logger.info(f"CRUD: get_orders_by_booster({booster_id}) –Ω–∞—à–µ–ª {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
        for order in orders[:3]:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞
            logger.info(f"CRUD: –ó–∞–∫–∞–∑ {order.order_id}: —Å—Ç–∞—Ç—É—Å {order.status}, –Ω–∞–∑–Ω–∞—á–µ–Ω {order.assigned_booster_id}")
        return orders

async def count_orders_by_status(status: str = None):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    async with AsyncSessionLocal() as session:
        query = select(func.count()).select_from(Order)
        if status:
            query = query.where(Order.status == status)
        result = await session.execute(query)
        return result.scalar_one()

async def search_orders(query: str):
    """–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as session:
        # –ü–æ–∏—Å–∫ –ø–æ ID –∑–∞–∫–∞–∑–∞
        if query.startswith("#"):
            result = await session.execute(
                select(Order).where(Order.order_id.ilike(f"%{query}%"))
            )
            return result.scalars().all()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ telegram ID
        result = await session.execute(
            select(Order)
            .join(User, Order.user_id == User.id)
            .where(
                or_(
                    User.username.ilike(f"%{query}%"),
                    User.tg_id == int(query) if query.isdigit() else False
                )
            )
        )
        return result.scalars().all()

async def update_order_price(order_id: str, new_price: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order).where(Order.order_id == order_id)
        )
        order = result.scalar_one_or_none()
        if order:
            order.total_cost = new_price
            await session.commit()
            return order
        return None

async def get_orders_count(user_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Order)
            .where(Order.user_id == user_id)
        )
        orders = result.scalars().all()
        return len(orders)



async def get_users_by_role(role: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏"""
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(User).where(User.role == role)
            )
            users = result.scalars().all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é '{role}'")
            return users
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é '{role}': {e}")
        return []
