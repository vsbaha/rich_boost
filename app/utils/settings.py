import json
import logging
from typing import Any, Dict, Optional
from sqlalchemy import select
from app.database.db import AsyncSessionLocal
from app.database.models import BotSettings

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    # –ë—ç–∫–∞–ø
    "GROUP_ID": {
        "value": -1002896042115,
        "description": "ID Tg –≥—Ä—É–ø–ø—ã –¥–ª—è –±—ç–∫–∞–ø–∞",
        "category": "backup"
    },
    "BACKUP_HOUR": {
        "value": 1,
        "description": "–ß–∞—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—ç–∫–∞–ø–∞   (24—á —Ñ–æ—Ä–º–∞—Ç)",
        "category": "backup"
    },
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    "MIN_TOPUP_KGS": {
        "value": 100,
        "description": "üá∞üá¨ –ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–æ–º–∞—Ö",
        "category": "payments"
    },
    "MIN_TOPUP_KZT": {
        "value": 500,
        "description": "üá∞üáø –ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ç–µ–Ω–≥–µ",
        "category": "payments"
    },
    "MIN_TOPUP_RUB": {
        "value": 200,
        "description": "üá∑üá∫ –ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö",
        "category": "payments"
    },
    
    # –¶–µ–Ω—ã –∑–∞ –æ–±—É—á–µ–Ω–∏–µ
    "COACHING_PRICES": {
        "value": {
            "üá∞üá¨ –ö–†": 150,
            "üá∞üáø –ö–ó": 1500,
            "üá∑üá∫ –†–£": 500
        },
        "description": "–¶–µ–Ω—ã –∑–∞ —á–∞—Å –æ–±—É—á–µ–Ω–∏—è",
        "category": "prices"
    },
    
    # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –±—É—Å—Ç–∞
    "BOOST_MULTIPLIERS": {
        "value": {
            "account": 1.0,
            "shared": 2.5,
            "winrate": 1.5,
            "mmr": 1.0,
            "coaching": 1.0
        },
        "description": "–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –±—É—Å—Ç–∞",
        "category": "prices"
    },
    
    # –¶–µ–Ω—ã –ø–æ —Ä–∞–Ω–≥–∞–º
    "RANK_PRICES": {
        "value": {
            "üá∞üá¨ –ö–†": {
                "–í–æ–∏–Ω": 55,
                "–≠–ª–∏—Ç–∞": 55,
                "–ú–∞—Å—Ç–µ—Ä": 55,
                "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä": 55,
                "–≠–ø–∏–∫": 55,
                "–õ–µ–≥–µ–Ω–¥–∞": 55,
                "–ú–∏—Ñ–∏–∫": 55,
                "–ú–∏—Ñ–∏–∫0-25": 80,
                "–ú–∏—Ñ–∏–∫25-50": 90,
                "–ú–∏—Ñ–∏–∫50-100": 110,
                "–ú–∏—Ñ–∏–∫100+": 130,
            },
            "üá∞üáø –ö–ó": {
                "–í–æ–∏–Ω": 310,
                "–≠–ª–∏—Ç–∞": 310,
                "–ú–∞—Å—Ç–µ—Ä": 310,
                "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä": 310,
                "–≠–ø–∏–∫": 310,
                "–õ–µ–≥–µ–Ω–¥–∞": 310,
                "–ú–∏—Ñ–∏–∫": 310,
                "–ú–∏—Ñ–∏–∫0-25": 450,
                "–ú–∏—Ñ–∏–∫25-50": 505,
                "–ú–∏—Ñ–∏–∫50-100": 620,
                "–ú–∏—Ñ–∏–∫100+": 730,
            },
            "üá∑üá∫ –†–£": {
                "–í–æ–∏–Ω": 55,
                "–≠–ª–∏—Ç–∞": 55,
                "–ú–∞—Å—Ç–µ—Ä": 55,
                "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä": 55,
                "–≠–ø–∏–∫": 55,
                "–õ–µ–≥–µ–Ω–¥–∞": 55,
                "–ú–∏—Ñ–∏–∫": 55,
                "–ú–∏—Ñ–∏–∫0-25": 80,
                "–ú–∏—Ñ–∏–∫25-50": 90,
                "–ú–∏—Ñ–∏–∫50-100": 110,
                "–ú–∏—Ñ–∏–∫100+": 130,
            }
        },
        "description": "–¶–µ–Ω—ã –ø–æ —Ä–∞–Ω–≥–∞–º",
        "category": "prices"
    },
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ –±—É—Å—Ç–µ—Ä–æ–≤
    "BOOSTER_INCOME_PERCENT": {
        "value": 70,
        "description": "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ –±—É—Å—Ç–µ—Ä–æ–≤ –æ—Ç –∑–∞–∫–∞–∑–∞",
        "category": "prices"
    }
}

class SettingsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    
    @staticmethod
    async def get_setting(key: str, default_value: Any = None) -> Any:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            async with AsyncSessionLocal() as session:
                result = await session.execute(
                    select(BotSettings).where(BotSettings.key == key)
                )
                setting = result.scalar_one_or_none()
                
                if setting:
                    try:
                        return json.loads(setting.value)
                    except json.JSONDecodeError:
                        # –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        return setting.value
                
                # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if key in DEFAULT_SETTINGS:
                    return DEFAULT_SETTINGS[key]["value"]
                
                return default_value
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return default_value
    
    @staticmethod
    async def set_setting(key: str, value: Any, description: str = None, category: str = "general") -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            async with AsyncSessionLocal() as session:
                result = await session.execute(
                    select(BotSettings).where(BotSettings.key == key)
                )
                setting = result.scalar_one_or_none()
                
                # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                if isinstance(value, (dict, list, int, float, bool)):
                    value_str = json.dumps(value, ensure_ascii=False)
                else:
                    value_str = str(value)
                
                if setting:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                    setting.value = value_str
                    if description:
                        setting.description = description
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                    setting = BotSettings(
                        key=key,
                        value=value_str,
                        description=description or DEFAULT_SETTINGS.get(key, {}).get("description", ""),
                        category=category
                    )
                    session.add(setting)
                
                await session.commit()
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {value}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
            return False
    
    @staticmethod
    async def get_all_settings(category: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            async with AsyncSessionLocal() as session:
                query = select(BotSettings)
                if category:
                    query = query.where(BotSettings.category == category)
                
                result = await session.execute(query)
                settings = result.scalars().all()
                
                settings_dict = {}
                for setting in settings:
                    try:
                        settings_dict[setting.key] = json.loads(setting.value)
                    except json.JSONDecodeError:
                        settings_dict[setting.key] = setting.value
                
                return settings_dict
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return {}
    
    @staticmethod
    async def initialize_default_settings():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        try:
            for key, config in DEFAULT_SETTINGS.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
                current_value = await SettingsManager.get_setting(key)
                if current_value is None:
                    await SettingsManager.set_setting(
                        key,
                        config["value"],
                        config["description"],
                        config["category"]
                    )
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def get_group_id() -> int:
    return await SettingsManager.get_setting("GROUP_ID", -1002896042115)

async def get_backup_hour() -> int:
    return await SettingsManager.get_setting("BACKUP_HOUR", 1)

async def get_min_topup_kgs() -> int:
    return await SettingsManager.get_setting("MIN_TOPUP_KGS", 100)

async def get_min_topup_kzt() -> int:
    return await SettingsManager.get_setting("MIN_TOPUP_KZT", 500)

async def get_min_topup_rub() -> int:
    return await SettingsManager.get_setting("MIN_TOPUP_RUB", 200)

async def get_coaching_prices() -> Dict[str, int]:
    return await SettingsManager.get_setting("COACHING_PRICES", {
        "üá∞üá¨ –ö–†": 150,
        "üá∞üáø –ö–ó": 1500,
        "üá∑üá∫ –†–£": 500
    })

async def get_boost_multipliers() -> Dict[str, float]:
    return await SettingsManager.get_setting("BOOST_MULTIPLIERS", {
        "account": 1.0,
        "shared": 2.5,
        "winrate": 1.5,
        "mmr": 1.0,
        "coaching": 1.0
    })

async def get_rank_prices() -> Dict[str, Dict[str, int]]:
    return await SettingsManager.get_setting("RANK_PRICES", DEFAULT_SETTINGS["RANK_PRICES"]["value"])

async def get_booster_income_percent() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ –±—É—Å—Ç–µ—Ä–æ–≤ –æ—Ç –∑–∞–∫–∞–∑–∞"""
    return await SettingsManager.get_setting("BOOSTER_INCOME_PERCENT", DEFAULT_SETTINGS["BOOSTER_INCOME_PERCENT"]["value"])
