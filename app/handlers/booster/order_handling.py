from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from app.utils.roles import booster_only
from app.states.booster_states import BoosterStates
from app.database.crud import (
    get_order_by_id, get_orders_by_booster, update_order_status, 
    get_user_by_id, get_booster_account, get_user_by_tg_id, get_users_by_role
)
from app.keyboards.booster.order_management import (
    booster_order_details_keyboard, booster_work_progress_keyboard,
    booster_complete_order_keyboard, my_orders_list_keyboard
)
import logging
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

def get_currency_for_order(order, user=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–ª—é—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞, –æ–ø—Ä–µ–¥–µ–ª—è—è –µ—ë –ø–æ —Ä–µ–≥–∏–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    currency = order.currency
    if not currency or currency == "None" or currency is None:
        if user and user.region:
            region_currencies = {
                "üá∞üá¨ –ö–†": "—Å–æ–º",
                "üá∞üáø –ö–ó": "—Ç–µ–Ω–≥–µ", 
                "üá∑üá∫ –†–£": "—Ä—É–±."
            }
            currency = region_currencies.get(user.region, "–≤–∞–ª—é—Ç–∞")
        else:
            currency = "–≤–∞–ª—é—Ç–∞"
    return currency

async def send_admin_order_completion_notification(bot, order, booster_user, client, proof_message=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –±—É—Å—Ç–µ—Ä–æ–º"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    admins = await get_users_by_role("admin")
    
    if not admins:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    service_names = {
        "regular_boost": "üéÆ –û–±—ã—á–Ω—ã–π –±—É—Å—Ç",
        "hero_boost": "üéØ –ë—É—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", 
        "coaching": "üìö –ì–∞–π–¥ / –æ–±—É—á–µ–Ω–∏–µ"
    }
    
    boost_names = {
        "account": "üîê –ß–µ—Ä–µ–∑ –≤—Ö–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç",
        "shared": "ü§ù –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –±—É—Å—Ç",
        "mmr": "üìä –ë—É—Å—Ç –ú–ú–†",
        "winrate": "üìà –ë—É—Å—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞"
    }
    
    text = f"‚úÖ <b>–ó–ê–ö–ê–ó –ó–ê–í–ï–†–®–ï–ù –ë–£–°–¢–ï–†–û–ú!</b>\n\n"
    text += f"üÜî <b>ID –∑–∞–∫–∞–∑–∞:</b> <code>{order.order_id}</code>\n"
    if client.username:
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{client.username} ({client.tg_id})\n"
    else:
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> <a href='tg://user?id={client.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a> ({client.tg_id})\n"
    if booster_user.username:
        text += f"üéØ <b>–ë—É—Å—Ç–µ—Ä:</b> @{booster_user.username} ({booster_user.tg_id})\n"
    else:
        text += f"üéØ <b>–ë—É—Å—Ç–µ—Ä:</b> <a href='tg://user?id={booster_user.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a> ({booster_user.tg_id})\n"
    text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {client.region}\n\n"
    
    text += f"üõí <b>–£—Å–ª—É–≥–∞:</b> {service_names.get(order.service_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    
    if order.service_type == "coaching":
        text += f"üìö <b>–¢–µ–º–∞:</b> {order.coaching_topic or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"‚è±Ô∏è <b>–ß–∞—Å–æ–≤:</b> {order.coaching_hours or 1}\n"
    else:
        text += f"üîß <b>–¢–∏–ø:</b> {boost_names.get(order.boost_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        if order.current_rank == "–ú–∏—Ñ–∏–∫":
            text += f"üìä <b>–¢–µ–∫—É—â–∏–π:</b> –ú–∏—Ñ–∏–∫ {order.current_mythic_stars or 0} ‚≠ê\n"
        else:
            text += f"üìä <b>–¢–µ–∫—É—â–∏–π:</b> {order.current_rank}\n"
        
        if order.target_rank == "–ú–∏—Ñ–∏–∫":
            text += f"üéØ <b>–¶–µ–ª—å:</b> –ú–∏—Ñ–∏–∫ {order.target_mythic_stars or 0} ‚≠ê\n"
        else:
            text += f"üéØ <b>–¶–µ–ª—å:</b> {order.target_rank}\n"
    
    currency = get_currency_for_order(order, client)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–æ—Ö–æ–¥–∞ –±—É—Å—Ç–µ—Ä–∞
    from app.utils.settings import get_booster_income_percent
    booster_percent = await get_booster_income_percent()
    booster_income = order.total_cost * (booster_percent / 100)
    
    text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order.total_cost:.0f} {currency}\n"
    text += f"üí≥ <b>–î–æ—Ö–æ–¥ –±—É—Å—Ç–µ—Ä–∞:</b> {booster_income:.0f} {currency} ({booster_percent}%)\n"
    text += f"üìÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    text += f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_approve_completion:{order.order_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_completion:{order.order_id}")
        ],
        [
            InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", callback_data=f"admin_order_details:{order.order_id}")
        ]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    sent_count = 0
    for admin in admins:
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=admin.tg_id,
                text=text,
                parse_mode="HTML",
                reply_markup=admin_keyboard
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ (—Ñ–æ—Ç–æ/–º–µ–¥–∏–∞/—Ç–µ–∫—Å—Ç), –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ
            if proof_message:
                proof_text = f"üì∏ <b>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order.order_id}:</b>"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
                if proof_message.photo:
                    await bot.send_photo(
                        chat_id=admin.tg_id,
                        photo=proof_message.photo[-1].file_id,
                        caption=proof_text + (f"\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {proof_message.caption}" if proof_message.caption else ""),
                        parse_mode="HTML"
                    )
                elif proof_message.video:
                    await bot.send_video(
                        chat_id=admin.tg_id,
                        video=proof_message.video.file_id,
                        caption=proof_text + (f"\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {proof_message.caption}" if proof_message.caption else ""),
                        parse_mode="HTML"
                    )
                elif proof_message.document:
                    await bot.send_document(
                        chat_id=admin.tg_id,
                        document=proof_message.document.file_id,
                        caption=proof_text + (f"\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {proof_message.caption}" if proof_message.caption else ""),
                        parse_mode="HTML"
                    )
                elif proof_message.text:
                    await bot.send_message(
                        chat_id=admin.tg_id,
                        text=proof_text + f"\n\nüí¨ <b>–¢–µ–∫—Å—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞:</b>\n{proof_message.text}",
                        parse_mode="HTML"
                    )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É @{admin.username} ({admin.tg_id})")
            sent_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É @{admin.username} ({admin.tg_id}): {e}")
    
    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(admins)} –∞–¥–º–∏–Ω–æ–≤")

# === –ü–†–û–°–ú–û–¢–† –ù–ê–ó–ù–ê–ß–ï–ù–ù–´–• –ó–ê–ö–ê–ó–û–í ===

@router.message(F.text == "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã")
@booster_only
async def show_booster_orders(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –±—É—Å—Ç–µ—Ä—É"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –±—É—Å—Ç–µ—Ä–∞
    booster_account = await get_booster_account(message.from_user.id)
    if not booster_account:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –±—É—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ tg_id
    user = await get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –±—É—Å—Ç–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º user.id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    orders = await get_orders_by_booster(user.id)
    
    logger.info(f"–ë—É—Å—Ç–µ—Ä {message.from_user.id} (user_id={user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–∫–∞–∑—ã. –ù–∞–π–¥–µ–Ω–æ: {len(orders) if orders else 0} –∑–∞–∫–∞–∑–æ–≤")
    
    if not orders:
        await message.answer(
            "üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await show_filtered_orders(message, orders, show_active_only=True, page=0, edit_message=False)

async def show_filtered_orders(message_or_call, orders, show_active_only=True, page=0, edit_message=True):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    if show_active_only:
        filtered_orders = [o for o in orders if o.status in ["confirmed", "in_progress", "pending_review"]]
        filter_name = "–∞–∫—Ç–∏–≤–Ω—ã–µ"
    else:
        filtered_orders = orders
        filter_name = "–≤—Å–µ"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    pending_orders = [o for o in filtered_orders if o.status == "confirmed"]
    in_progress_orders = [o for o in filtered_orders if o.status == "in_progress"]
    pending_review_orders = [o for o in filtered_orders if o.status == "pending_review"]
    completed_orders = [o for o in filtered_orders if o.status == "completed"]
    
    text = f"üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã ({filter_name})</b>\n\n"
    
    if filtered_orders:
        text += f"–í—Å–µ–≥–æ {filter_name}: <b>{len(filtered_orders)}</b>\n\n"
        
        status_text = ""
        if pending_orders:
            status_text += f"‚è≥ <b>–û–∂–∏–¥–∞—é—Ç –Ω–∞—á–∞–ª–∞:</b> {len(pending_orders)}\n"
        if in_progress_orders:
            status_text += f"üöÄ <b>–í —Ä–∞–±–æ—Ç–µ:</b> {len(in_progress_orders)}\n"
        if pending_review_orders:
            status_text += f"üìã <b>–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:</b> {len(pending_review_orders)}\n"
        if completed_orders and not show_active_only:
            status_text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:</b> {len(completed_orders)}\n"
        
        if status_text:
            text += f"{status_text}\n"
            
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —Ä–∞–±–æ—Ç—ã:"
    else:
        if show_active_only:
            text += "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã."
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
            text += "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    
    keyboard = my_orders_list_keyboard(orders, show_active_only, page)
    
    if edit_message and hasattr(message_or_call, 'message'):
        try:
            await message_or_call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        except Exception as e:
            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await message_or_call.message.delete()
            await message_or_call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    else:
        await message_or_call.answer(text, parse_mode="HTML", reply_markup=keyboard)

# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ó–ê–ö–ê–ó–û–í ===

@router.callback_query(F.data == "booster_refresh_orders")
@booster_only
async def booster_refresh_orders(call: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –±—É—Å—Ç–µ—Ä–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –±—É—Å—Ç–µ—Ä–∞
    booster_account = await get_booster_account(call.from_user.id)
    if not booster_account:
        await call.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –±—É—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ tg_id
    user = await get_user_by_tg_id(call.from_user.id)
    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –±—É—Å—Ç–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º user.id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    orders = await get_orders_by_booster(user.id)
    
    if not orders:
        await call.message.edit_text(
            "üì¶ <b>–ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        await call.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await show_filtered_orders(call, orders, show_active_only=True, page=0, edit_message=True)
    await call.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")

# === –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ò –ü–ê–ì–ò–ù–ê–¶–ò–Ø –ó–ê–ö–ê–ó–û–í ===

@router.callback_query(F.data.startswith("booster_orders_filter:"))
@booster_only
async def filter_booster_orders(call: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –±—É—Å—Ç–µ—Ä–∞"""
    _, filter_type, page_str = call.data.split(":")
    page = int(page_str)
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ tg_id
    user = await get_user_by_tg_id(call.from_user.id)
    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –±—É—Å—Ç–µ—Ä–∞
    orders = await get_orders_by_booster(user.id)
    
    show_active_only = filter_type == "active"
    await show_filtered_orders(call, orders, show_active_only, page, edit_message=True)
    await call.answer()

@router.callback_query(F.data.startswith("booster_orders_page:"))
@booster_only
async def paginate_booster_orders(call: CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –±—É—Å—Ç–µ—Ä–∞"""
    _, show_active_str, page_str = call.data.split(":")
    show_active_only = show_active_str == "True"
    page = int(page_str)
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ tg_id
    user = await get_user_by_tg_id(call.from_user.id)
    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –±—É—Å—Ç–µ—Ä–∞
    orders = await get_orders_by_booster(user.id)
    
    await show_filtered_orders(call, orders, show_active_only, page, edit_message=True)
    await call.answer()

# === –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ó–ê–ö–ê–ó–ê ===

@router.callback_query(F.data.startswith("booster_order_details:"))
@booster_only
async def booster_order_details(call: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –±—É—Å—Ç–µ—Ä–∞"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –±—É—Å—Ç–µ—Ä—É - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å user_id –∏–∑ –ë–î
    booster_account = await get_booster_account(call.from_user.id)
    user = await get_user_by_tg_id(call.from_user.id)
    if not booster_account or not user or order.assigned_booster_id != user.id:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º!", show_alert=True)
        return
    
    client = await get_user_by_id(order.user_id)
    text = await format_booster_order_details(order, client)
    
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=booster_order_details_keyboard(order_id, order.status)
    )
    await call.answer()

async def format_booster_order_details(order, client):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –±—É—Å—Ç–µ—Ä–∞"""
    
    # –°—Ç–∞—Ç—É—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    status_names = {
        "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        "in_progress": "üöÄ –í —Ä–∞–±–æ—Ç–µ",
        "paused": "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"
    }
    
    # –¢–∏–ø—ã —É—Å–ª—É–≥
    service_names = {
        "regular_boost": "üéÆ –û–±—ã—á–Ω—ã–π –±—É—Å—Ç",
        "hero_boost": "üéØ –ë—É—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        "coaching": "üìö –ì–∞–π–¥ / –æ–±—É—á–µ–Ω–∏–µ"
    }
    
    # –¢–∏–ø—ã –±—É—Å—Ç–∞
    boost_names = {
        "account": "üîê –ß–µ—Ä–µ–∑ –≤—Ö–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç",
        "shared": "ü§ù –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –±—É—Å—Ç",
        "mmr": "üìä –ë—É—Å—Ç –ú–ú–†",
        "winrate": "üìà –ë—É—Å—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞"
    }
    
    text = f"üìã <b>–ó–∞–∫–∞–∑ {order.order_id}</b>\n\n"
    
    # –°—Ç–∞—Ç—É—Å
    text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_names.get(order.status, order.status)}\n"
    text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    if client.username:
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{client.username}\n"
    else:
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> <a href='tg://user?id={client.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a>\n"
    text += f"üì± <b>Telegram ID:</b> {client.tg_id}\n"
    text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {client.region}\n\n"
    
    # –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    text += f"üõí <b>–£—Å–ª—É–≥–∞:</b> {service_names.get(order.service_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    
    if order.service_type == "coaching":
        text += f"üìö <b>–¢–µ–º–∞:</b> {order.coaching_topic or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"‚è±Ô∏è <b>–ß–∞—Å–æ–≤:</b> {order.coaching_hours or 1}\n"
    else:
        text += f"üîß <b>–¢–∏–ø:</b> {boost_names.get(order.boost_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        # –†–∞–Ω–≥–∏
        if order.current_rank == "–ú–∏—Ñ–∏–∫":
            text += f"üìä <b>–¢–µ–∫—É—â–∏–π:</b> –ú–∏—Ñ–∏–∫ {order.current_mythic_stars or 0} ‚≠ê\n"
        else:
            text += f"üìä <b>–¢–µ–∫—É—â–∏–π:</b> {order.current_rank}\n"
        
        if order.target_rank == "–ú–∏—Ñ–∏–∫":
            text += f"üéØ <b>–¶–µ–ª—å:</b> –ú–∏—Ñ–∏–∫ {order.target_mythic_stars or 0} ‚≠ê\n"
        else:
            text += f"üéØ <b>–¶–µ–ª—å:</b> {order.target_rank}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if order.lane:
            text += f"üéÆ <b>–õ–∞–π–Ω:</b> {order.lane}\n"
        if order.heroes_mains:
            text += f"üé≠ <b>–ú–µ–π–Ω—ã:</b> {order.heroes_mains}\n"
        if order.game_id:
            text += f"üÜî <b>–ò–≥—Ä–æ–≤–æ–π ID:</b> {order.game_id}\n"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        text += f"üë§ <b>–õ–æ–≥–∏–Ω:</b> {order.game_login or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        text += f"üîë <b>–ü–∞—Ä–æ–ª—å:</b> <code>{order.game_password or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
        
        if order.preferred_time:
            text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {order.preferred_time}\n"
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏
    if order.contact_info:
        text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {order.contact_info}\n"
    if order.details:
        text += f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {order.details}\n"
    
    # –§–∏–Ω–∞–Ω—Å—ã
    currency = get_currency_for_order(order, client)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ –±—É—Å—Ç–µ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    from app.utils.settings import get_booster_income_percent
    try:
        booster_percent = await get_booster_income_percent()
    except:
        booster_percent = 70  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 70%
    
    booster_income = order.total_cost * (booster_percent / 100)
    text += f"\nüí∞ <b>–í–∞—à –¥–æ—Ö–æ–¥:</b> {booster_income:.0f} {currency} ({booster_percent}%)\n"
    
    return text

# === –ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´ ===

@router.callback_query(F.data.startswith("booster_start_work:"))
@booster_only
async def booster_start_work(call: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –±—É—Å—Ç–µ—Ä—É - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å user_id –∏–∑ –ë–î
    booster_account = await get_booster_account(call.from_user.id)
    user = await get_user_by_tg_id(call.from_user.id)
    if not booster_account or not user or order.assigned_booster_id != user.id:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º!", show_alert=True)
        return
    
    if order.status != "confirmed":
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –≤–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await update_order_status(order_id, "in_progress")
    
    client = await get_user_by_id(order.user_id)
    
    await call.message.edit_text(
        f"üöÄ <b>–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞!</b>\n\n"
        f"–ó–∞–∫–∞–∑ {order_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É.\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
        f"–£–¥–∞—á–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞!",
        parse_mode="HTML",
        reply_markup=booster_order_details_keyboard(order_id, "in_progress")
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"üöÄ <b>–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ {order_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.\n"
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –∑–∞–∫–∞–∑—ã\".",
            parse_mode="HTML"
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    logger.info(f"–ë—É—Å—Ç–µ—Ä @{call.from_user.username} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º {order_id}")
    await call.answer("–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å!")

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–ú ===

@router.callback_query(F.data.startswith("booster_take_account:"))
@booster_only
async def booster_take_account(call: CallbackQuery):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ —Ç–æ–º, —á—Ç–æ –±—É—Å—Ç–µ—Ä –∑–∞–π–º–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –±—É—Å—Ç–µ—Ä—É - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å user_id –∏–∑ –ë–î
    booster_account = await get_booster_account(call.from_user.id)
    user = await get_user_by_tg_id(call.from_user.id)
    if not booster_account or not user or order.assigned_booster_id != user.id:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º!", show_alert=True)
        return
    
    if order.status != "in_progress":
        await call.answer("–ê–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!", show_alert=True)
        return
    
    client = await get_user_by_id(order.user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"üîí <b>–ê–∫–∫–∞—É–Ω—Ç –∑–∞–Ω—è—Ç!</b>\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞ {order_id} –∑–∞—à–µ–ª –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—É—Å—Ç–∞.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –≤—Ö–æ–¥–∏—Ç–µ –≤ –∏–≥—Ä—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.\n\n"
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –∑–∞–∫–∞–∑—ã\".",
            parse_mode="HTML"
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–Ω—è—Ç–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    await call.message.edit_text(
        f"üîí <b>–ê–∫–∫–∞—É–Ω—Ç –∑–∞–Ω—è—Ç!</b>\n\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ —Ç–æ–º, —á—Ç–æ –≤—ã –∑–∞—à–ª–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç.\n"
        f"–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
        f"üí° <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</b>\n"
        f"üÜî <b>ID:</b> {order.game_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üë§ <b>–õ–æ–≥–∏–Ω:</b> {order.game_login or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"  
        f"üîë <b>–ü–∞—Ä–æ–ª—å:</b> <code>{order.game_password or '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>",
        parse_mode="HTML",
        reply_markup=booster_work_progress_keyboard(order_id, account_taken=True, status=order.status)
    )
    
    logger.info(f"–ë—É—Å—Ç–µ—Ä @{call.from_user.username} –∑–∞–Ω—è–ª –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    await call.answer("–ê–∫–∫–∞—É–Ω—Ç –∑–∞–Ω—è—Ç! –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.")

@router.callback_query(F.data.startswith("booster_leave_account:"))
@booster_only
async def booster_leave_account(call: CallbackQuery):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ —Ç–æ–º, —á—Ç–æ –±—É—Å—Ç–µ—Ä –ø–æ–∫–∏–Ω—É–ª –∞–∫–∫–∞—É–Ω—Ç"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –±—É—Å—Ç–µ—Ä—É - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å user_id –∏–∑ –ë–î
    booster_account = await get_booster_account(call.from_user.id)
    user = await get_user_by_tg_id(call.from_user.id)
    if not booster_account or not user or order.assigned_booster_id != user.id:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º!", show_alert=True)
        return
    
    client = await get_user_by_id(order.user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"üîì <b>–ê–∫–∫–∞—É–Ω—Ç —Å–≤–æ–±–æ–¥–µ–Ω!</b>\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ–∫–∏–Ω—É–ª –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∏–≥—Ä—É.\n\n"
            f"–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.",
            parse_mode="HTML"
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    await call.message.edit_text(
        f"üîì <b>–ê–∫–∫–∞—É–Ω—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω!</b>\n\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ —Ç–æ–º, —á—Ç–æ –≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∞–∫–∫–∞—É–Ω—Ç.\n"
        f"–û–Ω –º–æ–∂–µ—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ –∏–≥—Ä—É.",
        parse_mode="HTML",
        reply_markup=booster_work_progress_keyboard(order_id, account_taken=False, status=order.status)
    )
    
    logger.info(f"–ë—É—Å—Ç–µ—Ä @{call.from_user.username} –ø–æ–∫–∏–Ω—É–ª –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    await call.answer("–ê–∫–∫–∞—É–Ω—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω! –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.")

# === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê ===

@router.callback_query(F.data.startswith("booster_complete_order:"))
@booster_only
async def booster_complete_order(call: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –±—É—Å—Ç–µ—Ä–æ–º"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –±—É—Å—Ç–µ—Ä—É - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å user_id –∏–∑ –ë–î
    booster_account = await get_booster_account(call.from_user.id)
    user = await get_user_by_tg_id(call.from_user.id)
    if not booster_account or not user or order.assigned_booster_id != user.id:
        await call.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º!", show_alert=True)
        return
    
    if order.status != "in_progress":
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(order_id=order_id)
    await state.set_state(BoosterStates.sending_completion_proof)
    
    await call.message.edit_text(
        f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id}</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:\n"
        f"üì∏ <b>–°–∫—Ä–∏–Ω—à–æ—Ç</b> —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n"
        f"üé• <b>–í–∏–¥–µ–æ</b> —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º\n"
        f"üìÑ <b>–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b> –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        f"üìé <b>–î–æ–∫—É–º–µ–Ω—Ç</b> —Å –æ—Ç—á–µ—Ç–æ–º\n\n"
        f"–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑—É", callback_data=f"booster_order_details:{order_id}")]
        ])
    )
    
    await call.answer()

@router.message(BoosterStates.sending_completion_proof)
@booster_only
async def process_completion_proof(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()
    order_id = data.get("order_id")
    
    if not order_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.clear()
        return
    
    order = await get_order_by_id(order_id)
    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    await update_order_status(order_id, "pending_review")
    
    client = await get_user_by_id(order.user_id)
    booster_user = await get_user_by_tg_id(message.from_user.id)
    
    await message.answer(
        f"‚úÖ <b>–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–æ!</b>\n\n"
        f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="booster_refresh_orders")]
        ])
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await message.bot.send_message(
            client.tg_id,
            f"üìã <b>–ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ!</b>\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}.\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="HTML"
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏
    try:
        await send_admin_order_completion_notification(message.bot, order, booster_user, client, message)
        logger.info(f"–ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
    
    logger.info(f"–ë—É—Å—Ç–µ—Ä @{message.from_user.username} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑ {order_id}")
    await state.clear()
