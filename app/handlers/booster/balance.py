




from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.utils.roles import booster_only
from app.keyboards.booster.balance_menu import (
    booster_balance_keyboard, 
    booster_convert_menu_keyboard, 
    conversion_confirm_keyboard
)
from app.keyboards.booster.payout_keyboards import get_back_to_balance_keyboard
from app.utils.currency import get_currency_info
from app.states.booster_states import BoosterStates
from app.database import crud
import logging

router = Router()
logger = logging.getLogger(__name__)

# === HELPER FUNCTIONS ===

async def get_booster_data(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±—É—Å—Ç–µ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from app.database.crud import get_booster_account, get_user_by_tg_id
    
    booster_account = await get_booster_account(user_id)
    user = await get_user_by_tg_id(user_id)
    
    return booster_account, user

def format_balance_text(booster_account) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –±–∞–ª–∞–Ω—Å–∞ –±—É—Å—Ç–µ—Ä–∞"""
    text = "üí∞ <b>–í–∞—à –±—É—Å—Ç–µ—Ä—Å–∫–∏–π –±–∞–ª–∞–Ω—Å</b>\n\n"
    text += f"üíµ <b>{booster_account.balance_usd:.2f} USD</b> (–æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å)\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if booster_account.balance_kg > 0:
        text += f"üá∞üá¨ <b>{booster_account.balance_kg:.2f} —Å–æ–º</b>\n"
    if booster_account.balance_kz > 0:
        text += f"üá∞üáø <b>{booster_account.balance_kz:.2f} —Ç–µ–Ω–≥–µ</b>\n"  
    if booster_account.balance_ru > 0:
        text += f"üá∑üá∫ <b>{booster_account.balance_ru:.2f} —Ä—É–±.</b>\n"
    
    text += "\n<i>üí° –í—Å–µ –Ω–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ USD. –î–ª—è –≤—ã–≤–æ–¥–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É.</i>"
    return text

def get_local_currency_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–∞—Ö"""
    return {
        "region_names": {
            "kg": "—Å–æ–º—ã üá∞üá¨",
            "kz": "—Ç–µ–Ω–≥–µ üá∞üáø",
            "ru": "—Ä—É–±–ª–∏ üá∑üá∫"
        },
        "currency_codes": {
            "kg": "—Å–æ–º",
            "kz": "—Ç–µ–Ω–≥–µ", 
            "ru": "—Ä—É–±."
        }
    }

async def show_balance_menu(message_or_call, booster_account, edit=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞"""
    text = format_balance_text(booster_account)
    
    if edit and hasattr(message_or_call, 'message'):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message_or_call.message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=booster_balance_keyboard()
            )
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if hasattr(message_or_call, 'answer'):
                await message_or_call.answer()
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if "no text in the message to edit" in str(e).lower() or "message to edit not found" in str(e).lower():
                try:
                    await message_or_call.message.delete()
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                
                await message_or_call.message.answer(
                    text,
                    parse_mode="HTML",
                    reply_markup=booster_balance_keyboard()
                )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message_or_call.message.answer(
                    text,
                    parse_mode="HTML",
                    reply_markup=booster_balance_keyboard()
                )
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if hasattr(message_or_call, 'answer'):
                await message_or_call.answer()
    else:
        await message_or_call.answer(
            text,
            parse_mode="HTML",
            reply_markup=booster_balance_keyboard()
        )

# === MAIN HANDLERS ===

@router.message(F.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
@booster_only
async def show_booster_balance(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –±—É—Å—Ç–µ—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    booster_account, user = await get_booster_data(message.from_user.id)
    
    if not booster_account:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –±—É—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    await show_balance_menu(message, booster_account)
    logger.info(f"–ë—É—Å—Ç–µ—Ä @{message.from_user.username} –ø—Ä–æ–≤–µ—Ä–∏–ª –±–∞–ª–∞–Ω—Å: USD {booster_account.balance_usd}")

# === EXCHANGE RATES HANDLERS ===

@router.callback_query(F.data.in_(["booster_show_rates", "booster_refresh_rates"]))
@booster_only
async def handle_exchange_rates(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
    from app.utils.currency_converter import get_current_rates, converter
    from app.keyboards.booster.payout_keyboards import get_back_to_balance_keyboard
    
    is_refresh = call.data == "booster_refresh_rates"
    
    try:
        if is_refresh:
            converter.cache = {}  # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
        rates = await get_current_rates()
        
        title = "üîÑ <b>–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>" if is_refresh else "üìä <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç</b>"
        text = f"{title}\n\n"
        text += f"üá∞üá¨‚Üíüá∞üáø 1 —Å–æ–º = {rates.get('KGS_to_KZT', 0):.3f} —Ç–µ–Ω–≥–µ\n"
        text += f"üá∞üá¨‚Üíüá∑üá∫ 1 —Å–æ–º = {rates.get('KGS_to_RUB', 0):.3f} —Ä—É–±.\n"
        text += f"üá∞üáø‚Üíüá∞üá¨ 1 —Ç–µ–Ω–≥–µ = {rates.get('KZT_to_KGS', 0):.3f} —Å–æ–º\n"
        text += f"üá∞üáø‚Üíüá∑üá∫ 1 —Ç–µ–Ω–≥–µ = {rates.get('KZT_to_RUB', 0):.3f} —Ä—É–±.\n"
        text += f"üá∑üá∫‚Üíüá∞üá¨ 1 —Ä—É–±. = {rates.get('RUB_to_KGS', 0):.3f} —Å–æ–º\n"
        text += f"üá∑üá∫‚Üíüá∞üáø 1 —Ä—É–±. = {rates.get('RUB_to_KZT', 0):.3f} —Ç–µ–Ω–≥–µ\n\n"
        text += "üí° <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å</i>" if not is_refresh else "üí° <i>–ö—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</i>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        keyboard = get_back_to_balance_keyboard()
        
        success_msg = "‚úÖ –ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!" if is_refresh else None
        if success_msg:
            await call.answer(success_msg)
        else:
            await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ {'–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' if is_refresh else '–ø–æ–ª—É—á–µ–Ω–∏—è'} –∫—É—Ä—Å–æ–≤"
        logger.error(f"{error_msg}: {e}")
        await call.answer(f"‚ùå {error_msg}", show_alert=True)

# === PAYOUT HANDLERS ===

@router.callback_query(F.data == "booster_request_payout")
@booster_only
async def booster_request_payout(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã"""
    from app.keyboards.booster.payout_keyboards import get_payout_currency_keyboard
    
    booster_account, user = await get_booster_data(call.from_user.id)
    
    if not booster_account or not user:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã
    available_balances = []
    if booster_account.balance_kg > 0:
        available_balances.append(f"üá∞üá¨ {booster_account.balance_kg:.2f} —Å–æ–º")
    if booster_account.balance_kz > 0:
        available_balances.append(f"üá∞üáø {booster_account.balance_kz:.2f} —Ç–µ–Ω–≥–µ")
    if booster_account.balance_ru > 0:
        available_balances.append(f"üá∑üá∫ {booster_account.balance_ru:.2f} —Ä—É–±.")

    if not available_balances:
        await call.answer(
            "‚ùå –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã —Å–Ω–∞—á–∞–ª–∞ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ USD –≤ –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            show_alert=True
        )
        return

    text = "üí∏ <b>–ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã</b>\n\n"
    text += "–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É:\n" + "\n".join(available_balances) + "\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"

    await call.message.edit_text(
        text, 
        parse_mode="HTML",
        reply_markup=get_payout_currency_keyboard()
    )
    await state.set_state(BoosterStates.selecting_payout_currency)

@router.callback_query(F.data.startswith("payout_currency_"))
@booster_only
async def select_payout_currency(call: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"""
    currency = call.data.split("_")[2]  # kg, kz, ru
    
    booster_account, user = await get_booster_data(call.from_user.id)
    if not booster_account:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
    if currency == "kg" and booster_account.balance_kg <= 0:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–æ–º–∞—Ö", show_alert=True)
        return
    elif currency == "kz" and booster_account.balance_kz <= 0:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ–Ω–≥–µ", show_alert=True)
        return
    elif currency == "ru" and booster_account.balance_ru <= 0:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä—É–±–ª—è—Ö", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ
    currency_info = get_currency_info(currency)
    balance = getattr(booster_account, f"balance_{currency}")
    
    text = f"üí∞ <b>–ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã –≤ {currency_info['name']}</b>\n\n"
    text += f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency_info['symbol']}\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:"
    
    await call.message.edit_text(text, parse_mode="HTML")
    await state.set_state(BoosterStates.entering_payout_amount)
    await state.update_data(payout_currency=currency, max_amount=balance)

@router.message(BoosterStates.entering_payout_amount)
@booster_only
async def process_payout_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –≤—ã–ø–ª–∞—Ç—ã"""
    from app.keyboards.booster.payout_keyboards import get_back_to_balance_keyboard
    
    try:
        amount = float(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            
        data = await state.get_data()
        currency = data['payout_currency']
        max_amount = data['max_amount']
        
        if amount > max_amount:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {max_amount:.2f}",
                reply_markup=get_back_to_balance_keyboard()
            )
            return
            
        currency_info = get_currency_info(currency)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        text = f"ÔøΩ <b>–ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã</b>\n\n"
        text += f"–í–∞–ª—é—Ç–∞: {currency_info['name']}\n"
        text += f"–°—É–º–º–∞: {amount:.2f} {currency_info['symbol']}\n\n"
        text += "üí≥ <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n"
        text += "‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ —Å—á–µ—Ç–∞\n"
        text += "‚Ä¢ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
        text += "‚Ä¢ –ë–∞–Ω–∫ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)\n\n"
        text += "<i>–ü—Ä–∏–º–µ—Ä:\n"
        text += "4169 1234 5678 9012\n"
        text += "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n"
        text += "–°–±–µ—Ä–±–∞–Ω–∫</i>"
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_back_to_balance_keyboard()
        )
        await state.set_state(BoosterStates.entering_payment_details)
        await state.update_data(payout_amount=amount)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
            reply_markup=get_back_to_balance_keyboard()
        )

@router.message(BoosterStates.entering_payment_details)
@booster_only
async def process_payment_details(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤"""
    from app.keyboards.booster.payout_keyboards import get_payout_confirmation_keyboard
    
    try:
        payment_details = message.text.strip()
        
        if len(payment_details) < 10:
            await message.answer(
                "‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.",
                reply_markup=get_back_to_balance_keyboard()
            )
            return
            
        data = await state.get_data()
        currency = data['payout_currency']
        amount = data['payout_amount']
        
        currency_info = get_currency_info(currency)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = f"üí∏ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã</b>\n\n"
        text += f"–í–∞–ª—é—Ç–∞: {currency_info['name']}\n"
        text += f"–°—É–º–º–∞: {amount:.2f} {currency_info['symbol']}\n\n"
        text += f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
        text += f"<code>{payment_details}</code>\n\n"
        text += "‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–æ–º.\n\n"
        text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å?"
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_payout_confirmation_keyboard(amount, currency)
        )
        await state.set_state(BoosterStates.confirming_payout_request)
        await state.update_data(payment_details=payment_details)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_back_to_balance_keyboard()
        )

@router.callback_query(F.data.startswith("confirm_payout_"))
@booster_only  
async def confirm_payout_request(call: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã"""
    from app.keyboards.booster.payout_keyboards import get_payout_success_keyboard
    from app.database.crud import create_payout_request
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = call.data.split("_")
    amount = float(parts[2])
    currency = parts[3]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    payment_details = data.get('payment_details', '')
    
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}: {amount} {currency}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
    payout_request = await create_payout_request(call.from_user.id, amount, currency, payment_details)
    
    if payout_request:
        currency_info = get_currency_info(currency)
        
        text = f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω</b>\n\n"
        text += f"üìã –ù–æ–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: #{payout_request.id}\n"
        text += f"üí∞ –°—É–º–º–∞: {amount:.2f} {currency_info['symbol']}\n"
        text += f"üìÖ –î–∞—Ç–∞: {payout_request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{payment_details}</code>\n\n"
        text += "‚è≥ –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
        text += "üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É."
        
        await call.message.edit_text(
            text,
            parse_mode="HTML", 
            reply_markup=get_payout_success_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        try:
            from app.utils.payments import notify_admins_about_payout_request
            from app.database.crud import get_booster_account_by_id
            from aiogram import Bot
            from app.config import BOT_TOKEN
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –±—É—Å—Ç–µ—Ä–∞
            booster_account = await get_booster_account_by_id(payout_request.booster_account_id)
            
            if booster_account:
                bot = Bot(token=BOT_TOKEN)
                await notify_admins_about_payout_request(bot, payout_request, booster_account)
                await bot.session.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã #{payout_request.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
        
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        
    await state.clear()

@router.callback_query(F.data == "cancel_payout")
@booster_only
async def cancel_payout_request(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–ø–ª–∞—Ç—ã"""
    await state.clear()
    account = await crud.get_booster_account(call.from_user.id)
    if account:
        await show_balance_menu(call, account, edit=True)
    else:
        await call.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@router.callback_query(F.data == "my_payout_requests") 
@booster_only
async def show_my_payout_requests(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        await show_payout_requests_page(call, page=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤", show_alert=True)

@router.callback_query(F.data.startswith("payout_requests_page_"))
@booster_only
async def show_payout_requests_page(call: CallbackQuery, page: int = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É"""
    from app.keyboards.booster.payout_keyboards import get_payout_requests_list_keyboard
    from app.database.crud import get_user_payout_requests
    
    if page is None:
        page = int(call.data.split("_")[-1])
    
    requests = await get_user_payout_requests(call.from_user.id)
    
    if not requests:
        text = "üìã <b>–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É.\n\n"
        text += "üí∏ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞."
        
        from app.keyboards.booster.payout_keyboards import get_my_requests_keyboard
        keyboard = get_my_requests_keyboard()
    else:
        total_requests = len(requests)
        text = f"üìã <b>–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
        text += f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        text += f"üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        
        keyboard = get_payout_requests_list_keyboard(requests, page)
    
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if ("message can't be edited" in str(e) or 
            "message to edit not found" in str(e) or
            "there is no text in the message to edit" in str(e)):
            try:
                await call.message.delete()
                await call.message.bot.send_message(
                    call.from_user.id,
                    text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")
                await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞")
        elif "message is not modified" in str(e):
            await call.answer("üîÑ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏: {e}")
            # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await call.message.delete()
                await call.message.bot.send_message(
                    call.from_user.id,
                    text,
                    parse_mode="HTML",
                    reply_markup=keyboard
                )
                await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ fallback
            except Exception as fallback_error:
                logger.error(f"–û—à–∏–±–∫–∞ fallback –æ—Ç–ø—Ä–∞–≤–∫–∏: {fallback_error}")
                await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞")

@router.callback_query(F.data.startswith("view_payout_request_"))
@booster_only
async def view_payout_request_detail(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É"""
    from app.keyboards.booster.payout_keyboards import get_payout_request_detail_keyboard
    from app.database.crud import get_payout_request_by_id
    
    request_id = int(call.data.split("_")[-1])
    payout_request = await get_payout_request_by_id(request_id)
    
    if not payout_request:
        await call.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    currency_info = get_currency_info(payout_request.currency)
    status_emoji = {"pending": "‚è≥", "approved": "‚úÖ", "rejected": "‚ùå"}
    status_text = {"pending": "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏", "approved": "–û–¥–æ–±—Ä–µ–Ω–æ", "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"}
    
    text = f"üìÑ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É #{payout_request.id}</b>\n\n"
    text += f"üí∞ –°—É–º–º–∞: {payout_request.amount:.2f} {currency_info['symbol']}\n"
    text += f"üí≥ –í–∞–ª—é—Ç–∞: {currency_info['name']}\n"
    text += f"üìÖ –°–æ–∑–¥–∞–Ω: {payout_request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"{status_emoji.get(payout_request.status, '‚ùì')} –°—Ç–∞—Ç—É—Å: {status_text.get(payout_request.status, payout_request.status)}\n"
    
    if payout_request.payment_details:
        text += f"\nüí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n<code>{payout_request.payment_details}</code>\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å updated_at
    if hasattr(payout_request, 'updated_at') and payout_request.updated_at and payout_request.updated_at != payout_request.created_at:
        text += f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω: {payout_request.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    if payout_request.admin_comment:
        text += f"\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {payout_request.admin_comment}\n"
    
    keyboard = get_payout_request_detail_keyboard(payout_request.id)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å
    if payout_request.status == "approved" and payout_request.receipt_file_id:
        text += f"\nüìÑ <b>–ß–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ:</b>"
        
        try:
            await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.bot.send_photo(
                call.from_user.id,
                payout_request.receipt_file_id,
                caption=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞: {e}")
            text += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞"
    
    # –ï—Å–ª–∏ —á–µ–∫–∞ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π")

@router.callback_query(F.data == "return_to_payout_list")
@booster_only
async def return_to_payout_list(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–ª–∞—Ç"""
    from app.keyboards.booster.payout_keyboards import get_payout_requests_list_keyboard, get_my_requests_keyboard
    from app.database.crud import get_user_payout_requests
    
    requests = await get_user_payout_requests(call.from_user.id)
    
    if not requests:
        text = "üìã <b>–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É.\n\n"
        text += "üí∏ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞."
        keyboard = get_my_requests_keyboard()
    else:
        total_requests = len(requests)
        text = f"üìã <b>–ú–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
        text += f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
        text += f"üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        keyboard = get_payout_requests_list_keyboard(requests, page=0)
    
    # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await call.message.delete()
        await call.message.bot.send_message(
            call.from_user.id,
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await call.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞")

@router.callback_query(F.data == "noop")
async def noop_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    await call.answer()

@router.callback_query(F.data == "show_balance")
@booster_only
async def handle_show_balance(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö –±–∞–ª–∞–Ω—Å—É'"""
    account = await crud.get_booster_account(call.from_user.id)
    if account:
        await show_balance_menu(call, account, edit=True)
    else:
        await call.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@router.callback_query(F.data == "back_to_balance")
@booster_only
async def handle_back_to_balance(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É'"""
    account = await crud.get_booster_account(call.from_user.id)
    if account:
        await show_balance_menu(call, account, edit=True)
    else:
        await call.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# === CONVERSION MENU HANDLERS ===

@router.callback_query(F.data == "booster_convert_menu")
@booster_only
async def show_convert_menu(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    await call.message.edit_text(
        "üí± <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>",
        parse_mode="HTML",
        reply_markup=booster_convert_menu_keyboard()
    )

@router.callback_query(F.data == "booster_cancel_convert_menu")
@booster_only
async def cancel_convert_menu(call: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞"""
    booster_account, user = await get_booster_data(call.from_user.id)
    
    if not booster_account or not user:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    await show_balance_menu(call, booster_account, edit=True)

# === CONVERSION PROCESS HANDLERS ===

@router.callback_query(F.data.startswith("booster_convert_to:"))
@booster_only
async def handle_convert_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    target_region = call.data.split(":")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ {target_region}")
    
    booster_account, _ = await get_booster_data(call.from_user.id)
    
    if not booster_account or booster_account.balance_usd <= 0:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç USD –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", show_alert=True)
        return
    
    currency_info = get_local_currency_info()
    currency_name = currency_info["region_names"].get(target_region, "–≤–∞–ª—é—Ç—É")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(convert_target_region=target_region)
    await state.set_state(BoosterStates.entering_convert_amount)
    
    text = f"üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ {currency_name}</b>\n\n"
    text += f"üíµ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{booster_account.balance_usd:.2f} USD</b>\n\n"
    text += f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ {currency_name}:"
    
    await call.message.edit_text(text, parse_mode="HTML")
    await call.answer()

@router.message(BoosterStates.entering_convert_amount)
@booster_only
async def process_convert_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Å—É–º–º—É: {message.text}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.5)")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    booster_account, _ = await get_booster_data(message.from_user.id)
    if not booster_account or amount > booster_account.balance_usd:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ USD –±–∞–ª–∞–Ω—Å–µ")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    data = await state.get_data()
    target_region = data.get("convert_target_region")
    currency_info = get_local_currency_info()
    currency_name = currency_info["region_names"].get(target_region)
    currency_code = currency_info["currency_codes"].get(target_region)
    
    try:
        from app.utils.currency_converter import convert_booster_balance
        
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {amount} USD -> {currency_code}")
        converted_amount = await convert_booster_balance(amount, "USD", currency_code)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {converted_amount} {currency_code}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            convert_amount_usd=amount,
            converted_amount=converted_amount,
            currency_code=currency_code
        )
        
        text = f"üí± <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏</b>\n\n"
        text += f"üíµ –°—É–º–º–∞ –∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: <b>{amount:.2f} USD</b>\n"
        text += f"üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: <b>{converted_amount:.2f} {currency_code}</b>\n\n"
        text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é?"
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=conversion_confirm_keyboard(target_region)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(F.data.startswith("booster_confirm_convert:"))
@booster_only 
async def confirm_conversion(call: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    required_fields = ["convert_target_region", "convert_amount_usd", "converted_amount", "currency_code"]
    
    if not all(data.get(field) for field in required_fields):
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", show_alert=True)
        await state.clear()
        return
    
    target_region = data["convert_target_region"]
    amount_usd = data["convert_amount_usd"]
    converted_amount = data["converted_amount"]
    currency_code = data["currency_code"]
    
    try:
        from app.database.crud import update_booster_balance_conversion
        
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –ë–î: {amount_usd} USD -> {converted_amount} {currency_code}")
        success = await update_booster_balance_conversion(
            call.from_user.id,
            amount_usd,
            converted_amount,
            target_region
        )
        
        if success:
            text = f"‚úÖ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
            text += f"üíµ –°–ø–∏—Å–∞–Ω–æ: {amount_usd:.2f} USD\n"
            text += f"üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {converted_amount:.2f} {currency_code}"
            
            await call.message.edit_text(text, parse_mode="HTML")
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}: {amount_usd} USD -> {converted_amount} {currency_code}")
        else:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", show_alert=True)
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", show_alert=True)
    
    await state.clear()

@router.callback_query(F.data == "booster_cancel_convert")
@booster_only
async def cancel_conversion(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    await state.clear()
    await call.message.edit_text(
        "‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=None
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")