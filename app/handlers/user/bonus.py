from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from app.database.crud import check_and_activate_promo, get_user_by_tg_id, delete_expired_promocodes
from app.utils.referral import get_referral_link, get_referrals_count
from app.database.models import BonusHistory
from app.database.db import AsyncSessionLocal
from sqlalchemy.future import select
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from app.states.user_states import PromoStates
import logging

router = Router()

BONUS_PAGE_SIZE = 10

logger = logging.getLogger(__name__)

async def get_bonuses_text_and_keyboard(user):
    referrals = await get_referrals_count(user.id)
    ref_link = get_referral_link(user)

    # –°—É–º–º–∏—Ä—É–µ–º –±–æ–Ω—É—Å—ã
    if user.region == "üá∞üá¨ –ö–†":
        bonus = user.bonus_kg
        currency = "—Å–æ–º"
    elif user.region == "üá∞üáø –ö–ó":
        bonus = user.bonus_kz
        currency = "—Ç–µ–Ω–≥–µ"
    elif user.region == "üá∑üá∫ –†–£":
        bonus = user.bonus_ru
        currency = "—Ä—É–±."
    else:
        bonus = 0
        currency = ""

    # –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5) –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(BonusHistory)
            .where(BonusHistory.user_id == user.id)
            .order_by(BonusHistory.created_at.desc())
            .limit(5)
        )
        history = result.scalars().all()

        result_all = await session.execute(
            select(BonusHistory)
            .where(BonusHistory.user_id == user.id, BonusHistory.source == "–†–µ—Ñ–µ—Ä–∞–ª")
        )
        all_ref_bonuses = result_all.scalars().all()
        total_ref_bonus = sum(b.amount for b in all_ref_bonuses)
        referrals_with_bonus = [b.comment for b in all_ref_bonuses if b.comment]
        referrals_with_topup = len(referrals_with_bonus)

    # –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤ (–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ)
    history_text = ""
    if history:
        history_text = "\n\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–æ–Ω—É—Å—ã:</b>"
        for h in history:
            comment = f" ‚Äî <i>{h.comment}</i>" if h.comment else ""
            history_text += f"\n<b>+{h.amount:.2f} {currency}</b> ({h.source}){comment}"

    # –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    if referrals:
        referrals_text = "\n\n<b>–í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:</b>"
        for r in referrals:
            reg_date = r.created_at.strftime('%d.%m.%Y')
            username = f"@{r.username}" if r.username else f"<code>{r.tg_id}</code>"
            referrals_text += f"\n‚Ä¢ {username} ({reg_date})"
    else:
        referrals_text = "\n\n<b>–í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:</b>\n‚Äî"

    text = (
        f"<b>üéÅ –ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>{bonus:.2f} {currency}</b>\n"
        f"–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_ref_bonus:.2f} {currency}</b>\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º: <b>{referrals_with_topup}</b>\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–æ –¥—Ä—É–∑–µ–π: <b>{len(referrals)}</b>\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>"
        f"\n\nüë• <i>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –∑–∞ –µ–≥–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!</i>"
        f"{referrals_text}"
        f"{history_text}"
    )

    share_text = (
        "üéÅ –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n"
        "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ Rich Boost –∏ –ø–æ–ª—É—á–∞–π –ø–æ–¥–∞—Ä–∫–∏!\n"
        f"üëâ {ref_link}"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", switch_inline_query=share_text)],
            [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤", callback_data="bonus_history:all:1")],
            [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate_promo")]
        ]
    )
    return text, keyboard

@router.message(F.text == "üéÅ –ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã")
async def bonuses_and_referrals(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –±–æ–Ω—É—Å–æ–≤ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
    user = await get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    text, keyboard = await get_bonuses_text_and_keyboard(user)
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "show_bonus_history")
async def show_bonus_history(call: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –æ—Ç–∫—Ä—ã–ª –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤")
    user = await get_user_by_tg_id(call.from_user.id)
    if not user:
        await call.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    try:
        await call.message.delete()
    except Exception:
        pass

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(BonusHistory)
            .where(BonusHistory.user_id == user.id)
            .order_by(BonusHistory.created_at.desc())
            .limit(30)
        )
        history = result.scalars().all()

    if not history:
        await call.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ–Ω—É—Å–æ–≤.")
        return

    text = "<b>–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤:</b>"
    for h in history:
        comment = f" ‚Äî <i>{h.comment}</i>" if h.comment else ""
        text += f"\n<b>+{h.amount:.2f}</b> ({h.source}){comment}"

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_bonuses")]
        ]
    )

    await call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data == "back_to_bonuses")
async def back_to_bonuses(call: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –±–æ–Ω—É—Å–æ–≤")
    try:
        await call.message.delete()
    except Exception:
        pass

    user = await get_user_by_tg_id(call.from_user.id)
    if not user:
        await call.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    text, keyboard = await get_bonuses_text_and_keyboard(user)
    await call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)

def filter_keyboard(current_filter, page, total_count):
    filters = [
        InlineKeyboardButton(
            text=("‚úÖ –í—Å–µ" if current_filter == "all" else "–í—Å–µ"),
            callback_data="bonus_history:all:1"
        ),
        InlineKeyboardButton(
            text=("‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—ã" if current_filter == "ref" else "–†–µ—Ñ–µ—Ä–∞–ª—ã"),
            callback_data="bonus_history:ref:1"
        ),
        InlineKeyboardButton(
            text=("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥—ã" if current_filter == "promo" else "–ü—Ä–æ–º–æ–∫–æ–¥—ã"),
            callback_data="bonus_history:promo:1"
        ),
    ]
    nav = []
    max_page = max(1, (total_count + BONUS_PAGE_SIZE - 1) // BONUS_PAGE_SIZE)
    if page > 1:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bonus_history:{current_filter}:{page-1}"))
    if page < max_page:
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"bonus_history:{current_filter}:{page+1}"))
    menu = [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é –±–æ–Ω—É—Å–æ–≤", callback_data="back_to_bonuses")]
    return InlineKeyboardMarkup(inline_keyboard=[filters, nav, menu])

@router.callback_query(F.data.startswith("bonus_history"))
async def bonus_history_paginated(call: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –ª–∏—Å—Ç–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –±–æ–Ω—É—Å–æ–≤: —Ñ–∏–ª—å—Ç—Ä {call.data}")
    user = await get_user_by_tg_id(call.from_user.id)
    if not user:
        await call.message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    # –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    parts = call.data.split(":")
    filter_type = parts[1] if len(parts) > 1 else "all"
    page = int(parts[2]) if len(parts) > 2 else 1

    filters = [BonusHistory.user_id == user.id]
    if filter_type == "ref":
        filters.append(BonusHistory.source == "–†–µ—Ñ–µ—Ä–∞–ª")
    elif filter_type == "promo":
        filters.append(BonusHistory.source == "–ü—Ä–æ–º–æ–∫–æ–¥")

    async with AsyncSessionLocal() as session:
        total_query = await session.execute(
            select(BonusHistory).where(*filters)
        )
        total = total_query.scalars().all()
        total_count = len(total)

        result = await session.execute(
            select(BonusHistory)
            .where(*filters)
            .order_by(BonusHistory.created_at.desc())
            .offset((page - 1) * BONUS_PAGE_SIZE)
            .limit(BONUS_PAGE_SIZE)
        )
        history = result.scalars().all()

    if not history:
        await call.message.edit_text("–ù–µ—Ç –±–æ–Ω—É—Å–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.", reply_markup=filter_keyboard(filter_type, page, total_count))
        return

    text = "<b>–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤:</b>"
    for h in history:
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –±–æ–Ω—É—Å–∞
        if h.source == "–†–µ—Ñ–µ—Ä–∞–ª":
            source = "üë§ <b>–†–µ—Ñ–µ—Ä–∞–ª</b>"
        elif h.source == "–ü—Ä–æ–º–æ–∫–æ–¥":
            source = "üéüÔ∏è <b>–ü—Ä–æ–º–æ–∫–æ–¥</b>"
        else:
            source = f"üè∑Ô∏è <b>{h.source}</b>"

        comment = f" ‚Äî <i>{h.comment}</i>" if h.comment else ""
        text += f"\n<b>+{h.amount:.2f}</b> {source}{comment}"

    keyboard = filter_keyboard(filter_type, page, total_count)
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await call.answer("–í—ã —É–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ!", show_alert=True)
        else:
            raise

@router.callback_query(F.data == "activate_promo")
async def activate_promo_start(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –Ω–∞—á–∞–ª –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")
    await state.set_state(PromoStates.waiting_for_promo_code)

@router.message(PromoStates.waiting_for_promo_code)
async def process_promo_code(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—ã—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: {message.text.strip()}")
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç—ë–∫—à–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
    await delete_expired_promocodes()

    code = message.text.strip().upper()
    user = await get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return

    ok, msg = await check_and_activate_promo(user.id, code)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {msg}")
    await message.answer(msg)
    await state.clear()