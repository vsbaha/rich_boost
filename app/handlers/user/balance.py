import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.database.crud import get_user_by_tg_id, create_payment_request, get_payment_requests_by_user, get_payment_request_by_id
from app.keyboards.user.balance import user_balance_keyboard
from aiogram.fsm.context import FSMContext
from app.utils.currency import get_currency, get_active_balance
from app.states.user_states import TopUpStates
from app.utils.payments import notify_admins_about_payment
from app.config import REGION_CURRENCIES
from app.utils.settings import SettingsManager

router = Router()
logger = logging.getLogger(__name__)

PAGE_SIZE = 5

def get_history_keyboard(requests, page, total_pages):
    buttons = [
        [
            InlineKeyboardButton(
                text=f"{'‚úÖ' if req.status == 'accepted' else '‚ùå' if req.status == 'rejected' else '‚è≥'} | "
                     f"{req.created_at.strftime('%d.%m.%Y %H:%M')} | "
                     f"{req.amount:.2f} {get_currency(req.region)}",
                callback_data=f"user_topup_info:{req.id}"
            )
            
        ] for req in requests
    ]
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_history_page:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"user_history_page:{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞", callback_data="user_balance_back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def user_balance(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –æ—Ç–∫—Ä—ã–ª —ç–∫—Ä–∞–Ω –ë–∞–ª–∞–Ω—Å")
    user = await get_user_by_tg_id(message.from_user.id)
    if not user:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    balance, bonus, currency = get_active_balance(user)
    text = (
        f"{user.region} –ö–æ—à–µ–ª—ë–∫\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency}\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {bonus:.2f} {currency}"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=user_balance_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} —É–≤–∏–¥–µ–ª —Å–≤–æ–π –±–∞–ª–∞–Ω—Å")

@router.callback_query(F.data == "user_topup")
async def start_topup(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –Ω–∞—á–∞–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    user = await get_user_by_tg_id(call.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    if user.region == "üá∞üá¨ –ö–†":
        min_amount = await SettingsManager.get_setting("MIN_TOPUP_KGS")
    elif user.region == "üá∞üáø –ö–ó":
        min_amount = await SettingsManager.get_setting("MIN_TOPUP_KZT")
    else:  # "üá∑üá∫ –†–£"
        min_amount = await SettingsManager.get_setting("MIN_TOPUP_RUB")
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_balance_back")]
        ]
    )
    await call.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–º–∏–Ω–∏–º—É–º {min_amount}):",
        reply_markup=keyboard
    )
    await state.set_state(TopUpStates.waiting_for_amount)
    await state.update_data(min_amount=min_amount, region=user.region)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω {user.region} –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

@router.message(TopUpStates.waiting_for_amount)
async def topup_amount(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_balance_back")]
        ]
    )
    data = await state.get_data()
    min_amount = data.get("min_amount", 0)
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!", reply_markup=keyboard)
        return
    if amount < min_amount:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –≤–≤—ë–ª —Å—É–º–º—É –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π")
        await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {min_amount}", reply_markup=keyboard)
        return
    await state.update_data(amount=amount)
    region = data.get("region")
    requisites = {
        "üá∞üá¨ –ö–†": "Kaspi/–≠–ª—Å–æ–º: +996 XXX XXX",
        "üá∞üáø –ö–ó": "Kaspi: +7 XXX XXX",
        "üá∑üá∫ –†–£": "QIWI: +7 XXX XXX",
    }.get(region, "–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
    await message.answer(
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n{requisites}\n\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ —Å—é–¥–∞.", reply_markup=keyboard
    )
    await state.set_state(TopUpStates.waiting_for_receipt)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –ø–æ–ª—É—á–∏–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

@router.message(TopUpStates.waiting_for_receipt)
async def topup_receipt(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫")
    data = await state.get_data()
    amount = data.get("amount")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_balance_back")]
        ]
    )
    if not message.photo:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ —á–µ–∫–∞")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ (—Ñ–æ—Ç–æ).", reply_markup=keyboard)
        return
    file_id = message.photo[-1].file_id
    user = await get_user_by_tg_id(message.from_user.id)
    payment_request = await create_payment_request(
        user_id=user.id,
        region=user.region,
        amount=amount,
        receipt_file_id=file_id
    )
    bot = message.bot
    await notify_admins_about_payment(bot, payment_request, user)
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await state.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–±–µ–∑ username'} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")

@router.callback_query(F.data == "user_history")
async def user_topup_history(call: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –æ—Ç–∫—Ä—ã–ª –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π")
    user = await get_user_by_tg_id(call.from_user.id)
    all_requests = [req for req in await get_payment_requests_by_user(user.id) if req.region == user.region]
    if not all_requests:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –Ω–µ –∏–º–µ–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_balance_back")]
            ]
        )
        await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ.", reply_markup=keyboard)
        await call.answer()
        return
    page = 1
    total_pages = (len(all_requests) + PAGE_SIZE - 1) // PAGE_SIZE
    requests = all_requests[(page-1)*PAGE_SIZE : page*PAGE_SIZE]
    text = "<b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"
    keyboard = get_history_keyboard(requests, page, total_pages)
    await call.message.delete()
    await call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π")
    await call.answer()

@router.callback_query(F.data.startswith("user_history_page:"))
async def user_topup_history_page(call: CallbackQuery):
    page = int(call.data.split(":")[1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏: {page}")
    user = await get_user_by_tg_id(call.from_user.id)
    all_requests = [req for req in await get_payment_requests_by_user(user.id) if req.region == user.region]
    total_pages = (len(all_requests) + PAGE_SIZE - 1) // PAGE_SIZE
    requests = all_requests[(page-1)*PAGE_SIZE : page*PAGE_SIZE]
    text = "<b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"
    keyboard = get_history_keyboard(requests, page, total_pages)
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {page}")
    await call.answer()

@router.callback_query(F.data.startswith("user_topup_info:"))
async def user_topup_info(call: CallbackQuery):
    request_id = int(call.data.split(":")[1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ID {request_id}")
    payment_request = await get_payment_request_by_id(request_id)
    if not payment_request:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'}: –∑–∞—è–≤–∫–∞ ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    status = "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ" if payment_request.status == "accepted" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ" if payment_request.status == "rejected" else "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
    currency = get_currency(payment_request.region)
    text = (
        f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n"
        f"ID: <code>{payment_request.id}</code>\n"
        f"–°—É–º–º–∞: {payment_request.amount:.2f} {currency}\n"
        f"–†–µ–≥–∏–æ–Ω: {payment_request.region}\n"
        f"–î–∞—Ç–∞: {payment_request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_history_back")]
        ]
    )
    if payment_request.receipt_file_id:
        await call.message.delete()
        await call.message.answer_photo(
            photo=payment_request.receipt_file_id,
            caption=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞—è–≤–∫—É ID {request_id} (—Å —Ñ–æ—Ç–æ)")
    else:
        await call.message.delete()
        await call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞—è–≤–∫—É ID {request_id} (–±–µ–∑ —Ñ–æ—Ç–æ)")
    await call.answer()

@router.callback_query(F.data == "user_history_back")
async def user_history_back(call: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π")
    user = await get_user_by_tg_id(call.from_user.id)
    all_requests = [req for req in await get_payment_requests_by_user(user.id) if req.region == user.region]
    if not all_requests:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –Ω–µ –∏–º–µ–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
        await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ.")
        await call.answer()
        return
    page = 1
    total_pages = (len(all_requests) + PAGE_SIZE - 1) // PAGE_SIZE
    requests = all_requests[(page-1)*PAGE_SIZE : page*PAGE_SIZE]
    text = "<b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"
    keyboard = get_history_keyboard(requests, page, total_pages)
    await call.message.delete()
    await call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π")
    await call.answer()

@router.callback_query(F.data == "user_balance_back")
async def user_balance_back(call: CallbackQuery, state: FSMContext):
    await state.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or '–±–µ–∑ username'} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞")
    user = await get_user_by_tg_id(call.from_user.id)
    balance, bonus, currency = get_active_balance(user)
    text = (
        f"{user.region} –ö–æ—à–µ–ª—ë–∫\n\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} {currency}\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {bonus:.2f} {currency}"
    )
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=user_balance_keyboard())
    await call.answer()
