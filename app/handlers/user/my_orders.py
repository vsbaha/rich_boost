from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.database.crud import get_user_by_tg_id, get_user_orders, get_orders_count, get_order_by_id
from app.config import PAGE_SIZE
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_my_orders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã")
    
    user = await get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    orders = await get_user_orders(user.id, limit=PAGE_SIZE)
    total_orders = await get_orders_count(user.id)
    
    if not orders:
        await message.answer(
            "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üéÆ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.",
            parse_mode="HTML"
        )
        return
    
    text = f"üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b> ({total_orders})\n\n"
    
    for order in orders:
        status_emoji = get_status_emoji(order.status)
        text += f"{status_emoji} <b>{order.order_id}</b>\n"
        text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üí∞ {order.total_cost:.0f} {order.currency}\n"
        text += f"üìä {get_status_name(order.status)}\n\n"
    
    keyboard = create_orders_keyboard(orders, page=0, total_orders=total_orders)
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data.startswith("order_detail:"))
async def show_order_detail(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    order_id = call.data.split(":")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –æ—Ç–∫—Ä—ã–ª –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {order_id}")
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user = await get_user_by_tg_id(call.from_user.id)
    if not user or order.user_id != user.id:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        return
    
    text = format_order_details(order)
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")]
        ]
    )
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data == "back_to_orders")
async def back_to_orders(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤")
    
    user = await get_user_by_tg_id(call.from_user.id)
    if not user:
        await call.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    orders = await get_user_orders(user.id, limit=PAGE_SIZE)
    total_orders = await get_orders_count(user.id)
    
    text = f"üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b> ({total_orders})\n\n"
    
    for order in orders:
        status_emoji = get_status_emoji(order.status)
        text += f"{status_emoji} <b>{order.order_id}</b>\n"
        text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üí∞ {order.total_cost:.0f} {order.currency}\n"
        text += f"üìä {get_status_name(order.status)}\n\n"
    
    keyboard = create_orders_keyboard(orders, page=0, total_orders=total_orders)
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data.startswith("orders_page:"))
async def orders_pagination(call: CallbackQuery):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤"""
    page = int(call.data.split(":")[1])
    
    user = await get_user_by_tg_id(call.from_user.id)
    if not user:
        await call.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    orders = await get_user_orders(user.id, limit=PAGE_SIZE, offset=page * PAGE_SIZE)
    total_orders = await get_orders_count(user.id)
    
    text = f"üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b> ({total_orders})\n\n"
    
    for order in orders:
        status_emoji = get_status_emoji(order.status)
        text += f"{status_emoji} <b>{order.order_id}</b>\n"
        text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üí∞ {order.total_cost:.0f} {order.currency}\n"
        text += f"üìä {get_status_name(order.status)}\n\n"
    
    keyboard = create_orders_keyboard(orders, page=page, total_orders=total_orders)
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await call.answer()

def get_status_emoji(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        "pending": "üü°",
        "confirmed": "üü¢",
        "in_progress": "üîµ",
        "completed": "‚úÖ",
        "cancelled": "‚ùå"
    }
    return status_emojis.get(status, "‚ùì")

def get_status_name(status: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    status_names = {
        "pending": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        "in_progress": "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
        "completed": "–í—ã–ø–æ–ª–Ω–µ–Ω",
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω"
    }
    return status_names.get(status, "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

def create_orders_keyboard(orders, page: int, total_orders: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    for order in orders:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üìã {order.order_id}",
                callback_data=f"order_detail:{order.order_id}"
            )
        ])
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"orders_page:{page-1}"))
    
    if (page + 1) * PAGE_SIZE < total_orders:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"orders_page:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_order_details(order):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    service_names = {
        "regular_boost": "–û–±—ã—á–Ω—ã–π –±—É—Å—Ç",
        "hero_boost": "–ë—É—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        "coaching": "–ì–∞–π–¥ / –æ–±—É—á–µ–Ω–∏–µ"
    }
    
    boost_names = {
        "account": "–ß–µ—Ä–µ–∑ –≤—Ö–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç",
        "shared": "–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –±—É—Å—Ç",
        "mmr": "–ë—É—Å—Ç –ú–ú–†",
        "winrate": "–ë—É—Å—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞"
    }
    
    text = f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ {order.order_id}</b>\n\n"
    
    text += f"üéÆ <b>–£—Å–ª—É–≥–∞:</b> {service_names.get(order.service_type)}\n"
    
    if order.boost_type:
        text += f"üîß <b>–¢–∏–ø:</b> {boost_names.get(order.boost_type)}\n"
    
    if order.current_rank:
        text += f"üìä <b>–¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:</b> {order.current_rank}"
        if order.current_mythic_stars is not None:
            text += f" ({order.current_mythic_stars} ‚≠ê)"
        text += "\n"
    
    if order.target_rank:
        text += f"üéØ <b>–ñ–µ–ª–∞–µ–º—ã–π —Ä–∞–Ω–≥:</b> {order.target_rank}"
        if order.target_mythic_stars is not None:
            text += f" ({order.target_mythic_stars} ‚≠ê)"
        text += "\n"
    
    if order.lane:
        text += f"üéÆ <b>–õ–∞–π–Ω:</b> {order.lane}\n"
    
    if order.heroes_mains:
        text += f"üéØ <b>–ú–µ–π–Ω—ã:</b> {order.heroes_mains}\n"
    
    if order.game_id:
        text += f"üÜî <b>–ò–≥—Ä–æ–≤–æ–π ID:</b> {order.game_id}\n"
    
    if order.preferred_time:
        text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {order.preferred_time}\n"
    
    if order.coaching_topic:
        text += f"üìö <b>–¢–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è:</b> {order.coaching_topic}\n"
    
    if order.coaching_hours:
        text += f"‚è±Ô∏è <b>–ß–∞—Å–æ–≤:</b> {order.coaching_hours}\n"
    
    if order.contact_info:
        text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {order.contact_info}\n"
    
    if order.details:
        text += f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {order.details}\n"
    
    text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order.total_cost:.0f} {order.currency}\n"
    text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {get_status_name(order.status)}\n"
    text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}"
    
    return text