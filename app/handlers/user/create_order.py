from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from app.states.user_states import OrderStates
from app.keyboards.user.order_keyboards import (
    service_catalog_keyboard, regular_boost_type_keyboard, hero_boost_type_keyboard,
    main_ranks_keyboard, rank_gradations_keyboard, target_main_ranks_keyboard, 
    target_rank_gradations_keyboard, lanes_keyboard, confirm_order_keyboard, cancel_keyboard,
    back_keyboard
)
from app.config import MAIN_RANKS, RANK_GRADATIONS, RANKS, COACHING_PRICES
from app.database.crud import get_user_by_tg_id, create_order
from app.utils.price_calculator import (
    calculate_regular_rank_cost, calculate_mythic_cost, calculate_total_order_cost
)
import logging
import uuid

router = Router()
logger = logging.getLogger(__name__)

async def delete_message_safe(message: Message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def delete_bot_message_safe(bot: Bot, chat_id: int, message_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

async def delete_previous_messages(state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    data = await state.get_data()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if data.get("last_bot_message_id"):
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å bot instance, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–ø—É—Å—Ç–∏–º
            pass
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if data.get("last_user_message"):
        try:
            await data["last_user_message"].delete()
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

@router.message(F.text == "üéÆ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order_creation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    
    user = await get_user_by_tg_id(message.from_user.id)
    if not user:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_id=user.id, region=user.region)
    
    sent_message = await message.answer(
        "üõí <b>–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
        parse_mode="HTML",
        reply_markup=service_catalog_keyboard()
    )
    
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(OrderStates.choosing_service)

@router.callback_query(F.data.startswith("service:"))
async def handle_service_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏"""
    service_type = call.data.split(":")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: {service_type}")
    
    await state.update_data(service_type=service_type)
    
    if service_type == "regular_boost":
        await call.message.edit_text(
            "üéÆ <b>–û–±—ã—á–Ω—ã–π –±—É—Å—Ç</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—É—Å—Ç–∞:",
            parse_mode="HTML",
            reply_markup=regular_boost_type_keyboard()
        )
        await state.set_state(OrderStates.choosing_boost_type)
        
    elif service_type == "hero_boost":
        await call.message.edit_text(
            "üéØ <b>–ë—É—Å—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—É—Å—Ç–∞:",
            parse_mode="HTML",
            reply_markup=hero_boost_type_keyboard()
        )
        await state.set_state(OrderStates.choosing_boost_type)
        
    elif service_type == "coaching":
        await call.message.edit_text(
            "üìö <b>–ì–∞–π–¥ / –æ–±—É—á–µ–Ω–∏–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è:",
            parse_mode="HTML",
            reply_markup=back_keyboard("back_to_catalog")
        )
        await state.set_state(OrderStates.entering_coaching_hours)
    
    await call.answer()

@router.callback_query(F.data.startswith("boost_type:"))
async def handle_boost_type_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—É—Å—Ç–∞"""
    boost_type = call.data.split(":")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –±—É—Å—Ç–∞: {boost_type}")
    
    await state.update_data(boost_type=boost_type)
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–Ω–≥
    await call.message.edit_text(
        "üìä <b>–í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:",
        parse_mode="HTML",
        reply_markup=main_ranks_keyboard()
    )
    await state.set_state(OrderStates.choosing_main_rank)
    await call.answer()

@router.callback_query(F.data.startswith("main_rank:"))
async def handle_main_rank_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞"""
    main_rank = call.data.split(":")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–Ω–≥: {main_rank}")
    
    await state.update_data(current_main_rank=main_rank)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ú–∏—Ñ–∏–∫, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∑–≤–µ–∑–¥
    if main_rank == "–ú–∏—Ñ–∏–∫":
        await state.update_data(current_rank="–ú–∏—Ñ–∏–∫")
        await call.message.edit_text(
            "‚≠ê <b>–ú–∏—Ñ–∏–∫ —Ä–∞–Ω–≥</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–≤–µ–∑–¥ (0-1000):",
            parse_mode="HTML",
            reply_markup=back_keyboard("back_to_main_ranks")
        )
        await state.set_state(OrderStates.entering_current_mythic)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞–¥–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–Ω–≥–æ–≤
        await call.message.edit_text(
            f"üìä <b>{main_rank}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞–Ω–≥:",
            parse_mode="HTML",
            reply_markup=rank_gradations_keyboard(main_rank)
        )
        await state.set_state(OrderStates.choosing_rank_gradation)
    
    await call.answer()

@router.callback_query(F.data.startswith("target_main_rank:"))
async def handle_target_main_rank_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞"""
    main_rank = call.data.split(":")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª —Ü–µ–ª–µ–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–Ω–≥: {main_rank}")
    
    await state.update_data(target_main_rank=main_rank)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ú–∏—Ñ–∏–∫, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∑–≤–µ–∑–¥
    if main_rank == "–ú–∏—Ñ–∏–∫":
        await state.update_data(target_rank="–ú–∏—Ñ–∏–∫")
        await call.message.edit_text(
            "‚≠ê <b>–ú–∏—Ñ–∏–∫ —Ä–∞–Ω–≥</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º—ã—Ö –∑–≤–µ–∑–¥ (0-1000):",
            parse_mode="HTML",
            reply_markup=back_keyboard("back_to_target_main_ranks")
        )
        await state.set_state(OrderStates.entering_target_mythic)
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        data = await state.get_data()
        current_rank = data.get("current_rank")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞–¥–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞
        await call.message.edit_text(
            f"üéØ <b>{main_rank}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–Ω–≥:",
            parse_mode="HTML",
            reply_markup=target_rank_gradations_keyboard(main_rank, current_rank)
        )
        await state.set_state(OrderStates.choosing_target_gradation)
    
    await call.answer()

@router.callback_query(F.data.startswith("rank:"))
async def handle_rank_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞"""
    rank = call.data.split(":")[1]
    current_state = await state.get_state()
    
    if current_state == OrderStates.choosing_rank_gradation:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: {rank}")
        
        await state.update_data(current_rank=rank)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞
        await call.message.edit_text(
            "üéØ <b>–í—ã–±–æ—Ä –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–∞–Ω–≥–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–Ω–≥:",
            parse_mode="HTML",
            reply_markup=target_main_ranks_keyboard(rank)
        )
        await state.set_state(OrderStates.choosing_target_main_rank)
    
    elif current_state == OrderStates.choosing_target_gradation:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–Ω–≥: {rank}")
        
        await state.update_data(target_rank=rank)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        await proceed_to_next_step(call, state)
    
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É —É—Å–ª—É–≥"""
    await call.message.edit_text(
        "üõí <b>–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
        parse_mode="HTML",
        reply_markup=service_catalog_keyboard()
    )
    await state.set_state(OrderStates.choosing_service)
    await call.answer()

@router.callback_query(F.data == "back_to_boost_type")
async def back_to_boost_type(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –±—É—Å—Ç–∞"""
    data = await state.get_data()
    service_type = data.get("service_type")
    
    if service_type == "regular_boost":
        await call.message.edit_text(
            "üéÆ <b>–û–±—ã—á–Ω—ã–π –±—É—Å—Ç</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—É—Å—Ç–∞:",
            parse_mode="HTML",
            reply_markup=regular_boost_type_keyboard()
        )
    elif service_type == "hero_boost":
        await call.message.edit_text(
            "üéØ <b>–ë—É—Å—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—É—Å—Ç–∞:",
            parse_mode="HTML",
            reply_markup=hero_boost_type_keyboard()
        )
    
    await state.set_state(OrderStates.choosing_boost_type)
    await call.answer()

@router.callback_query(F.data == "back_to_main_ranks")
async def back_to_main_ranks(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–Ω–≥–æ–≤"""
    await call.message.edit_text(
        "üìä <b>–í—ã–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:",
        parse_mode="HTML",
        reply_markup=main_ranks_keyboard()
    )
    await state.set_state(OrderStates.choosing_main_rank)
    await call.answer()

@router.callback_query(F.data == "back_to_current_rank")
async def back_to_current_rank(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞"""
    data = await state.get_data()
    main_rank = data.get("current_main_rank")
    
    if main_rank == "–ú–∏—Ñ–∏–∫":
        await call.message.edit_text(
            "‚≠ê <b>–ú–∏—Ñ–∏–∫ —Ä–∞–Ω–≥</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∑–≤–µ–∑–¥ (0-1000):",
            parse_mode="HTML",
            reply_markup=back_keyboard("back_to_main_ranks")
        )
        await state.set_state(OrderStates.entering_current_mythic)
    else:
        await call.message.edit_text(
            f"üìä <b>{main_rank}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞–Ω–≥:",
            parse_mode="HTML",
            reply_markup=rank_gradations_keyboard(main_rank)
        )
        await state.set_state(OrderStates.choosing_rank_gradation)
    
    await call.answer()

@router.callback_query(F.data == "back_to_target_main_ranks")
async def back_to_target_main_ranks(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö —Ä–∞–Ω–≥–æ–≤"""
    data = await state.get_data()
    current_rank = data.get("current_rank")
    
    await call.message.edit_text(
        "üéØ <b>–í—ã–±–æ—Ä –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–∞–Ω–≥–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–Ω–≥:",
        parse_mode="HTML",
        reply_markup=target_main_ranks_keyboard(current_rank)
    )
    await state.set_state(OrderStates.choosing_target_main_rank)
    await call.answer()

@router.callback_query(F.data == "back_to_target_rank")
async def back_to_target_rank(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–Ω–≥–∞"""
    data = await state.get_data()
    target_main_rank = data.get("target_main_rank")
    current_rank = data.get("current_rank")
    
    if target_main_rank == "–ú–∏—Ñ–∏–∫":
        await call.message.edit_text(
            "‚≠ê <b>–ú–∏—Ñ–∏–∫ —Ä–∞–Ω–≥</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞–µ–º—ã—Ö –∑–≤–µ–∑–¥ (0-1000):",
            parse_mode="HTML",
            reply_markup=back_keyboard("back_to_target_main_ranks")
        )
        await state.set_state(OrderStates.entering_target_mythic)
    else:
        await call.message.edit_text(
            f"üéØ <b>{target_main_rank}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–Ω–≥:",
            parse_mode="HTML",
            reply_markup=target_rank_gradations_keyboard(target_main_rank, current_rank)
        )
        await state.set_state(OrderStates.choosing_target_gradation)
    
    await call.answer()

@router.callback_query(F.data == "back_to_account_data")
async def back_to_account_data(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await call.message.edit_text(
        "üîê <b>–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–õ–æ–≥–∏–Ω: –≤–∞—à_–ª–æ–≥–∏–Ω\n"
        "–ü–∞—Ä–æ–ª—å: –≤–∞—à_–ø–∞—Ä–æ–ª—å</code>",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_target_rank")
    )
    await state.set_state(OrderStates.entering_account_data)
    await call.answer()

@router.callback_query(F.data == "back_to_game_id")
async def back_to_game_id(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–≥—Ä–æ–≤–æ–≥–æ ID"""
    await call.message.edit_text(
        "üéÆ <b>–ò–≥—Ä–æ–≤–æ–π ID</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º:",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_target_rank")
    )
    await state.set_state(OrderStates.entering_game_id)
    await call.answer()

@router.callback_query(F.data == "back_to_lane")
async def back_to_lane(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ª–∞–π–Ω–∞"""
    await call.message.edit_text(
        "üéÆ <b>–í—ã–±–æ—Ä –ª–∞–π–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ª–∞–π–Ω:",
        parse_mode="HTML",
        reply_markup=lanes_keyboard()
    )
    await state.set_state(OrderStates.choosing_lane)
    await call.answer()

@router.callback_query(F.data == "back_to_heroes")
async def back_to_heroes(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –º–µ–π–Ω–æ–≤"""
    await call.message.edit_text(
        "üéØ <b>–ú–µ–π–Ω—ã</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ (–º–µ–π–Ω–æ–≤):",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_lane")
    )
    await state.set_state(OrderStates.entering_heroes)
    await call.answer()

@router.callback_query(F.data == "back_to_preferred_time")
async def back_to_preferred_time(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    await call.message.edit_text(
        "‚è∞ <b>–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã:",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_heroes")
    )
    await state.set_state(OrderStates.entering_preferred_time)
    await call.answer()

@router.callback_query(F.data == "back_to_coaching_topic")
async def back_to_coaching_topic(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
    await call.message.edit_text(
        "üìö <b>–¢–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å? (–≥–µ—Ä–æ–π, —Ä–æ–ª—å, —Å–±–æ—Ä–∫–∞, —Ç–∞–∫—Ç–∏–∫–∞ –∏ —Ç.–¥.):",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_catalog")
    )
    await state.set_state(OrderStates.entering_coaching_topic)
    await call.answer()

@router.callback_query(F.data == "back_to_contact_info")
async def back_to_contact_info(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    await call.message.edit_text(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (Discord, Telegram –∏ —Ç.–¥.):",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_coaching_topic")
    )
    await state.set_state(OrderStates.entering_contact_info)
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
@router.message(OrderStates.entering_coaching_hours)
async def handle_coaching_hours(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    try:
        hours = int(message.text)
        if hours <= 0:
            sent_message = await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–±–æ–ª—å—à–µ 0).",
                reply_markup=back_keyboard("back_to_catalog")
            )
            await state.update_data(last_bot_message_id=sent_message.message_id)
            return
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤—ã–±—Ä–∞–ª {hours} —á–∞—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
        await state.update_data(coaching_hours=hours)
        
        sent_message = await message.answer(
            "üìö <b>–¢–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
            "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å? (–≥–µ—Ä–æ–π, —Ä–æ–ª—å, —Å–±–æ—Ä–∫–∞, —Ç–∞–∫—Ç–∏–∫–∞ –∏ —Ç.–¥.):",
            parse_mode="HTML",
            reply_markup=back_keyboard("back_to_catalog")
        )
        await state.update_data(last_bot_message_id=sent_message.message_id)
        await state.set_state(OrderStates.entering_coaching_topic)
        
    except ValueError:
        sent_message = await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=back_keyboard("back_to_catalog")
        )
        await state.update_data(last_bot_message_id=sent_message.message_id)

@router.message(OrderStates.entering_coaching_topic)
async def handle_coaching_topic(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª —Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è")
    
    await state.update_data(coaching_topic=message.text)
    
    sent_message = await message.answer(
        "üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (Discord, Telegram –∏ —Ç.–¥.):",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_coaching_topic")
    )
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(OrderStates.entering_contact_info)

@router.message(OrderStates.entering_contact_info)
async def handle_contact_info(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    
    await state.update_data(contact_info=message.text)
    
    sent_message = await message.answer(
        "üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_contact_info")
    )
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(OrderStates.entering_details)

@router.message(OrderStates.entering_current_mythic)
async def handle_current_mythic_stars(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—É—â–∏—Ö –∑–≤–µ–∑–¥ Mythic"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    try:
        stars = int(message.text)
        if stars < 0 or stars > 1000:
            sent_message = await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (0-1000).",
                reply_markup=back_keyboard("back_to_main_ranks")
            )
            await state.update_data(last_bot_message_id=sent_message.message_id)
            return
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª —Ç–µ–∫—É—â–∏–µ Mythic –∑–≤–µ–∑–¥—ã: {stars}")
        await state.update_data(current_mythic_stars=stars)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞
        data = await state.get_data()
        current_rank = data.get("current_rank")
        
        sent_message = await message.answer(
            "üéØ <b>–í—ã–±–æ—Ä –∂–µ–ª–∞–µ–º–æ–≥–æ —Ä–∞–Ω–≥–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–Ω–≥:",
            parse_mode="HTML",
            reply_markup=target_main_ranks_keyboard(current_rank)
        )
        await state.update_data(last_bot_message_id=sent_message.message_id)
        await state.set_state(OrderStates.choosing_target_main_rank)
        
    except ValueError:
        sent_message = await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=back_keyboard("back_to_main_ranks")
        )
        await state.update_data(last_bot_message_id=sent_message.message_id)

@router.message(OrderStates.entering_target_mythic)
async def handle_target_mythic_stars(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∂–µ–ª–∞–µ–º—ã—Ö –∑–≤–µ–∑–¥ Mythic"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    try:
        stars = int(message.text)
        if stars < 0 or stars > 1000:
            sent_message = await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (0-1000).",
                reply_markup=back_keyboard("back_to_target_main_ranks")
            )
            await state.update_data(last_bot_message_id=sent_message.message_id)
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–≤–µ–∑–¥ Mythic
        data = await state.get_data()
        current_stars = data.get("current_mythic_stars", 0)
        
        if stars <= current_stars:
            sent_message = await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                f"–ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ ({stars}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ ({current_stars}).\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:",
                parse_mode="HTML",
                reply_markup=back_keyboard("back_to_target_main_ranks")
            )
            await state.update_data(last_bot_message_id=sent_message.message_id)
            return
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª –∂–µ–ª–∞–µ–º—ã–µ Mythic –∑–≤–µ–∑–¥—ã: {stars}")
        await state.update_data(target_mythic_stars=stars)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        await proceed_to_next_step(message, state)
        
    except ValueError:
        sent_message = await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=back_keyboard("back_to_target_main_ranks")
        )
        await state.update_data(last_bot_message_id=sent_message.message_id)

@router.message(OrderStates.entering_account_data)
async def handle_account_data(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    await state.update_data(account_data=message.text)
    
    sent_message = await message.answer(
        "üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_account_data")
    )
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(OrderStates.entering_details)

@router.message(OrderStates.entering_game_id)
async def handle_game_id(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–≥—Ä–æ–≤–æ–≥–æ ID"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª –∏–≥—Ä–æ–≤–æ–π ID: {message.text}")
    
    await state.update_data(game_id=message.text)
    
    sent_message = await message.answer(
        "üéÆ <b>–í—ã–±–æ—Ä –ª–∞–π–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ª–∞–π–Ω:",
        parse_mode="HTML",
        reply_markup=lanes_keyboard()
    )
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(OrderStates.choosing_lane)

@router.callback_query(F.data.startswith("lane:"))
async def handle_lane_selection(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∞–π–Ω–∞"""
    lane = call.data.split(":")[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª –ª–∞–π–Ω: {lane}")
    
    await state.update_data(lane=lane)
    
    await call.message.edit_text(
        "üéØ <b>–ú–µ–π–Ω—ã</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ (–º–µ–π–Ω–æ–≤):",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_game_id")
    )
    await state.set_state(OrderStates.entering_heroes)
    await call.answer()

@router.message(OrderStates.entering_heroes)
async def handle_heroes(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ–π–Ω–æ–≤"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª –º–µ–π–Ω–æ–≤: {message.text}")
    
    await state.update_data(heroes_mains=message.text)
    
    sent_message = await message.answer(
        "‚è∞ <b>–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã:",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_heroes")
    )
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(OrderStates.entering_preferred_time)

@router.message(OrderStates.entering_preferred_time)
async def handle_preferred_time(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è")
    
    await state.update_data(preferred_time=message.text)
    
    sent_message = await message.answer(
        "üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):",
        parse_mode="HTML",
        reply_markup=back_keyboard("back_to_preferred_time")
    )
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(OrderStates.entering_details)

@router.message(OrderStates.entering_details)
async def handle_details(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π"""
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    data = await state.get_data()
    if data.get("last_bot_message_id"):
        await delete_bot_message_safe(bot, message.chat.id, data["last_bot_message_id"])
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –≤–≤–µ–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏")
    
    details = message.text if message.text.lower() != "–Ω–µ—Ç" else None
    await state.update_data(details=details)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
    await show_order_summary(message, state)

# –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º proceed_to_next_step
async def proceed_to_next_step(message_or_call, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–Ω–≥–æ–≤"""
    data = await state.get_data()
    boost_type = data.get("boost_type")
    
    if boost_type in ["account", "mmr", "winrate"]:
        # –ù—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        text = (
            "üîê <b>–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–õ–æ–≥–∏–Ω: –≤–∞—à_–ª–æ–≥–∏–Ω\n"
            "–ü–∞—Ä–æ–ª—å: –≤–∞—à_–ø–∞—Ä–æ–ª—å</code>"
        )
        keyboard = back_keyboard("back_to_target_rank")
        
        if hasattr(message_or_call, 'message'):
            await message_or_call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
            if data.get("last_bot_message_id"):
                try:
                    await message_or_call.bot.delete_message(
                        chat_id=message_or_call.chat.id, 
                        message_id=data["last_bot_message_id"]
                    )
                except:
                    pass
                    
            sent_message = await message_or_call.answer(text, parse_mode="HTML", reply_markup=keyboard)
            await state.update_data(last_bot_message_id=sent_message.message_id)
        await state.set_state(OrderStates.entering_account_data)
        
    elif boost_type == "shared":
        # –ù—É–∂–µ–Ω –∏–≥—Ä–æ–≤–æ–π ID
        text = (
            "üéÆ <b>–ò–≥—Ä–æ–≤–æ–π ID</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π ID –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º:"
        )
        keyboard = back_keyboard("back_to_target_rank")
        
        if hasattr(message_or_call, 'message'):
            await message_or_call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        else:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
            if data.get("last_bot_message_id"):
                try:
                    await message_or_call.bot.delete_message(
                        chat_id=message_or_call.chat.id, 
                        message_id=data["last_bot_message_id"]
                    )
                except:
                    pass
                    
            sent_message = await message_or_call.answer(text, parse_mode="HTML", reply_markup=keyboard)
            await state.update_data(last_bot_message_id=sent_message.message_id)
        await state.set_state(OrderStates.entering_game_id)

async def show_order_summary(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    base_cost = await calculate_order_cost(data)
    total_cost, currency = calculate_total_order_cost(base_cost, data.get("boost_type"), data.get("region"))
    
    await state.update_data(base_cost=base_cost, total_cost=total_cost, currency=currency)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    summary_text = await format_order_summary(data, total_cost, currency)
    
    sent_message = await message.answer(
        summary_text,
        parse_mode="HTML",
        reply_markup=confirm_order_keyboard()
    )
    await state.update_data(last_bot_message_id=sent_message.message_id)
    await state.set_state(OrderStates.confirming_order)

async def calculate_order_cost(data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞"""
    service_type = data.get("service_type")
    region = data.get("region")
    
    if service_type == "coaching":
        # –î–ª—è –æ–±—É—á–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –ø–æ —á–∞—Å–∞–º
        hours = data.get("coaching_hours", 1)
        return hours * COACHING_PRICES[region]
    
    elif service_type in ["regular_boost", "hero_boost"]:
        current_rank = data.get("current_rank")
        target_rank = data.get("target_rank")
        
        # –ï—Å–ª–∏ –æ–±–∞ —Ä–∞–Ω–≥–∞ –ú–∏—Ñ–∏–∫, —Å—á–∏—Ç–∞–µ–º –ø–æ –∑–≤–µ–∑–¥–∞–º
        if current_rank == "–ú–∏—Ñ–∏–∫" and target_rank == "–ú–∏—Ñ–∏–∫":
            current_stars = data.get("current_mythic_stars", 0)
            target_stars = data.get("target_mythic_stars", 0)
            return calculate_mythic_cost(current_stars, target_stars, region)
        
        # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ä–∞–Ω–≥ –ú–∏—Ñ–∏–∫, –∞ —Ç–µ–∫—É—â–∏–π –Ω–µ—Ç
        elif target_rank == "–ú–∏—Ñ–∏–∫" and current_rank != "–ú–∏—Ñ–∏–∫":
            # –°—á–∏—Ç–∞–µ–º –¥–æ –ú–∏—Ñ–∏–∫ + –∑–≤–µ–∑–¥—ã
            rank_cost = calculate_regular_rank_cost(current_rank, "–ú–∏—Ñ–∏–∫", region)
            target_stars = data.get("target_mythic_stars", 0)
            mythic_cost = calculate_mythic_cost(0, target_stars, region)
            return rank_cost + mythic_cost
        
        # –û–±—ã—á–Ω—ã–π –±—É—Å—Ç —Ä–∞–Ω–≥–æ–≤
        else:
            return calculate_regular_rank_cost(current_rank, target_rank, region)
    
    return 0

async def format_order_summary(data, total_cost, currency):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    service_names = {
        "regular_boost": "–û–±—ã—á–Ω—ã–π –±—É—Å—Ç",
        "hero_boost": "–ë—É—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        "coaching": "–ì–∞–π–¥ / –æ–±—É—á–µ–Ω–∏–µ"
    }
    
    boost_names = {
        "account": "–ß–µ—Ä–µ–∑ –≤—Ö–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç",
        "shared": "–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –±—É—Å—Ç",
        "mmr": "–ë—É—Å—Ç –ú–ú–†",
        "winrate": "–ë—É—Å—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞"
    }
    
    text = f"üìã <b>–í–∞—à –∑–∞–∫–∞–∑</b>\n\n"
    text += f"üéÆ <b>–£—Å–ª—É–≥–∞:</b> {service_names.get(data.get('service_type'))}\n"
    
    if data.get("boost_type"):
        text += f"üîß <b>–¢–∏–ø:</b> {boost_names.get(data.get('boost_type'))}\n"
    
    if data.get("current_rank"):
        text += f"üìä <b>–¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:</b> {data.get('current_rank')}"
        if data.get("current_mythic_stars") is not None:
            text += f" ({data.get('current_mythic_stars')} ‚≠ê)"
        text += "\n"
    
    if data.get("target_rank"):
        text += f"üéØ <b>–ñ–µ–ª–∞–µ–º—ã–π —Ä–∞–Ω–≥:</b> {data.get('target_rank')}"
        if data.get("target_mythic_stars") is not None:
            text += f" ({data.get('target_mythic_stars')} ‚≠ê)"
        text += "\n"
    
    if data.get("lane"):
        text += f"üéÆ <b>–õ–∞–π–Ω:</b> {data.get('lane')}\n"
    
    if data.get("heroes_mains"):
        text += f"üéØ <b>–ú–µ–π–Ω—ã:</b> {data.get('heroes_mains')}\n"
    
    if data.get("preferred_time"):
        text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {data.get('preferred_time')}\n"
    
    if data.get("coaching_topic"):
        text += f"üìö <b>–¢–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è:</b> {data.get('coaching_topic')}\n"
    
    if data.get("coaching_hours"):
        text += f"‚è±Ô∏è <b>–ß–∞—Å–æ–≤:</b> {data.get('coaching_hours')}\n"
    
    if data.get("contact_info"):
        text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {data.get('contact_info')}\n"
    
    if data.get("details"):
        text += f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {data.get('details')}\n"
    
    text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost:.0f} {currency}"
    
    return text

@router.callback_query(F.data == "confirm_order")
async def confirm_order(call: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑")
    
    data = await state.get_data()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    order_data = {
        "user_id": data.get("user_id"),
        "service_type": data.get("service_type"),
        "boost_type": data.get("boost_type"),
        "region": data.get("region"),
        "current_rank": data.get("current_rank"),
        "target_rank": data.get("target_rank"),
        "current_mythic_stars": data.get("current_mythic_stars"),
        "target_mythic_stars": data.get("target_mythic_stars"),
        "lane": data.get("lane"),
        "heroes_mains": data.get("heroes_mains"),
        "game_id": data.get("game_id"),
        "contact_info": data.get("contact_info"),
        "base_cost": data.get("base_cost"),
        "total_cost": data.get("total_cost"),
        "currency": data.get("currency"),
        "details": data.get("details"),
        "preferred_time": data.get("preferred_time"),
        "coaching_topic": data.get("coaching_topic"),
        "coaching_hours": data.get("coaching_hours")
    }
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    if data.get("account_data"):
        account_data = data.get("account_data")
        lines = account_data.split('\n')
        for line in lines:
            if '–ª–æ–≥–∏–Ω:' in line.lower():
                order_data["game_login"] = line.split(':', 1)[1].strip()
            elif '–ø–∞—Ä–æ–ª—å:' in line.lower():
                order_data["game_password"] = line.split(':', 1)[1].strip()
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É
        order = await create_order(order_data)
        
        await call.message.edit_text(
            f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>{order.order_id}</code>\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order.total_cost:.0f} {order.currency}\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n\n"
            f"üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª",
            parse_mode="HTML"
        )
        
        logger.info(f"–ó–∞–∫–∞–∑ {order.order_id} —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{call.from_user.username}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await call.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
    
    await state.clear()
    await call.answer("–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == "cancel_order")
async def cancel_order(call: CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    
    await state.clear()
    
    await call.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )
    
    await call.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")

@router.message(F.text.in_(["‚ùå –û—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∞"]))
async def cancel_order_text(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–µ–∫—Å—Ç–æ–º")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await delete_message_safe(message)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if not current_state or not current_state.startswith("OrderStates"):
        await message.answer(
            "‚ÑπÔ∏è –í—ã –Ω–µ —Å–æ–∑–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",
            parse_mode="HTML"
        )
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await message.answer(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML"
    )