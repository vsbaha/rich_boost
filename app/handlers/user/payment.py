from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from app.states.user_states import OrderStates
from app.keyboards.user.payment_keyboards import (
    payment_method_keyboard, payment_confirmation_keyboard, 
    bonus_amount_keyboard, discount_info_keyboard
)
from app.keyboards.user.order_keyboards import confirm_order_keyboard
from app.database.crud import (
    get_user_by_id, get_user_active_discount, apply_user_discount,
    get_user_bonus_balance, use_user_bonus
)
import logging

router = Router()
logger = logging.getLogger(__name__)


def get_currency_from_region(region: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–ª—é—Ç—É –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    if "üá∞üá¨" in region or region == "KG":
        return "—Å–æ–º"
    elif "üá∞üáø" in region or region == "KZ":
        return "—Ç–µ–Ω–≥–µ"
    elif "üá∑üá∫" in region or region == "RU":
        return "—Ä—É–±."
    else:
        return "—Å–æ–º"


def get_user_balance_by_region(user, region: str) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    if "üá∞üá¨" in region or region == "KG":
        return float(user.balance_kg or 0)
    elif "üá∞üáø" in region or region == "KZ":
        return float(user.balance_kz or 0)
    elif "üá∑üá∫" in region or region == "RU":
        return float(user.balance_ru or 0)
    else:
        return float(user.balance_kg or 0)


@router.callback_query(F.data == "choose_payment_method")
async def choose_payment_method(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")
    
    data = await state.get_data()
    user_id = data.get("user_id")
    region = data.get("region")
    base_cost = data.get("total_cost", 0)
    
    if not user_id or not region or base_cost <= 0:
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user_by_id(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É
    currency = get_currency_from_region(region)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–∫–∏–¥–∫—É
    discount_percent = await get_user_active_discount(user_id)
    has_discount = discount_percent > 0
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
    final_cost = base_cost
    if has_discount:
        final_cost = base_cost * (1 - discount_percent / 100)
        await state.update_data(
            discount_percent=discount_percent,
            discounted_cost=final_cost
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
    user_balance = get_user_balance_by_region(user, region)
    bonus_balance = await get_user_bonus_balance(user_id, currency)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ
    await state.update_data(
        final_cost=final_cost,
        original_cost=base_cost,
        currency=currency,
        user_balance=user_balance,
        bonus_balance=bonus_balance,
        has_discount=has_discount
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üí≥ <b>–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n"
    text += f"üõí <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:</b> {base_cost:.0f} {currency}\n"
    
    if has_discount:
        text += f"üéÅ <b>–°–∫–∏–¥–∫–∞:</b> {discount_percent}% (-{base_cost - final_cost:.0f} {currency})\n"
        text += f"üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {final_cost:.0f} {currency}\n\n"
    else:
        text += f"üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {final_cost:.0f} {currency}\n\n"
    
    text += f"üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance:.0f} {currency}\n"
    text += f"üéÅ <b>–ë–æ–Ω—É—Å—ã:</b> {bonus_balance:.0f} {currency}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=payment_method_keyboard(
            final_cost, user_balance, bonus_balance, currency, has_discount
        )
    )
    
    await state.set_state(OrderStates.payment_selection)
    await call.answer()


@router.callback_query(F.data == "pay_full_balance")
async def pay_full_balance(call: CallbackQuery, state: FSMContext):
    """–û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –±–∞–ª–∞–Ω—Å–∞"""
    await show_payment_confirmation(call, state, "balance", "üí≥ —Å –±–∞–ª–∞–Ω—Å–∞")


@router.callback_query(F.data == "pay_full_bonus")
async def pay_full_bonus(call: CallbackQuery, state: FSMContext):
    """–û–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–æ–Ω—É—Å–∞–º–∏"""
    await show_payment_confirmation(call, state, "bonus", "üéÅ –±–æ–Ω—É—Å–∞–º–∏")


@router.callback_query(F.data == "pay_mixed")
async def pay_mixed(call: CallbackQuery, state: FSMContext):
    """–°–º–µ—à–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (–≤—Å–µ –±–æ–Ω—É—Å—ã + –¥–æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞)"""
    data = await state.get_data()
    bonus_balance = data.get("bonus_balance", 0)
    final_cost = data.get("final_cost", 0)
    remaining = final_cost - bonus_balance
    currency = data.get("currency", "—Å–æ–º")
    
    await state.update_data(
        payment_method="mixed",
        bonus_amount=bonus_balance,
        balance_amount=remaining
    )
    
    await show_payment_confirmation(
        call, state, "mixed", 
        f"üé≠ —Å–º–µ—à–∞–Ω–Ω–æ ({bonus_balance:.0f} {currency} –±–æ–Ω—É—Å–∞–º–∏ + {remaining:.0f} {currency} —Å –±–∞–ª–∞–Ω—Å–∞)"
    )


@router.callback_query(F.data == "pay_partial_bonus")
async def pay_partial_bonus(call: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    bonus_balance = data.get("bonus_balance", 0)
    final_cost = data.get("final_cost", 0)
    currency = data.get("currency", "—Å–æ–º")
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å–æ–≤ –Ω–µ –±–æ–ª—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    max_bonus = min(bonus_balance, final_cost)
    
    text = f"üí∞ <b>–ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏</b>\n\n"
    text += f"üéÅ <b>–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {bonus_balance:.0f} {currency}\n"
    text += f"üí≥ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {final_cost:.0f} {currency}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"
    
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=bonus_amount_keyboard(max_bonus, currency)
    )
    
    await state.set_state(OrderStates.bonus_amount_input)
    await call.answer()


@router.callback_query(F.data.startswith("bonus_amount:"))
async def select_bonus_amount(call: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤"""
    bonus_amount = float(call.data.split(":")[1])
    await process_bonus_amount(call, state, bonus_amount)


@router.callback_query(F.data == "custom_bonus_amount")
async def custom_bonus_amount_input(call: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤"""
    data = await state.get_data()
    bonus_balance = data.get("bonus_balance", 0)
    final_cost = data.get("final_cost", 0)
    currency = data.get("currency", "—Å–æ–º")
    
    max_bonus = min(bonus_balance, final_cost)
    
    await call.message.edit_text(
        f"‚úèÔ∏è <b>–í–≤–æ–¥ —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤</b>\n\n"
        f"üéÅ <b>–î–æ—Å—Ç—É–ø–Ω–æ –±–æ–Ω—É—Å–æ–≤:</b> {bonus_balance:.0f} {currency}\n"
        f"üí≥ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {final_cost:.0f} {currency}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ (–º–∞–∫—Å–∏–º—É–º {max_bonus:.0f} {currency}):",
        parse_mode="HTML"
    )
    
    await call.answer()


@router.message(OrderStates.bonus_amount_input)
async def process_custom_bonus_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤"""
    try:
        bonus_amount = float(message.text.replace(",", "."))
        
        if bonus_amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        data = await state.get_data()
        bonus_balance = data.get("bonus_balance", 0)
        final_cost = data.get("final_cost", 0)
        max_bonus = min(bonus_balance, final_cost)
        
        if bonus_amount > max_bonus:
            currency = data.get("currency", "—Å–æ–º")
            await message.answer(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç!\n"
                f"–ú–∞–∫—Å–∏–º—É–º: {max_bonus:.0f} {currency}"
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π CallbackQuery –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from types import SimpleNamespace
        fake_call = SimpleNamespace()
        fake_call.message = message
        fake_call.answer = lambda text="", show_alert=False: None
        
        await process_bonus_amount(fake_call, state, bonus_amount)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


async def process_bonus_amount(call, state: FSMContext, bonus_amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—É–º–º—ã –±–æ–Ω—É—Å–æ–≤"""
    data = await state.get_data()
    final_cost = data.get("final_cost", 0)
    user_balance = data.get("user_balance", 0)
    currency = data.get("currency", "—Å–æ–º")
    
    remaining_cost = final_cost - bonus_amount
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –¥–æ–ø–ª–∞—Ç—ã
    if remaining_cost > user_balance:
        text = f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        text += f"üéÅ <b>–ë–æ–Ω—É—Å—ã:</b> {bonus_amount:.0f} {currency}\n"
        text += f"üí≥ <b>–î–æ–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞:</b> {remaining_cost:.0f} {currency}\n"
        text += f"üí∞ <b>–ù–∞ –±–∞–ª–∞–Ω—Å–µ:</b> {user_balance:.0f} {currency}\n"
        text += f"‚ùó <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> {remaining_cost - user_balance:.0f} {currency}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É –±–æ–Ω—É—Å–æ–≤ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å."
        
        await call.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=bonus_amount_keyboard(
                min(data.get("bonus_balance", 0), final_cost), currency
            )
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ
    await state.update_data(
        payment_method="partial_bonus",
        bonus_amount=bonus_amount,
        balance_amount=remaining_cost
    )
    
    if remaining_cost > 0:
        payment_desc = f"üé≠ —á–∞—Å—Ç–∏—á–Ω–æ ({bonus_amount:.0f} {currency} –±–æ–Ω—É—Å–∞–º–∏ + {remaining_cost:.0f} {currency} —Å –±–∞–ª–∞–Ω—Å–∞)"
    else:
        payment_desc = f"üéÅ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–æ–Ω—É—Å–∞–º–∏ ({bonus_amount:.0f} {currency})"
    
    await show_payment_confirmation(call, state, "partial_bonus", payment_desc)


async def show_payment_confirmation(call, state: FSMContext, method: str, method_description: str):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    final_cost = data.get("final_cost", 0)
    currency = data.get("currency", "—Å–æ–º")
    has_discount = data.get("has_discount", False)
    discount_percent = data.get("discount_percent", 0)
    original_cost = data.get("original_cost", final_cost)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
    
    if has_discount:
        text += f"üõí <b>–ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {original_cost:.0f} {currency}\n"
        text += f"üéÅ <b>–°–∫–∏–¥–∫–∞:</b> {discount_percent}% (-{original_cost - final_cost:.0f} {currency})\n"
        text += f"üí∞ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {final_cost:.0f} {currency}\n\n"
    else:
        text += f"üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> {final_cost:.0f} {currency}\n\n"
    
    text += f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> {method_description}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    if method in ["partial_bonus", "mixed"]:
        bonus_amount = data.get("bonus_amount", 0)
        balance_amount = data.get("balance_amount", 0)
        text += f"üîπ –ë–æ–Ω—É—Å–∞–º–∏: {bonus_amount:.0f} {currency}\n"
        text += f"üîπ –° –±–∞–ª–∞–Ω—Å–∞: {balance_amount:.0f} {currency}\n\n"
    
    text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:"
    
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=payment_confirmation_keyboard(method)
    )
    
    await call.answer()


@router.callback_query(F.data == "discount_info")
async def show_discount_info(call: CallbackQuery, state: FSMContext):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∫–∏–¥–∫–µ"""
    data = await state.get_data()
    discount_percent = data.get("discount_percent", 0)
    original_cost = data.get("original_cost", 0)
    final_cost = data.get("final_cost", 0)
    currency = data.get("currency", "—Å–æ–º")
    
    text = f"üéÅ <b>–í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞</b>\n\n"
    text += f"üìä <b>–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏:</b> {discount_percent}%\n"
    text += f"üí∞ <b>–≠–∫–æ–Ω–æ–º–∏—è:</b> {original_cost - final_cost:.0f} {currency}\n\n"
    text += "–°–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n"
    text += "–ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∞ —Å–≥–æ—Ä–∏—Ç."
    
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=discount_info_keyboard()
    )
    
    await call.answer()


@router.callback_query(F.data == "change_payment_method")
async def change_payment_method(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    await choose_payment_method(call, state)


@router.callback_query(F.data == "back_to_payment_methods")
async def back_to_payment_methods(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã"""
    await choose_payment_method(call, state)


@router.callback_query(F.data == "back_to_order_confirm")
async def back_to_order_confirm(call: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ —Å–∫–∏–¥–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    original_cost = data.get("total_cost", 0)
    currency = data.get("currency", "—Å–æ–º")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    from app.handlers.user.create_order import show_order_confirmation
    await show_order_confirmation(call, state)
    
    await call.answer()
