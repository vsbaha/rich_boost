import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.database.crud import get_user_by_tg_id, update_user_region
from app.keyboards.user.profile import user_profile_keyboard
from app.utils.currency import get_active_balance
from app.states.user_states import RegionStates
from datetime import datetime, timedelta, timezone
from app.utils.referral import get_referral_link
from app.database.models import User
from sqlalchemy.future import select
from app.database.db import AsyncSessionLocal
from app.utils.referral import get_referrals_count

router = Router()
logger = logging.getLogger(__name__)



async def get_profile_text(user, balance, bonus, currency):
    reg_date = user.created_at
    if reg_date is not None and reg_date.tzinfo is None:
        reg_date = reg_date.replace(tzinfo=timezone.utc)
    if user.region == "üá∞üá¨ –ö–†":
        reg_date = reg_date + timedelta(hours=6)
    elif user.region == "üá∞üáø –ö–ó":
        reg_date = reg_date + timedelta(hours=5)
    elif user.region == "üá∑üá∫ –†–£":
        reg_date = reg_date + timedelta(hours=3)

    ref_link = get_referral_link(user)
    referrals = await get_referrals_count(user.id)
    return (
        f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"ID: <code>{user.tg_id}</code>\n"
        f"Username: @{user.username or '‚Äî'}\n"
        f"–†–µ–≥–∏–æ–Ω: {user.region or '‚Äî'}\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} {currency}\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {bonus:.2f} {currency}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date.strftime('%d.%m.%Y %H:%M') if reg_date else '‚Äî'}"
        f"\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {len(referrals)}"
        f"\nüîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {ref_link}"
    )


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å")
    user = await get_user_by_tg_id(message.from_user.id)
    if not user:
        logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏." )
        return
    balance, bonus, currency = get_active_balance(user)
    text = await get_profile_text(user, balance, bonus, currency)
    await message.answer(text, parse_mode="HTML", reply_markup=user_profile_keyboard())

@router.callback_query(F.data == "user_change_region")
async def user_change_region(call: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–º–µ–Ω—É —Ä–µ–≥–∏–æ–Ω–∞")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üá∞üá¨ –ö–†", callback_data="set_region:üá∞üá¨ –ö–†")],
            [InlineKeyboardButton(text="üá∑üá∫ –†–£", callback_data="set_region:üá∑üá∫ –†–£")],
            [InlineKeyboardButton(text="üá∞üáø –ö–ó", callback_data="set_region:üá∞üáø –ö–ó")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="profile_cancel")]
        ]
    )
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:", reply_markup=keyboard)
    await state.set_state(RegionStates.waiting_for_region)
    await call.answer()


@router.callback_query(F.data.startswith("set_region:"))
async def set_user_region(call: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω (–±–∞–ª–∞–Ω—Å—ã –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è, —É –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç)."""
    new_region = call.data.split(":", 1)[1]
    user = await get_user_by_tg_id(call.from_user.id)
    old_region = user.region
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏–æ–Ω —Å {old_region} –Ω–∞ {new_region}")
    if old_region == new_region:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –≤—ã–±—Ä–∞–ª —Ç–æ—Ç –∂–µ —Ä–µ–≥–∏–æ–Ω: {new_region}")
        await call.answer("–≠—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_region(user.tg_id, new_region)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user_by_tg_id(call.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –±–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    balance, bonus, currency = get_active_balance(user)
    text = await get_profile_text(user, balance, bonus, currency)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª —Ä–µ–≥–∏–æ–Ω –Ω–∞ {new_region}.")
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=user_profile_keyboard())
    await state.clear()
    await call.answer("–†–µ–≥–∏–æ–Ω –∏–∑–º–µ–Ω—ë–Ω!")

@router.callback_query(F.data == "profile_cancel")
async def profile_cancel(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–º–µ–Ω—ã —Ä–µ–≥–∏–æ–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Å–º–µ–Ω—É —Ä–µ–≥–∏–æ–Ω–∞")
    user = await get_user_by_tg_id(call.from_user.id)
    balance, bonus, currency = get_active_balance(user)
    text = await get_profile_text(user, balance, bonus, currency)
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=user_profile_keyboard())
    await state.clear()
    await call.answer()