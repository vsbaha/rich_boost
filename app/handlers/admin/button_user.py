import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from app.keyboards.admin.admin_menu import admin_menu_keyboard
from app.keyboards.admin.users_pagination import (
    users_pagination_keyboard,
    users_search_keyboard,
    user_profile_keyboard)
from app.utils.roles import admin_only
from app.database.crud import (
    get_users_page,
    count_users,
    count_users_by_role,
    search_users,
    get_user_by_tg_id,
    update_user_balance,
    update_user_bonus_balance,
    update_user_role,
    create_booster_account,
    set_booster_status
)
from app.database.session import get_session
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.states.admin_states import AdminStates
from app.utils.currency import get_active_balance
from app.utils.user import format_user_profile
router = Router()
logger = logging.getLogger(__name__)

# --- –§–£–ù–ö–¶–ò–û–ù–ê–õ –î–õ–Ø –ö–ù–û–ü–ö–ò: –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ---
USERS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ



# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@router.message(Command("admin"))
@admin_only
async def admin_panel(message: Message):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_menu_keyboard())

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@admin_only
async def admin_users(message: Message):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    page = 1
    total_users = await count_users()
    total_clients = await count_users_by_role("user")
    total_boosters = await count_users_by_role("booster")
    total_pages = max(1, (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE)
    users = await get_users_page(offset=0, limit=USERS_PER_PAGE)
    text = (
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç–æ–≤:</b> {total_clients}\n"
        f"<b>–ë—É—Å—Ç–µ—Ä–æ–≤:</b> {total_boosters}\n\n"
        f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"
    )
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=users_pagination_keyboard(users, page, total_pages)
    )

@router.callback_query(F.data.startswith("users_page:"))
@admin_only
async def users_page_callback(call: CallbackQuery):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –ª–∏—Å—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {call.data}")
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    page = int(call.data.split(":")[1])
    total_users = await count_users()
    total_pages = max(1, (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE)
    offset = (page - 1) * USERS_PER_PAGE
    users = await get_users_page(offset=offset, limit=USERS_PER_PAGE)
    total_clients = await count_users_by_role("user")
    total_boosters = await count_users_by_role("booster")
    text = (
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç–æ–≤:</b> {total_clients}\n"
        f"<b>–ë—É—Å—Ç–µ—Ä–æ–≤:</b> {total_boosters}\n\n"
        f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"
    )
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=users_pagination_keyboard(users, page, total_pages)
    )
    await call.answer()

@router.callback_query(F.data == "users_search")
@admin_only
async def users_search_start(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    """–ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AdminStates.waiting_for_query)
    await call.answer()

@router.message(AdminStates.waiting_for_query)
@admin_only
async def users_search_process(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}")
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = message.text.strip().lstrip("@")
    users = await search_users(query)
    if not users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_page:1")]
            ]
        )
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
    else:
        await message.answer(
            "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>",
            parse_mode="HTML",
            reply_markup=users_search_keyboard(users)
        )
    await state.clear()

    
@router.callback_query(F.data.startswith("user_info:"))
@admin_only
async def user_info_from_list(call: CallbackQuery):
    parts = call.data.split(":")
    tg_id = int(parts[1])
    request_id = parts[2] if len(parts) > 2 else None
    user = await get_user_by_tg_id(tg_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await call.message.delete()
    if request_id:
        from app.keyboards.admin.payments import back_to_payment_keyboard
        await call.message.answer(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=back_to_payment_keyboard(request_id, user)
        )
    else:
        from app.keyboards.admin.users_pagination import user_profile_keyboard
        await call.message.answer(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=user_profile_keyboard(user)
        )
    await call.answer()

@router.callback_query(F.data.startswith("user_ban:"))
@admin_only
async def user_ban_callback(call: CallbackQuery):
    parts = call.data.split(":")
    tg_id = int(parts[1])
    request_id = parts[2] if len(parts) > 2 else None
    user = await get_user_by_tg_id(tg_id)
    if user.role == "admin":
        await call.answer("–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    if user.role == "banned":
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.", show_alert=True)
        return
    await update_user_role(tg_id, "banned")
    user = await get_user_by_tg_id(tg_id)
    if request_id:
        from app.keyboards.admin.payments import back_to_payment_keyboard
        await call.message.edit_text(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=back_to_payment_keyboard(request_id, user)
        )
    else:
        from app.keyboards.admin.users_pagination import user_profile_keyboard
        await call.message.edit_text(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=user_profile_keyboard(user)
        )
    await call.answer()

@router.callback_query(F.data.startswith("user_unban:"))
@admin_only
async def user_unban_callback(call: CallbackQuery):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.data}")
    parts = call.data.split(":")
    tg_id = int(parts[1])
    request_id = parts[2] if len(parts) > 2 else None
    user = await get_user_by_tg_id(tg_id)
    if user.role != "banned":
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.", show_alert=True)
        return
    await update_user_role(tg_id, "user")
    user = await get_user_by_tg_id(tg_id)  # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if request_id:
        from app.keyboards.admin.payments import back_to_payment_keyboard
        await call.message.edit_text(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=back_to_payment_keyboard(request_id, user)
        )
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    else:
        from app.keyboards.admin.users_pagination import user_profile_keyboard
        await call.message.edit_text(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=user_profile_keyboard(user)
        )
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω.")

@router.callback_query(F.data.startswith("user_balance:"))
@admin_only
async def user_balance_callback(call: CallbackQuery, state: FSMContext):
    parts = call.data.split(":")
    tg_id = int(parts[1])
    request_id = parts[2] if len(parts) > 2 else None
    await state.update_data(balance_tg_id=tg_id, request_id=request_id)
    await call.message.delete()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_info:{tg_id}:{request_id}" if request_id else f"user_info:{tg_id}")]
        ]
    )
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:",
        reply_markup=keyboard
    )
    await state.set_state(AdminStates.waiting_for_balance)
    await call.answer()

@router.message(AdminStates.waiting_for_balance)
@admin_only
async def set_user_balance(message: Message, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("balance_tg_id")
    request_id = data.get("request_id")
    try:
        new_balance = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    await update_user_balance(tg_id, new_balance)
    user = await get_user_by_tg_id(tg_id)
    if request_id:
        from app.keyboards.admin.payments import back_to_payment_keyboard
        await message.answer(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=back_to_payment_keyboard(request_id, user)
        )
    else:
        from app.keyboards.admin.users_pagination import user_profile_keyboard
        await message.answer(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=user_profile_keyboard(user)
        )
    await state.clear()

@router.callback_query(F.data.startswith("user_bonus:"))
@admin_only
async def user_bonus_callback(call: CallbackQuery, state: FSMContext):
    parts = call.data.split(":")
    tg_id = int(parts[1])
    request_id = parts[2] if len(parts) > 2 else None
    await state.update_data(bonus_tg_id=tg_id, request_id=request_id)
    await call.message.delete()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_info:{tg_id}:{request_id}" if request_id else f"user_info:{tg_id}")]
        ]
    )
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:",
        reply_markup=keyboard
    )
    await state.set_state(AdminStates.waiting_for_bonus)
    await call.answer()

@router.message(AdminStates.waiting_for_bonus)
@admin_only
async def set_user_bonus_balance(message: Message, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("bonus_tg_id")
    request_id = data.get("request_id")
    try:
        new_bonus = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    await update_user_bonus_balance(tg_id, new_bonus)
    user = await get_user_by_tg_id(tg_id)
    if request_id:
        from app.keyboards.admin.payments import back_to_payment_keyboard
        await message.answer(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=back_to_payment_keyboard(request_id, user)
        )
    else:
        from app.keyboards.admin.users_pagination import user_profile_keyboard
        await message.answer(
            format_user_profile(user),
            parse_mode="HTML",
            reply_markup=user_profile_keyboard(user)
        )
    await state.clear()

@router.callback_query(F.data.startswith("user_info:"))
@admin_only
async def back_to_profile_from_balance(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.data}")
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞."""
    tg_id = int(call.data.split(":")[1])
    user = await get_user_by_tg_id(tg_id)
    await state.clear()
    await call.message.edit_text(
        format_user_profile(user),
        parse_mode="HTML",
        reply_markup=user_profile_keyboard(user)
    )
    await call.answer()

@router.callback_query(F.data == "users_broadcast")
@admin_only
async def users_broadcast_start(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
    await state.set_state(AdminStates.waiting_for_broadcast)
    await call.answer()

@router.message(AdminStates.waiting_for_broadcast)
@admin_only
async def users_broadcast_process(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º: {message.text or '[—Ñ–æ—Ç–æ]'}")
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞."""
    users = await get_users_page(offset=0, limit=1000000)
    total = len(users)
    delivered = 0
    failed = 0

    # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    is_photo = message.photo and len(message.photo) > 0
    text = message.caption if is_photo else message.text

    for idx, user in enumerate(users, start=1):
        if user.tg_id == message.from_user.id:
            continue
        try:
            if is_photo:
                await message.bot.send_photo(
                    user.tg_id,
                    photo=message.photo[-1].file_id,
                    caption=text
                )
            else:
                await message.bot.send_message(user.tg_id, text)
            delivered += 1
        except Exception:
            failed += 1

        if idx % 5 == 0 or idx == total:
            try:
                await progress_msg.edit_text(
                    f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∏–¥—ë—Ç...\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {delivered}\n"
                    f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
                    f"–í—Å–µ–≥–æ: {total}"
                )
            except Exception:
                pass

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_page:1")]
        ]
    )
    await progress_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered}\n"
        f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}",
        reply_markup=keyboard
    )
    await state.clear()

@router.callback_query(F.data == "boosters_broadcast")
@admin_only
async def boosters_broadcast_start(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É –±—É—Å—Ç–µ—Ä–∞–º")
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—É—Å—Ç–µ—Ä–∞–º."""
    await call.message.delete()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
        ]
    )
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –±—É—Å—Ç–µ—Ä–∞–º:", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_boosters_broadcast)
    await call.answer()

@router.message(AdminStates.waiting_for_boosters_broadcast)
@admin_only
async def boosters_broadcast_process(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –±—É—Å—Ç–µ—Ä–∞–º: {message.text or '[—Ñ–æ—Ç–æ]'}")
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –±—É—Å—Ç–µ—Ä–∞–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É—Å—Ç–µ—Ä–æ–≤
    boosters = await search_users("booster")  # –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±—É—Å—Ç–µ—Ä–æ–≤
    total = len(boosters)
    delivered = 0
    failed = 0

    progress_msg = await message.answer(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –±—É—Å—Ç–µ—Ä–∞–º –Ω–∞—á–∞–ª–∞—Å—å...\n–í—Å–µ–≥–æ –±—É—Å—Ç–µ—Ä–æ–≤: {total}")

    is_photo = message.photo and len(message.photo) > 0
    text = message.caption if is_photo else message.text

    for idx, user in enumerate(boosters, start=1):
        if user.tg_id == message.from_user.id:
            continue
        try:
            if is_photo:
                await message.bot.send_photo(
                    user.tg_id,
                    photo=message.photo[-1].file_id,
                    caption=text
                )
            else:
                await message.bot.send_message(user.tg_id, text)
            delivered += 1
        except Exception:
            failed += 1

        if idx % 5 == 0 or idx == total:
            try:
                await progress_msg.edit_text(
                    f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∏–¥—ë—Ç...\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {delivered}\n"
                    f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
                    f"–í—Å–µ–≥–æ: {total}"
                )
            except Exception:
                pass

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_page:1")]
        ]
    )
    await progress_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –±—É—Å—Ç–µ—Ä–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {delivered}\n"
        f"–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}\n"
        f"–í—Å–µ–≥–æ –±—É—Å—Ç–µ—Ä–æ–≤: {total}",
        reply_markup=keyboard
    )
    await state.clear()


# --- –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@router.callback_query(F.data == "cancel_broadcast")
@admin_only
async def cancel_broadcast(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    await state.clear()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_page:1")]
        ]
    )
    await call.message.edit_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=keyboard
    )
    await call.answer()

@router.callback_query(F.data.startswith("user_set_booster:"))
@admin_only
async def user_set_booster_callback(call: CallbackQuery):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É—Å—Ç–µ—Ä–æ–º."""
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –±—É—Å—Ç–µ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.data}")
    tg_id = int(call.data.split(":")[1])
    await update_user_role(tg_id, "booster")
    user = await get_user_by_tg_id(tg_id)
    async with get_session() as session:
        await create_booster_account(user.id, user.username, session)
        await set_booster_status(user.id, "active", session)
    await call.message.edit_text(
        format_user_profile(user),
        parse_mode="HTML",
        reply_markup=user_profile_keyboard(user)
    )
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –±—É—Å—Ç–µ—Ä–æ–º.")

@router.callback_query(F.data.startswith("user_unset_booster:"))
@admin_only
async def user_unset_booster_callback(call: CallbackQuery):
    """–°–Ω—è—Ç—å —Ä–æ–ª—å –±—É—Å—Ç–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} —Å–Ω–∏–º–∞–µ—Ç —Ä–æ–ª—å –±—É—Å—Ç–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.data}")
    tg_id = int(call.data.split(":")[1])
    await update_user_role(tg_id, "user")
    user = await get_user_by_tg_id(tg_id)
    async with get_session() as session:
        await set_booster_status(user.id, "inactive", session)
    await call.message.edit_text(
        format_user_profile(user),
        parse_mode="HTML",
        reply_markup=user_profile_keyboard(user)
    )
    await call.answer("–†–æ–ª—å –±—É—Å—Ç–µ—Ä–∞ —Å–Ω—è—Ç–∞.")