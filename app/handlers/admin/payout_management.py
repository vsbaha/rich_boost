from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from app.utils.roles import admin_only
from app.states.admin_states import AdminStates
import logging

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "admin_payout_requests")
@admin_only
async def show_payout_requests(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É"""
    from app.database.crud import get_payout_requests
    from app.keyboards.admin.payout_keyboards import get_admin_payout_list_keyboard
    
    pending_requests = await get_payout_requests(status="pending", limit=10)
    
    if not pending_requests:
        from datetime import datetime
        current_time = datetime.now().strftime('%H:%M:%S')
        text = f"üìã <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</b>\n\n"
        text += f"–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É.\n\n"
        text += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
        
        try:
            await call.message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=get_admin_payout_list_keyboard([])
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.answer(
                text,
                parse_mode="HTML",
                reply_markup=get_admin_payout_list_keyboard([])
            )
        return
        
    from datetime import datetime
    current_time = datetime.now().strftime('%H:%M:%S')
    text = f"üìã <b>–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ({len(pending_requests)})</b>\n\n"
    
    for req in pending_requests:
        from app.utils.currency import get_currency_info
        from app.database.crud import get_booster_account_by_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–µ—Ä–µ
        booster_account = await get_booster_account_by_id(req.booster_account_id)
        currency_info = get_currency_info(req.currency)
        
        text += f"üî∏ –ó–∞–ø—Ä–æ—Å #{req.id}\n"
        if booster_account:
            text += f"üë§ @{booster_account.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üí∞ {req.amount:.2f} {currency_info['symbol']}\n"
        text += f"üìÖ {req.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    text += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
    
    try:
        await call.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=get_admin_payout_list_keyboard(pending_requests)
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=get_admin_payout_list_keyboard(pending_requests)
        )

@router.callback_query(F.data.startswith("admin_payout_view_"))
@admin_only
async def view_payout_request(call: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É"""
    from app.database.crud import get_payout_request_by_id, get_booster_account_by_id
    from app.keyboards.admin.payout_keyboards import get_admin_payout_detail_keyboard
    from app.utils.currency import get_currency_info
    
    request_id = int(call.data.split("_")[3])
    payout_request = await get_payout_request_by_id(request_id)
    
    if not payout_request:
        await call.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–µ—Ä–µ
    booster_account = await get_booster_account_by_id(payout_request.booster_account_id)
    currency_info = get_currency_info(payout_request.currency)
    
    text = f"üìÑ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É #{payout_request.id}</b>\n\n"
    
    if booster_account:
        text += f"üë§ –ë—É—Å—Ç–µ—Ä: @{booster_account.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        text += f"üí∞ –°—É–º–º–∞: {payout_request.amount:.2f} {currency_info['symbol']}\n"
        text += f"üí≥ –í–∞–ª—é—Ç–∞: {currency_info['name']}\n"
        text += f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {payout_request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"‚è≥ –°—Ç–∞—Ç—É—Å: {payout_request.status}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if payout_request.payment_details:
            text += f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</b>\n<code>{payout_request.payment_details}</code>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –±—É—Å—Ç–µ—Ä–∞
        current_balance = getattr(booster_account, f"balance_{payout_request.currency}")
        text += f"üíº –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} {currency_info['symbol']}\n\n"
        
        if payout_request.admin_comment:
            text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∞: {payout_request.admin_comment}\n\n"
            
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    else:
        text += "‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –±—É—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=get_admin_payout_detail_keyboard(payout_request.id, payout_request.status)
    )

@router.callback_query(F.data.startswith("admin_approve_payout_"))
@admin_only
async def approve_payout_request(call: CallbackQuery, state: FSMContext):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É - —Ç—Ä–µ–±—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–∞"""
    from app.states.admin_states import AdminStates
    
    request_id = int(call.data.split("_")[3])
    
    await call.message.edit_text(
        f"üìÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã #{request_id}</b>\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.uploading_payout_receipt)
    await state.update_data(approve_request_id=request_id)

@router.message(AdminStates.uploading_payout_receipt)
@admin_only
async def process_receipt_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞ –≤—ã–ø–ª–∞—Ç—ã"""
    from app.database.crud import approve_payout_request, get_payout_request_by_id, get_user_by_id
    from aiogram import Bot
    from app.config import BOT_TOKEN
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
    if not message.photo:
        await message.answer(
            "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    data = await state.get_data()
    request_id = data['approve_request_id']
    
    # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
    receipt_file_id = message.photo[-1].file_id
    
    # –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —á–µ–∫–æ–º
    payout_request = await approve_payout_request(request_id, receipt_file_id)
    
    if payout_request:
        await message.answer(
            f"‚úÖ <b>–ó–∞–ø—Ä–æ—Å #{request_id} –æ–¥–æ–±—Ä–µ–Ω</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {payout_request.amount} {payout_request.currency.upper()}\n"
            f"üìÑ –ß–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±—É—Å—Ç–µ—Ä—É",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É—Å—Ç–µ—Ä—É
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—É—Å—Ç–µ—Ä–∞
            from app.database.crud import get_booster_account_by_id
            booster_account = await get_booster_account_by_id(payout_request.booster_account_id)
            
            if booster_account:
                user = await get_user_by_id(booster_account.user_id)
                if user:
                    bot = Bot(token=BOT_TOKEN)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —á–µ–∫–æ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    notification_text = (
                        f"‚úÖ <b>–í—ã–ø–ª–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n\n"
                        f"üìã –ó–∞–ø—Ä–æ—Å: #{payout_request.id}\n"
                        f"üí∞ –°—É–º–º–∞: {payout_request.amount} {payout_request.currency.upper()}\n"
                        f"üìÖ –î–∞—Ç–∞: {payout_request.updated_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"ÔøΩ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å
                    await bot.send_photo(
                        user.tg_id,
                        receipt_file_id,
                        caption=notification_text,
                        parse_mode="HTML"
                    )
                    
                    await bot.session.close()
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±—É—Å—Ç–µ—Ä—É {user.tg_id}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É—Å—Ç–µ—Ä—É: {e}")
        
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ–¥–æ–±—Ä–∏–ª –∑–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã #{request_id} —Å —á–µ–∫–æ–º")
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await message.answer(
            "‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
            "–ë—É—Å—Ç–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —á–µ–∫–æ–º."
        )
        
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
        await state.clear()

@router.callback_query(F.data.startswith("admin_reject_payout_"))
@admin_only  
async def reject_payout_request(call: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É"""
    from app.states.admin_states import AdminStates
    
    request_id = int(call.data.split("_")[3])
    
    await call.message.edit_text(
        f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ #{request_id}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:",
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.entering_reject_comment)
    await state.update_data(reject_request_id=request_id)

@router.message(AdminStates.entering_reject_comment)
@admin_only
async def process_reject_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"""
    from app.database.crud import update_payout_status
    
    data = await state.get_data()
    request_id = data['reject_request_id']
    comment = message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    success = await update_payout_status(request_id, "rejected", message.from_user.id, comment)
    
    if success:
        await message.answer(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {comment}"
        )
        
        # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É—Å—Ç–µ—Ä—É
        
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –≤—ã–ø–ª–∞—Ç—ã #{request_id}: {comment}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
        
    await state.clear()

@router.callback_query(F.data == "admin_payout_history")
@admin_only
async def show_payout_history(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–ª–∞—Ç"""
    from app.database.crud import get_payout_requests
    from app.keyboards.admin.payout_keyboards import get_admin_payout_history_keyboard
    from datetime import datetime
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    processed_requests = await get_payout_requests(status=None, limit=20)
    processed_requests = [req for req in processed_requests if req.status != "pending"]
    
    current_time = datetime.now().strftime('%H:%M:%S')
    
    if not processed_requests:
        text = f"üìö <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç</b>\n\n"
        text += f"–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.\n\n"
        text += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
    else:
        text = f"üìö <b>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç ({len(processed_requests)})</b>\n\n"
        
        for req in processed_requests:
            from app.utils.currency import get_currency_info
            from app.database.crud import get_booster_account_by_id
            
            booster_account = await get_booster_account_by_id(req.booster_account_id)
            currency_info = get_currency_info(req.currency)
            
            status_emoji = {"approved": "‚úÖ", "rejected": "‚ùå"}
            
            text += f"{status_emoji.get(req.status, '‚ùì')} –ó–∞–ø—Ä–æ—Å #{req.id}\n"
            if booster_account:
                text += f"üë§ @{booster_account.username or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            text += f"üí∞ {req.amount:.2f} {currency_info['symbol']}\n"
            text += f"üìÖ {req.processed_at.strftime('%d.%m.%Y %H:%M') if req.processed_at else '–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω'}\n"
            
            if req.admin_comment:
                text += f"üí¨ {req.admin_comment}\n"
            text += "\n"
        
        text += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"

    try:
        await call.message.edit_text(
            text,
            parse_mode="HTML", 
            reply_markup=get_admin_payout_history_keyboard()
        )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.answer(
            text,
            parse_mode="HTML", 
            reply_markup=get_admin_payout_history_keyboard()
        )

@router.callback_query(F.data == "admin_menu")
@admin_only
async def back_to_admin_menu(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    from app.keyboards.admin.admin_menu import admin_menu_keyboard
    
    await call.message.answer(
        "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=admin_menu_keyboard()
    )
    await call.answer()