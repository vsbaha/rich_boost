from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from app.utils.roles import admin_only
from app.states.admin_states import AdminStates
from app.database.crud import (
    get_order_by_id, get_all_orders, update_order_status, assign_booster_to_order,
    get_active_boosters, get_user_by_id, update_user_balance_by_region,
    search_orders, count_orders_by_status, get_boosters, update_booster_balance
)
from app.keyboards.admin.order_management import (
    admin_order_details_keyboard, admin_boosters_list_keyboard, 
    admin_orders_list_keyboard, confirm_action_keyboard
)
import logging
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

def get_currency_for_order(order, user=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–ª—é—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞, –æ–ø—Ä–µ–¥–µ–ª—è—è –µ—ë –ø–æ —Ä–µ–≥–∏–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    currency = order.currency
    if not currency or currency == "None" or currency is None:
        if user and user.region:
            region_currencies = {
                "üá∞üá¨ –ö–†": "—Å–æ–º",
                "üá∞üáø –ö–ó": "—Ç–µ–Ω–≥–µ", 
                "üá∑üá∫ –†–£": "—Ä—É–±."
            }
            currency = region_currencies.get(user.region, "–≤–∞–ª—é—Ç–∞")
        else:
            currency = "–≤–∞–ª—é—Ç–∞"
    return currency

def get_currency_for_order(order, user=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–∞–ª—é—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞, –æ–ø—Ä–µ–¥–µ–ª—è—è –µ—ë –ø–æ —Ä–µ–≥–∏–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    currency = order.currency
    if not currency or currency == "None" or currency is None:
        if user and user.region:
            region_currencies = {
                "üá∞üá¨ –ö–†": "—Å–æ–º",
                "üá∞üáø –ö–ó": "—Ç–µ–Ω–≥–µ", 
                "üá∑üá∫ –†–£": "—Ä—É–±."
            }
            currency = region_currencies.get(user.region, "–≤–∞–ª—é—Ç–∞")
        else:
            currency = "–≤–∞–ª—é—Ç–∞"
    return currency

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò "üì¶ –í–°–ï –ó–ê–ö–ê–ó–´" ===

@router.message(F.text == "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")
@admin_only
async def show_all_orders_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã' –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤")
    await show_orders_list(message, status_filter="all", page=0)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–û–ó–í–†–ê–¢–ê –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===

@router.callback_query(F.data == "admin_main_menu")
@admin_only
async def admin_main_menu_callback(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    from app.keyboards.admin.admin_menu import admin_menu_keyboard
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await call.message.delete()
    await call.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_menu_keyboard())

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–ü–ò–°–ö–ê –ó–ê–ö–ê–ó–û–í ===

@router.callback_query(F.data == "admin_orders_list")
@admin_only
async def admin_orders_list_callback(call: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
    await show_orders_list(call, status_filter="all", page=0, edit_message=True)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ù–û–í–´–• –ó–ê–ö–ê–ó–ê–• ===

# –£–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ - —Ç–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±—É—Å—Ç–µ—Ä–∞

@router.callback_query(F.data.startswith("admin_reject_order:"))
@admin_only
async def admin_reject_order(call: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    order_id = call.data.split(":")[1]
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ {order_id}")
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    if order.status != "pending":
        await call.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
    user = await get_user_by_id(order.user_id)
    currency = get_currency_for_order(order, user)
    
    await call.message.edit_text(
        f"‚ùå <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id}</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?\n"
        f"–ö–ª–∏–µ–Ω—Ç—É –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{order.total_cost:.0f} {currency}</b>",
        parse_mode="HTML",
        reply_markup=confirm_action_keyboard("reject", order_id)
    )
    await call.answer()

@router.callback_query(F.data.startswith("admin_confirm_reject:"))
@admin_only
async def admin_confirm_reject_order(call: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
    await update_order_status(order_id, "cancelled")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user_by_id(order.user_id)
    if user:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∑–∞–∫–∞–∑–∞
        if "üá∞üá¨" in order.region or order.region == "KG":
            balance_field = "balance_kg"
        elif "üá∞üáø" in order.region or order.region == "KZ":
            balance_field = "balance_kz"
        elif "üá∑üá∫" in order.region or order.region == "RU":
            balance_field = "balance_ru"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä—É–±–ª—è—Ö
            balance_field = "balance_ru"
        
        await update_user_balance_by_region(user.id, balance_field, order.total_cost)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    user = await get_user_by_id(order.user_id)
    currency = get_currency_for_order(order, user)
    
    await call.message.edit_text(
        f"‚ùå <b>–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
        f"–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞: <b>{order.total_cost:.0f} {currency}</b>\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóÇÔ∏è –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders_list")]
        ])
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            user.tg_id,
            f"‚ùå <b>–í–∞—à –∑–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
            f"–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å: <b>{order.total_cost:.0f} {currency}</b>\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            parse_mode="HTML"
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {user.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {user.tg_id}: {e}")
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ {order_id}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {order.total_cost} {currency}")
    await call.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω, –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã!")

# === –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ó–ê–ö–ê–ó–ê ===

@router.callback_query(F.data.startswith("admin_order_details:"))
@admin_only
async def admin_order_details(call: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    user = await get_user_by_id(order.user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    text = await format_order_details(order, user)
    
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=admin_order_details_keyboard(order_id, order.status)
    )
    await call.answer()

async def format_order_details(order, user):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    
    # –°—Ç–∞—Ç—É—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    status_names = {
        "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
        "in_progress": "üöÄ –í —Ä–∞–±–æ—Ç–µ",
        "paused": "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "pending_review": "üìã –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
    }
    
    # –¢–∏–ø—ã —É—Å–ª—É–≥
    service_names = {
        "regular_boost": "üéÆ –û–±—ã—á–Ω—ã–π –±—É—Å—Ç",
        "hero_boost": "üéØ –ë—É—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
        "coaching": "üìö –ì–∞–π–¥ / –æ–±—É—á–µ–Ω–∏–µ"
    }
    
    # –¢–∏–ø—ã –±—É—Å—Ç–∞
    boost_names = {
        "account": "üîê –ß–µ—Ä–µ–∑ –≤—Ö–æ–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç",
        "shared": "ü§ù –°–æ–≤–º–µ—Å—Ç–Ω—ã–π –±—É—Å—Ç",
        "mmr": "üìä –ë—É—Å—Ç –ú–ú–†",
        "winrate": "üìà –ë—É—Å—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞"
    }
    
    text = f"üìã <b>–ó–∞–∫–∞–∑ {order.order_id}</b>\n\n"
    
    # –°—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è
    text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_names.get(order.status, order.status)}\n"
    text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    if user.username:
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{user.username} (ID: {user.tg_id})\n"
    else:
        text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> <a href='tg://user?id={user.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a> (ID: {user.tg_id})\n"
    text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {user.region}\n\n"
    
    # –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    text += f"üõí <b>–£—Å–ª—É–≥–∞:</b> {service_names.get(order.service_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
    
    if order.service_type == "coaching":
        text += f"üìö <b>–¢–µ–º–∞:</b> {order.coaching_topic or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"‚è±Ô∏è <b>–ß–∞—Å–æ–≤:</b> {order.coaching_hours or 1}\n"
    else:
        text += f"üîß <b>–¢–∏–ø:</b> {boost_names.get(order.boost_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        
        # –†–∞–Ω–≥–∏
        if order.current_rank == "–ú–∏—Ñ–∏–∫":
            text += f"üìä <b>–¢–µ–∫—É—â–∏–π:</b> –ú–∏—Ñ–∏–∫ {order.current_mythic_stars or 0} ‚≠ê\n"
        else:
            text += f"üìä <b>–¢–µ–∫—É—â–∏–π:</b> {order.current_rank}\n"
        
        if order.target_rank == "–ú–∏—Ñ–∏–∫":
            text += f"üéØ <b>–ñ–µ–ª–∞–µ–º—ã–π:</b> –ú–∏—Ñ–∏–∫ {order.target_mythic_stars or 0} ‚≠ê\n"
        else:
            text += f"üéØ <b>–ñ–µ–ª–∞–µ–º—ã–π:</b> {order.target_rank}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if order.lane:
            text += f"üéÆ <b>–õ–∞–π–Ω:</b> {order.lane}\n"
        if order.heroes_mains:
            text += f"üé≠ <b>–ú–µ–π–Ω—ã:</b> {order.heroes_mains}\n"
        if order.game_id:
            text += f"üÜî <b>–ò–≥—Ä–æ–≤–æ–π ID:</b> {order.game_id}\n"
        if order.preferred_time:
            text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {order.preferred_time}\n"
    
    # –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏
    if order.contact_info:
        text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {order.contact_info}\n"
    if order.details:
        text += f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {order.details}\n"
    
    # –§–∏–Ω–∞–Ω—Å—ã
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ —Ä–µ–≥–∏–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    currency = get_currency_for_order(order, user)
    
    text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order.total_cost:.0f} {currency}\n"
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –±—É—Å—Ç–µ—Ä
    if order.assigned_booster_id:
        booster = await get_user_by_id(order.assigned_booster_id)
        if booster:
            if booster.username:
                text += f"üë®‚Äçüíº <b>–ë—É—Å—Ç–µ—Ä:</b> @{booster.username} (ID: {booster.tg_id})\n"
            else:
                text += f"üë®‚Äçüíº <b>–ë—É—Å—Ç–µ—Ä:</b> <a href='tg://user?id={booster.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a> (ID: {booster.tg_id})\n"
    
    return text

# === –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ë–£–°–¢–ï–†–ê ===

@router.callback_query(F.data.startswith("admin_assign_booster:"))
@admin_only
async def admin_assign_booster(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±—É—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    order_id = call.data.split(":")[1]
    
    boosters = await get_active_boosters()
    
    if not boosters:
        await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤!", show_alert=True)
        return
    
    await call.message.edit_text(
        f"üë• <b>–í—ã–±–æ—Ä –±—É—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:\n"
        f"üü¢ - –∞–∫—Ç–∏–≤–µ–Ω, üî¥ - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω",
        parse_mode="HTML",
        reply_markup=admin_boosters_list_keyboard(order_id, boosters)
    )
    await call.answer()

@router.callback_query(F.data.startswith("admin_select_booster:"))
@admin_only
async def admin_select_booster(call: CallbackQuery):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—É—Å—Ç–µ—Ä–∞ –Ω–∞ –∑–∞–∫–∞–∑"""
    parts = call.data.split(":")
    order_id = parts[1]
    booster_user_id = int(parts[2])
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –±—É—Å—Ç–µ—Ä–∞ {booster_user_id} –Ω–∞ –∑–∞–∫–∞–∑ {order_id}")
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â–µ pending, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ confirmed –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±—É—Å—Ç–µ—Ä–∞
    if order.status == "pending":
        await update_order_status(order_id, "confirmed")
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –±—É—Å—Ç–µ—Ä–∞
    order = await assign_booster_to_order(order_id, booster_user_id)
    if not order:
        await call.answer("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –±—É—Å—Ç–µ—Ä–∞!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–µ—Ä–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
    booster = await get_user_by_id(booster_user_id)
    client = await get_user_by_id(order.user_id)
    
    if booster.username:
        booster_text = f"üë®‚Äçüíº <b>–ë—É—Å—Ç–µ—Ä:</b> @{booster.username} (ID: {booster.tg_id})"
    else:
        booster_text = f"üë®‚Äçüíº <b>–ë—É—Å—Ç–µ—Ä:</b> <a href='tg://user?id={booster.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a> (ID: {booster.tg_id})"
    
    if client.username:
        client_text = f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{client.username} (ID: {client.tg_id})"
    else:
        client_text = f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> <a href='tg://user?id={client.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a> (ID: {client.tg_id})"
    
    await call.message.edit_text(
        f"‚úÖ <b>–ë—É—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!</b>\n\n"
        f"üìã <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
        f"{booster_text}\n"
        f"{client_text}\n\n"
        f"–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.",
        parse_mode="HTML",
        reply_markup=admin_order_details_keyboard(order_id, "confirmed")
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—É—Å—Ç–µ—Ä–∞
    try:
        currency = get_currency_for_order(order, client)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –±—É—Å—Ç–µ—Ä–∞
        notification_text = f"üéØ <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
        notification_text += f"üìã <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
        if client.username:
            notification_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> @{client.username} (ID: {client.tg_id})\n"
        else:
            notification_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> <a href='tg://user?id={client.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a> (ID: {client.tg_id})\n"
        notification_text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {client.region}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ –±—É—Å—Ç–µ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from app.utils.settings import get_booster_income_percent
        try:
            booster_percent = await get_booster_income_percent()
        except:
            booster_percent = 70  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 70%
        
        booster_income = order.total_cost * (booster_percent / 100)
        notification_text += f"üí∞ <b>–í–∞—à –¥–æ—Ö–æ–¥:</b> {booster_income:.0f} {currency} ({booster_percent}%)\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        if order.service_type == "coaching":
            notification_text += f"üìö <b>–£—Å–ª—É–≥–∞:</b> –ì–∞–π–¥ / –æ–±—É—á–µ–Ω–∏–µ\n"
            if order.coaching_topic:
                notification_text += f"üìñ <b>–¢–µ–º–∞:</b> {order.coaching_topic}\n"
            if order.coaching_hours:
                notification_text += f"‚è±Ô∏è <b>–ß–∞—Å–æ–≤:</b> {order.coaching_hours}\n"
        else:
            notification_text += f"üéÆ <b>–£—Å–ª—É–≥–∞:</b> –ë—É—Å—Ç —Ä–∞–Ω–≥–∞\n"
            if order.current_rank:
                notification_text += f"üìä <b>–¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥:</b> {order.current_rank}\n"
            if order.target_rank:
                notification_text += f"üéØ <b>–¶–µ–ª–µ–≤–æ–π —Ä–∞–Ω–≥:</b> {order.target_rank}\n"
        
        notification_text += f"\nüí° <i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞</i>"
        
        await call.bot.send_message(
            booster.tg_id,
            notification_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∑–∞–∫–∞–∑–µ", callback_data=f"booster_order_details:{order_id}")],
                [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="booster_refresh_orders")]
            ])
        )
        logger.info(f"–ë—É—Å—Ç–µ—Ä {booster.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –Ω–∞ –∑–∞–∫–∞–∑ {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –±—É—Å—Ç–µ—Ä–∞ {booster.tg_id}: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        booster_contact = f"@{booster.username}" if booster.username else f"<a href='tg://user?id={booster.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º</a>"
        
        await call.bot.send_message(
            client.tg_id,
            f"‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ {order_id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
            f"üë®‚Äçüíº <b>–ù–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {booster_contact}\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            parse_mode="HTML"
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±—É—Å—Ç–µ—Ä–∞ {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    await call.answer("–ë—É—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω, –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê–ú–ò –ó–ê–ö–ê–ó–û–í ===

@router.callback_query(F.data.startswith("admin_start_order:"))
@admin_only
async def admin_start_order(call: CallbackQuery):
    """–ó–∞–ø—É—Å–∫ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É"""
    order_id = call.data.split(":")[1]
    
    await update_order_status(order_id, "in_progress")
    
    order = await get_order_by_id(order_id)
    client = await get_user_by_id(order.user_id)
    
    await call.message.edit_text(
        f"üöÄ <b>–ó–∞–∫–∞–∑ {order_id} –∑–∞–ø—É—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>–í —Ä–∞–±–æ—Ç–µ</b>\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.",
        parse_mode="HTML",
        reply_markup=admin_order_details_keyboard(order_id, "in_progress")
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"üöÄ <b>–í–∞—à –∑–∞–∫–∞–∑ {order_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n"
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –∑–∞–∫–∞–∑—ã\".",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –∑–∞–ø—É—Å—Ç–∏–ª –∑–∞–∫–∞–∑ {order_id} –≤ —Ä–∞–±–æ—Ç—É")
    await call.answer("–ó–∞–∫–∞–∑ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É!")

@router.callback_query(F.data.startswith("admin_complete_order:"))
@admin_only
async def admin_complete_order(call: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    order_id = call.data.split(":")[1]
    
    await update_order_status(order_id, "completed")
    
    order = await get_order_by_id(order_id)
    client = await get_user_by_id(order.user_id)
    
    await call.message.edit_text(
        f"‚úÖ <b>–ó–∞–∫–∞–∑ {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>–ó–∞–≤–µ—Ä—à–µ–Ω</b>\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
        parse_mode="HTML",
        reply_markup=admin_order_details_keyboard(order_id, "completed")
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑ {order_id}")
    await call.answer("–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

# === –°–ü–ò–°–û–ö –ó–ê–ö–ê–ó–û–í ===

@router.callback_query(F.data == "admin_orders_list")
@admin_only
async def admin_orders_list(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    await show_orders_list(call, status_filter="all", page=0)

@router.callback_query(F.data.startswith("admin_orders_filter:"))
@admin_only
async def admin_orders_filter(call: CallbackQuery):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    parts = call.data.split(":")
    status_filter = parts[1]
    page = int(parts[2]) if len(parts) > 2 else 0
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –ø—Ä–∏–º–µ–Ω–∏–ª —Ñ–∏–ª—å—Ç—Ä: {status_filter}")
    await show_orders_list(call, status_filter, page, edit_message=True)

@router.callback_query(F.data.startswith("admin_orders_page:"))
@admin_only
async def admin_orders_page(call: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∑–∞–∫–∞–∑–æ–≤"""
    parts = call.data.split(":")
    status_filter = parts[1]
    page = int(parts[2])
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page + 1} —Å —Ñ–∏–ª—å—Ç—Ä–æ–º {status_filter}")
    await show_orders_list(call, status_filter, page, edit_message=True)

async def show_orders_list(event, status_filter: str = "all", page: int = 0, edit_message: bool = False):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    per_page = 5  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    offset = page * per_page
    
    orders = await get_all_orders(status_filter, per_page + 1, offset)  # +1 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_count = await count_orders_by_status()
    pending_count = await count_orders_by_status("pending")
    
    text = f"üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
    text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_count}\n"
    text += f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö: {pending_count}\n\n"
    
    status_names = {
        "all": "–í—Å–µ –∑–∞–∫–∞–∑—ã",
        "pending": "–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", 
        "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ",
        "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
        "paused": "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ",
        "pending_review": "–û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
        "completed": "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ",
        "cancelled": "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"
    }
    
    text += f"üìÇ <b>–§–∏–ª—å—Ç—Ä:</b> {status_names.get(status_filter, status_filter)}\n"
    text += f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page + 1}\n\n"
    
    display_orders = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    
    if not orders:
        text += "‚ùå –ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã (–º–∞–∫—Å–∏–º—É–º per_page)
        display_orders = orders[:per_page]
        
        for i, order in enumerate(display_orders, 1):
            user =await get_user_by_id(order.user_id)
            currency = get_currency_for_order(order, user)
            status_emoji = {
                "pending": "‚è≥",
                "confirmed": "‚úÖ",
                "in_progress": "üöÄ",
                "paused": "‚è∏Ô∏è",
                "pending_review": "üìã",
                "completed": "‚úÖ",
                "cancelled": "‚ùå"
            }.get(order.status, "‚ùì")
            
            text += f"{page * per_page + i}. {status_emoji} <b>{order.order_id}</b>\n"
            if user.username:
                text += f"   üë§ @{user.username} (ID: {user.tg_id})\n"
            else:
                text += f"   üë§ <a href='tg://user?id={user.tg_id}'>–°–≤—è–∑–∞—Ç—å—Å—è</a> (ID: {user.tg_id})\n"
            text += f"   üí∞ {order.total_cost:.0f} {currency}\n"
            text += f"   üìÖ {order.created_at.strftime('%d.%m %H:%M')}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status_filters = [
        ("üìã –í—Å–µ", "all"),
        ("‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", "pending"), 
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ", "confirmed"),
        ("üöÄ –í —Ä–∞–±–æ—Ç–µ", "in_progress"),
        ("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ", "paused"),
        ("üìã –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "pending_review"),
        ("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", "completed"),
        ("‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", "cancelled")
    ]
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3
    for i in range(0, len(status_filters), 3):
        row = []
        for j in range(i, min(i + 3, len(status_filters))):
            text_filter, status = status_filters[j]
            emoji = "üîπ" if status == status_filter else ""
            button_text = f"{emoji}{text_filter}"
            row.append(InlineKeyboardButton(
                text=button_text,
                callback_data=f"admin_orders_filter:{status}:0"
            ))
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    if display_orders:
        for order in display_orders:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìã {order.order_id}", 
                    callback_data=f"admin_order_details:{order.order_id}"
                )
            ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    has_next = len(orders) > per_page
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_orders_page:{status_filter}:{page-1}"))
    nav_buttons.append(InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="admin_search_order"))
    if has_next:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_orders_page:{status_filter}:{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")
    ])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if edit_message and hasattr(event, 'message'):
        await event.message.edit_text(text, parse_mode="HTML", reply_markup=reply_markup)
        if hasattr(event, 'answer'):
            await event.answer()
    else:
        await event.answer(text, parse_mode="HTML", reply_markup=reply_markup)

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ===

@router.callback_query(F.data.startswith("admin_pause_order:"))
@admin_only
async def admin_pause_order(call: CallbackQuery):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–∫–∞–∑–∞"""
    order_id = call.data.split(":")[1]
    
    await update_order_status(order_id, "paused")
    
    order = await get_order_by_id(order_id)
    client = await get_user_by_id(order.user_id)
    
    await call.message.edit_text(
        f"‚è∏Ô∏è <b>–ó–∞–∫–∞–∑ {order_id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ.",
        parse_mode="HTML",
        reply_markup=admin_order_details_keyboard(order_id, "paused")
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"‚è∏Ô∏è <b>–í–∞—à –∑–∞–∫–∞–∑ {order_id} –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"–†–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É –±—É–¥–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            f"–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –∑–∞–∫–∞–∑ {order_id}")
    await call.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

@router.callback_query(F.data.startswith("admin_resume_order:"))
@admin_only
async def admin_resume_order(call: CallbackQuery):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    order_id = call.data.split(":")[1]
    
    await update_order_status(order_id, "in_progress")
    
    order = await get_order_by_id(order_id)
    client = await get_user_by_id(order.user_id)
    
    await call.message.edit_text(
        f"‚ñ∂Ô∏è <b>–ó–∞–∫–∞–∑ {order_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>–í —Ä–∞–±–æ—Ç–µ</b>\n"
        f"–ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.",
        parse_mode="HTML",
        reply_markup=admin_order_details_keyboard(order_id, "in_progress")
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"‚ñ∂Ô∏è <b>–†–∞–±–æ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É {order_id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n"
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –∑–∞–∫–∞–∑—ã\".",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª –∑–∞–∫–∞–∑ {order_id}")
    await call.answer("–ó–∞–∫–∞–∑ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω!")

@router.callback_query(F.data.startswith("admin_client_profile:"))
@admin_only
async def admin_client_profile(call: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    client = await get_user_by_id(order.user_id)
    if not client:
        await call.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    text = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
    text += f"üÜî <b>ID:</b> {client.id}\n"
    text += f"üì± <b>Telegram ID:</b> {client.tg_id}\n"
    if client.username:
        text += f"üë§ <b>Username:</b> @{client.username}\n"
    else:
        text += f"üë§ <b>Username:</b> –Ω–µ —É–∫–∞–∑–∞–Ω\n"
        text += f"üìû <b>–°–≤—è–∑—å:</b> <a href='tg://user?id={client.tg_id}'>–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram</a>\n"
    text += f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {client.region}\n"
    text += f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {client.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    # –ë–∞–ª–∞–Ω—Å—ã
    text += f"üí∞ <b>–ë–∞–ª–∞–Ω—Å—ã:</b>\n"
    text += f"üá∞üá¨ –ö–ì: {client.balance_kg:.0f} —Å–æ–º\n"
    text += f"üá∞üáø –ö–ó: {client.balance_kz:.0f} —Ç–µ–Ω–≥–µ\n"
    text += f"üá∑üá∫ –†–£: {client.balance_ru:.0f} —Ä—É–±.\n\n"
    
    text += f"üë• <b>–†–æ–ª—å:</b> {client.role}\n"
    # –£ User –Ω–µ—Ç –ø–æ–ª—è status, —ç—Ç–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É BoosterAccount
    text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω"  # –í—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ö –∑–∞–∫–∞–∑—É", callback_data=f"admin_order_details:{order_id}")
        ]
    ])
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data == "admin_search_order")
@admin_only
async def admin_search_order(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ ID"""
    await call.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_orders_list")]
        ])
    )
    await state.set_state(AdminStates.searching_order)
    await call.answer()

@router.message(AdminStates.searching_order)
@admin_only
async def process_search_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞"""
    order_id = message.text.strip()
    
    order = await get_order_by_id(order_id)
    if not order:
        await message.answer(
            f"‚ùå –ó–∞–∫–∞–∑ —Å ID '{order_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π ID:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="admin_orders_list")]
            ])
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    user = await get_user_by_id(order.user_id)
    text = await format_order_details(order, user)
    
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=admin_order_details_keyboard(order_id, order.status)
    )
    
    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –Ω–∞—à–µ–ª –∑–∞–∫–∞–∑ {order_id}")

# === –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ó–ê–ö–ê–ó–û–í ===

@router.callback_query(F.data.startswith("admin_approve_completion:"))
@admin_only
async def admin_approve_completion(call: CallbackQuery):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    order_id = call.data.split(":")[1]
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    if order.status != "pending_review":
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏!", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    await update_order_status(order_id, "completed")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–µ—Ä–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
    booster = await get_user_by_id(order.assigned_booster_id)
    client = await get_user_by_id(order.user_id)
    currency = get_currency_for_order(order, client)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ –±—É—Å—Ç–µ—Ä–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    from app.utils.settings import get_booster_income_percent
    try:
        booster_percent = await get_booster_income_percent()
    except:
        booster_percent = 70  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 70%
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±—É—Å—Ç–µ—Ä—É —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
    booster_amount = order.total_cost * (booster_percent / 100)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É –≤—ã–ø–ª–∞—Ç—ã
    order_currency = currency  # –í–∞–ª—é—Ç–∞ –∑–∞–∫–∞–∑–∞
    booster_region_currencies = {
        "üá∞üá¨ –ö–†": "—Å–æ–º",
        "üá∞üáø –ö–ó": "—Ç–µ–Ω–≥–µ", 
        "üá∑üá∫ –†–£": "—Ä—É–±."
    }
    booster_currency = booster_region_currencies.get(booster.region, "—Ä—É–±.")
    
    # –ï—Å–ª–∏ –≤–∞–ª—é—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
    final_amount = booster_amount
    conversion_note = ""
    
    if order_currency != booster_currency:
        try:
            from app.utils.currency_converter import convert_booster_balance
            final_amount = await convert_booster_balance(booster_amount, order_currency, booster_currency)
            conversion_note = f"\nüí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {booster_amount:.0f} {order_currency} ‚Üí {final_amount:.0f} {booster_currency}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª—é—Ç—É –∑–∞–∫–∞–∑–∞
            booster_currency = order_currency
            final_amount = booster_amount
    
    await update_booster_balance(order.assigned_booster_id, final_amount, booster_currency)
    
    # TODO: –ù–∞—á–∏—Å–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –∫–µ—à–±—ç–∫ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
    # cashback_percent = await get_setting("cashback_percent", 5)  # 5% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    # cashback_amount = order.total_cost * (cashback_percent / 100)
    # await update_user_balance_by_region(client.id, get_balance_field(client.region), cashback_amount)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    booster_str = f"@{booster.username}" if booster.username else f'<a href="tg://user?id={booster.tg_id}">–°–≤—è–∑–∞—Ç—å—Å—è</a>'
    client_str = f"@{client.username}" if client.username else f'<a href="tg://user?id={client.tg_id}">–°–≤—è–∑–∞—Ç—å—Å—è</a>'
    
    await call.message.edit_caption(
        caption=f"‚úÖ <b>–ó–∞–∫–∞–∑ {order_id} –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
               f"–ë—É—Å—Ç–µ—Ä: {booster_str} ({booster.region})\n"
               f"–ö–ª–∏–µ–Ω—Ç: {client_str}\n"
               f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_cost:.0f} {currency}\n\n"
               f"üí∞ –ë—É—Å—Ç–µ—Ä—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {final_amount:.0f} {booster_currency} ({booster_percent}%)"
               f"{conversion_note}\n"
               f"üéÅ –ö–ª–∏–µ–Ω—Ç—É –Ω–∞—á–∏—Å–ª–µ–Ω –∫–µ—à–±—ç–∫\n\n"
               f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", callback_data=f"admin_order_details:{order_id}")]
        ])
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—É—Å—Ç–µ—Ä–∞
    try:
        await call.bot.send_message(
            booster.tg_id,
            f"üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ {order_id} –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
            f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n"
            f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: <b>{booster_amount:.0f} {currency}</b> ({booster_percent}%)\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É!",
            parse_mode="HTML"
        )
        logger.info(f"–ë—É—Å—Ç–µ—Ä {booster.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –±—É—Å—Ç–µ—Ä–∞ {booster.tg_id}: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ {order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.\n"
            f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –∫–µ—à–±—ç–∫ –∑–∞ –∑–∞–∫–∞–∑.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!\n"
            f"–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!",
            parse_mode="HTML"
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ–¥–æ–±—Ä–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id}")
    await call.answer("–ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω!")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò ===

@router.callback_query(F.data.startswith("admin_boosters_page:"))
@admin_only
async def admin_boosters_page(call: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –±—É—Å—Ç–µ—Ä–æ–≤"""
    parts = call.data.split(":")
    order_id = parts[1]
    page = int(parts[2])
    
    boosters = await get_active_boosters()
    
    await call.message.edit_text(
        f"üë• <b>–í—ã–±–æ—Ä –±—É—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:\n"
        f"üü¢ - –∞–∫—Ç–∏–≤–µ–Ω, üî¥ - –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω",
        parse_mode="HTML",
        reply_markup=admin_boosters_list_keyboard(order_id, boosters, page)
    )
    await call.answer()

# === –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê ===

@router.callback_query(F.data.startswith("admin_reject_completion:"))
@admin_only
async def admin_reject_order_completion(call: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    order_id = call.data.split(":")[1]
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id}")
    
    order = await get_order_by_id(order_id)
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return
    
    if order.status != "pending_review":
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ!", show_alert=True)
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É
    await update_order_status(order_id, "in_progress")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –±—É—Å—Ç–µ—Ä–µ
    client = await get_user_by_id(order.user_id)
    booster = await get_user_by_id(order.assigned_booster_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
    client_str = f"@{client.username}" if client.username else f'<a href="tg://user?id={client.tg_id}">–°–≤—è–∑–∞—Ç—å—Å—è</a>'
    booster_str = f"@{booster.username}" if booster.username else f'<a href="tg://user?id={booster.tg_id}">–°–≤—è–∑–∞—Ç—å—Å—è</a>'
    
    await call.message.edit_text(
        f"‚ùå <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!</b>\n\n"
        f"üÜî <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_str}\n"
        f"üéØ <b>–ë—É—Å—Ç–µ—Ä:</b> {booster_str}\n\n"
        f"–ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data="admin_orders_list")]
        ])
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await call.bot.send_message(
            client.tg_id,
            f"‚ö†Ô∏è <b>–ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
            f"–ü–æ –∑–∞–∫–∞–∑—É {order_id} —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏.\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º.\n\n"
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ–∏ –∑–∞–∫–∞–∑—ã\".",
            parse_mode="HTML"
        )
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞ {order_id} –≤ —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client.tg_id}: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—É—Å—Ç–µ—Ä–∞
    try:
        await call.bot.send_message(
            booster.tg_id,
            f"‚ö†Ô∏è <b>–ó–∞–∫–∞–∑ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
            f"–í–∞—à–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–∫–∞–∑–æ–º.\n\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        logger.info(f"–ë—É—Å—Ç–µ—Ä {booster.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞ {order_id} –≤ —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –±—É—Å—Ç–µ—Ä–∞ {booster.tg_id}: {e}")
    
    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º @{call.from_user.username}")
    await call.answer("–ó–∞–∫–∞–∑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Ä–∞–±–æ—Ç—É!")
