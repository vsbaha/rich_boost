from app.database.crud import get_payment_request_by_id, update_payment_request_status, get_user_by_id, update_user_balance_by_region, get_user_by_tg_id, get_all_payment_requests
from aiogram import Router, F
import logging
from app.config import PAGE_SIZE
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from app.utils.roles import admin_only
from app.utils.user import format_user_profile
from app.states.admin_states import SearchStates
from app.keyboards.admin.payments import admin_topup_action_keyboard, back_to_payment_keyboard

router = Router()
logger = logging.getLogger(__name__)

def format_payment_request_text(payment_request, user):
    status = payment_request.status
    status_text = '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ' if status == 'accepted' else '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ' if status == 'rejected' else '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏'
    return (
        f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n"
        f"ID: <code>{payment_request.id}</code>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '‚Äî'}\n"
        f"User ID: <code>{user.tg_id}</code>\n"
        f"–†–µ–≥–∏–æ–Ω: {payment_request.region}\n"
        f"–°—É–º–º–∞: {payment_request.amount:.2f}\n"
        f"–î–∞—Ç–∞: {payment_request.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}"
    )

@router.message(F.text == "üí∏ –í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
@admin_only
async def admin_all_topup_requests(message: Message):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username or '–±–µ–∑ username'} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
    requests = await get_all_payment_requests()
    if not requests:
        logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username or '–±–µ–∑ username'}: –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
        await message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        return

    filter_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data="filter_topups:pending"),
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ", callback_data="filter_topups:accepted"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="filter_topups:rejected"),
            ],
            [
                InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="search_by_id")
            ]
        ]
    )

    text = "<b>–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"
    await message.answer(text, parse_mode="HTML", reply_markup=filter_keyboard)
    logger.info("–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫")

@router.callback_query(F.data.startswith("filter_topups:"))
@admin_only
async def filter_topup_requests(call: CallbackQuery):
    status = call.data.split(":")[1]
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –≤—ã–±—Ä–∞–ª —Ñ–∏–ª—å—Ç—Ä –∑–∞—è–≤–æ–∫: {status}")
    await show_filtered_requests(call, status, page=1)

@router.callback_query(F.data.startswith("admin_topup_info:"))
@admin_only
async def admin_topup_info(call: CallbackQuery):
    parts = call.data.split(":")
    request_id = int(parts[1])
    filter_status = parts[2] if len(parts) > 2 else "pending"
    from_list = len(parts) > 3 and parts[3] == "from_list"
    payment_request = await get_payment_request_by_id(request_id)
    user = await get_user_by_id(payment_request.user_id)
    text = format_payment_request_text(payment_request, user)
    keyboard = admin_topup_action_keyboard(
        request_id,
        payment_request.status,
        filter_status,
        user_tg_id=user.tg_id,
        from_list=from_list
    )
    try:
        await call.message.delete()
    except Exception as e:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}")
    if payment_request.receipt_file_id:
        await call.message.answer_photo(
            photo=payment_request.receipt_file_id,
            caption=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ID {request_id}")
    await call.answer()

@router.callback_query(F.data.startswith("accept_payment:"))
@admin_only
async def accept_payment(call: CallbackQuery):
    parts = call.data.split(":")
    request_id = int(parts[1])
    filter_status = parts[3] if len(parts) > 3 else "pending"
    from_list = len(parts) > 4 and parts[4] == "from_list"
    payment_request = await get_payment_request_by_id(request_id)
    if payment_request.status != "pending":
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–∏–Ω—è—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É ID {request_id}")
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!", show_alert=True)
        return
    user = await get_user_by_id(payment_request.user_id)
    await update_user_balance_by_region(user, payment_request.region, payment_request.amount)
    await update_payment_request_status(request_id, "accepted")
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ID {request_id}")
    await call.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    try:
        await call.bot.send_message(
            user.tg_id,
            f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {payment_request.amount:.2f} {payment_request.region} –ø—Ä–∏–Ω—è—Ç–∞! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")
    except Exception as e:
        logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}: {e}")
    if from_list:
        await show_filtered_requests(call, filter_status, page=1)
    else:
        try:
            await call.message.delete()
        except Exception as e:
            logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}")

@router.callback_query(F.data.startswith("reject_payment:"))
@admin_only
async def reject_payment(call: CallbackQuery):
    parts = call.data.split(":")
    request_id = int(parts[1])
    filter_status = parts[3] if len(parts) > 3 else "pending"
    from_list = len(parts) > 4 and parts[4] == "from_list"
    payment_request = await get_payment_request_by_id(request_id)
    if payment_request.status != "pending":
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É ID {request_id}")
        await call.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!", show_alert=True)
        return
    await update_payment_request_status(request_id, "rejected")
    user = await get_user_by_id(payment_request.user_id)
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ID {request_id}")
    await call.answer("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!")
    try:
        await call.bot.send_message(
            user.tg_id,
            f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {payment_request.amount:.2f} {payment_request.region} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.tg_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
    except Exception as e:
        logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}: {e}")
    if from_list:
        await show_filtered_requests(call, filter_status, page=1)
    else:
        try:
            await call.message.delete()
        except Exception as e:
            logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}")

@router.callback_query(F.data.startswith("back_to_filtered:"))
@admin_only
async def back_to_filtered(call: CallbackQuery):
    filter_status = call.data.split(":")[1]
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {filter_status}")
    await show_filtered_requests(call, filter_status, page=1)

@router.callback_query(F.data.startswith("payment_user_info:"))
@admin_only
async def payment_user_info(call: CallbackQuery):
    parts = call.data.split(":")
    user_tg_id = int(parts[1])
    request_id = int(parts[2])
    user = await get_user_by_tg_id(user_tg_id)
    if not user:
        logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    try:
        await call.message.delete()
    except Exception as e:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}")
    await call.message.answer(
        format_user_profile(user),
        parse_mode="HTML",
        reply_markup=back_to_payment_keyboard(request_id, user)
    )
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_tg_id}")
    await call.answer()

@router.callback_query(F.data.startswith("back_to_payment:"))
@admin_only
async def back_to_payment(call: CallbackQuery):
    request_id = int(call.data.split(":")[1])
    payment_request = await get_payment_request_by_id(request_id)
    user = await get_user_by_id(payment_request.user_id)
    status = payment_request.status
    filter_status = "pending"
    keyboard = admin_topup_action_keyboard(request_id, status, filter_status, user_tg_id=user.tg_id)
    text = format_payment_request_text(payment_request, user)
    try:
        await call.message.delete()
    except Exception as e:
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}")
    if payment_request.receipt_file_id:
        await call.message.answer_photo(
            photo=payment_request.receipt_file_id,
            caption=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await call.message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ID {request_id}")
    await call.answer()

@router.callback_query(F.data.startswith("admin_requests_page:"))
@admin_only
async def admin_requests_page(call: CallbackQuery):
    parts = call.data.split(":")
    filter_status = parts[1]
    page = int(parts[2])
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫: —Å—Ç–∞—Ç—É—Å={filter_status}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞={page}")
    await show_filtered_requests(call, filter_status, page)

async def show_filtered_requests(call: CallbackQuery, filter_status: str, page: int = 1):
    requests = await get_all_payment_requests()
    filtered = [r for r in requests if r.status == filter_status]
    total_pages = (len(filtered) + PAGE_SIZE - 1) // PAGE_SIZE
    if not filtered:
        try:
            await call.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
        except Exception as e:
            if "there is no text in the message to edit" not in str(e):
                logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            try:
                await call.message.delete()
                await call.message.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
            except Exception as e2:
                logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} —É–≤–∏–¥–µ–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {filter_status}")
        await call.answer()
        return
    start = (page - 1) * PAGE_SIZE
    end = start + PAGE_SIZE
    page_requests = filtered[start:end]
    text = f"<b>–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {filter_status}</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"
    buttons = [
        [
            InlineKeyboardButton(
                text=f"ID: {req.id} | "
                    f"{req.created_at.strftime('%d.%m.%Y %H:%M')} | "
                    f"{req.amount:.2f} | {req.region} | User ID: {req.user_id}",
                callback_data=f"admin_topup_info:{req.id}:{filter_status}:from_list"
            )
        ] for req in page_requests
    ]
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_requests_page:{filter_status}:{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"admin_requests_page:{filter_status}:{page+1}"))
    if nav_buttons:
        buttons.append(nav_buttons)
    requests_keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=requests_keyboard)
    except Exception as e:
        if "there is no text in the message to edit" not in str(e):
            logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        try:
            await call.message.delete()
            await call.message.answer(text, parse_mode="HTML", reply_markup=requests_keyboard)
        except Exception as e2:
            logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∑–∞—è–≤–∫–∏: —Å—Ç–∞—Ç—É—Å={filter_status}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞={page}")
    await call.answer()

@router.callback_query(F.data == "search_by_id")
@admin_only
async def ask_order_id(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –≤—ã–±—Ä–∞–ª –ø–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –ø–æ ID")
    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_filter_menu")]
            ]
        )
    )
    await state.set_state(SearchStates.waiting_for_id)
    await call.answer()

@router.callback_query(F.data == "back_to_filter_menu")
@admin_only
async def back_to_filter_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    filter_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data="filter_topups:pending"),
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ", callback_data="filter_topups:accepted"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ", callback_data="filter_topups:rejected"),
            ],
            [
                InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="search_by_id")
            ]
        ]
    )
    try:
        await call.message.edit_text(
            "<b>–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
            parse_mode="HTML",
            reply_markup=filter_keyboard
        )
    except Exception as e:
        if "there is no text in the message to edit" not in str(e):
            logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        try:
            await call.message.delete()
            await call.message.answer(
                "<b>–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
                parse_mode="HTML",
                reply_markup=filter_keyboard
            )
        except Exception as e2:
            logger.warning(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'}: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username or '–±–µ–∑ username'} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫")
    await call.answer()

@router.message(SearchStates.waiting_for_id)
@admin_only
async def search_order_by_id(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username or '–±–µ–∑ username'} –≤–≤—ë–ª ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏")
    if not message.text.isdigit():
        logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username or '–±–µ–∑ username'} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (–Ω–µ —á–∏—Å–ª–æ)")
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–∫–∞–∑–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_filter_menu")]
                ]
            )
        )
        return
    request_id = int(message.text)
    payment_request = await get_payment_request_by_id(request_id)
    if not payment_request:
        logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username or '–±–µ–∑ username'}: –∑–∞—è–≤–∫–∞ —Å ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await message.answer(
            "–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π ID –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_filter_menu")]
                ]
            )
        )
        return
    user = await get_user_by_id(payment_request.user_id)
    text = format_payment_request_text(payment_request, user)
    keyboard = admin_topup_action_keyboard(
        payment_request.id,
        payment_request.status,
        "pending",
        user_tg_id=user.tg_id,
        from_list=False
    )
    if payment_request.receipt_file_id:
        await message.answer_photo(
            photo=payment_request.receipt_file_id,
            caption=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username or '–±–µ–∑ username'} –Ω–∞—à—ë–ª –∑–∞—è–≤–∫—É –ø–æ ID {request_id} (—Å —Ñ–æ—Ç–æ)")
    else:
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username or '–±–µ–∑ username'} –Ω–∞—à—ë–ª –∑–∞—è–≤–∫—É –ø–æ ID {request_id} (–±–µ–∑ —Ñ–æ—Ç–æ)")
    await state.clear()