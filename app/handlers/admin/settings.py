import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from app.utils.roles import admin_only
from app.utils.settings import SettingsManager, DEFAULT_SETTINGS
from app.states.admin_states import AdminStates
from app.config import REGION_CURRENCIES
import json

router = Router()
logger = logging.getLogger(__name__)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
SETTINGS_CATEGORIES = {
    "backup": "üìÅ –ë—ç–∫–∞–ø",
    "payments": "üí∞ –ü–ª–∞—Ç–µ–∂–∏",
    "prices": "üíé –¶–µ–Ω—ã"
}

def settings_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = []
    for category, name in SETTINGS_CATEGORIES.items():
        keyboard.append([InlineKeyboardButton(text=name, callback_data=f"settings_category:{category}")])
    
    keyboard.append([InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë", callback_data="settings_reset_all")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_back")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def category_settings_keyboard(category: str, settings: dict):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    keyboard = []
    
    for key, config in DEFAULT_SETTINGS.items():
        if config["category"] == category:
            current_value = settings.get(key, config["value"])
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            description = config['description']
            if len(description) > 25:
                description = description[:22] + "..."
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
            if isinstance(current_value, dict):
                display_value = "üìù"
            elif isinstance(current_value, (int, float)):
                display_value = str(current_value)
            else:
                value_str = str(current_value)
                display_value = value_str[:10] + "..." if len(value_str) > 10 else value_str
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É –∫–Ω–æ–ø–∫–∏
            button_text = f"{description}: {display_value}"
            if len(button_text) > 35:
                button_text = f"{description[:20]}...: {display_value}"
            
            keyboard.append([
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"setting_edit:{key}"
                )
            ])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def price_regions_keyboard(setting_key: str, edit_type: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω"""
    keyboard = []
    for region in ["üá∞üá¨ –ö–†", "üá∞üáø –ö–ó", "üá∑üá∫ –†–£"]:
        currency = REGION_CURRENCIES.get(region, "")
        keyboard.append([InlineKeyboardButton(
            text=f"{region} ({currency})", 
            callback_data=f"price_region:{edit_type}:{setting_key}:{region}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"setting_edit:{setting_key}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def rank_prices_keyboard(region: str, setting_key: str, current_prices: dict):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω —Ä–∞–Ω–≥–æ–≤"""
    keyboard = []
    region_prices = current_prices.get(region, {})
    
    # –û–±—ã—á–Ω—ã–µ —Ä–∞–Ω–≥–∏
    regular_ranks = ["–í–æ–∏–Ω", "–≠–ª–∏—Ç–∞", "–ú–∞—Å—Ç–µ—Ä", "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä", "–≠–ø–∏–∫", "–õ–µ–≥–µ–Ω–¥–∞", "–ú–∏—Ñ–∏–∫"]
    for rank in regular_ranks:
        price = region_prices.get(rank, 0)
        keyboard.append([InlineKeyboardButton(
            text=f"{rank}: {price}", 
            callback_data=f"price_edit_rank:{setting_key}:{region}:{rank}"
        )])
    
    # –ú–∏—Ñ–∏–∫ –∑–≤–µ–∑–¥—ã
    mythic_ranges = ["–ú–∏—Ñ–∏–∫0-25", "–ú–∏—Ñ–∏–∫25-50", "–ú–∏—Ñ–∏–∫50-100", "–ú–∏—Ñ–∏–∫100+"]
    for range_name in mythic_ranges:
        price = region_prices.get(range_name, 0)
        keyboard.append([InlineKeyboardButton(
            text=f"{range_name}: {price}", 
            callback_data=f"price_edit_rank:{setting_key}:{region}:{range_name}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ä–µ–≥–∏–æ–Ω–∞–º", callback_data=f"price_edit_ranks:{setting_key}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def coaching_prices_keyboard(setting_key: str, current_prices: dict):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –æ–±—É—á–µ–Ω–∏—è"""
    keyboard = []
    
    for region in ["üá∞üá¨ –ö–†", "üá∞üáø –ö–ó", "üá∑üá∫ –†–£"]:
        price = current_prices.get(region, 0)
        currency = REGION_CURRENCIES.get(region, "")
        keyboard.append([InlineKeyboardButton(
            text=f"{region}: {price} {currency}/—á–∞—Å", 
            callback_data=f"price_edit_coaching_region:{setting_key}:{region}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"setting_edit:{setting_key}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def multipliers_keyboard(setting_key: str, current_multipliers: dict):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π"""
    keyboard = []
    
    multiplier_names = {
        "account": "üîê –ê–∫–∫–∞—É–Ω—Ç",
        "shared": "üë• –û–±—â–∏–π",
        "winrate": "üìà –í–∏–Ω—Ä–µ–π—Ç",
        "mmr": "üéØ MMR",
        "coaching": "üéì –û–±—É—á–µ–Ω–∏–µ"
    }
    
    for key, name in multiplier_names.items():
        value = current_multipliers.get(key, 1.0)
        keyboard.append([InlineKeyboardButton(
            text=f"{name}: x{value}", 
            callback_data=f"price_edit_multiplier:{setting_key}:{key}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"setting_edit:{setting_key}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def setting_edit_keyboard(key: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    keyboard = []
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ü–µ–Ω
    if key in ["RANK_PRICES", "COACHING_PRICES", "BOOST_MULTIPLIERS"]:
        if key == "RANK_PRICES":
            keyboard.append([InlineKeyboardButton(text="üíé –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã", callback_data=f"price_edit_ranks:{key}")])
        elif key == "COACHING_PRICES":
            keyboard.append([InlineKeyboardButton(text="üéì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"price_edit_coaching:{key}")])
        elif key == "BOOST_MULTIPLIERS":
            keyboard.append([InlineKeyboardButton(text="‚ö° –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª–∏", callback_data=f"price_edit_multipliers:{key}")])
    else:
        keyboard.append([InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"setting_change:{key}")])
    
    keyboard.append([InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"setting_reset:{key}")])
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"settings_category:{DEFAULT_SETTINGS[key]['category']}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(F.text == "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@admin_only
async def settings_main_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    text = (
        "üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    await message.answer(text, parse_mode="HTML", reply_markup=settings_menu_keyboard())

@router.callback_query(F.data == "settings_main")
@admin_only
async def settings_main_callback(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = (
        "üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=settings_menu_keyboard())
    await call.answer()

@router.callback_query(F.data.startswith("settings_category:"))
@admin_only
async def settings_category_menu(call: CallbackQuery):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = call.data.split(":")[1]
    category_name = SETTINGS_CATEGORIES.get(category, category)
    
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–∫—Ä—ã–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫: {category}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current_settings = await SettingsManager.get_all_settings(category)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–µ–Ω
    if category == "prices":
        text = await generate_prices_summary()
    else:
        text = f"‚öôÔ∏è <b>{category_name}</b>\n\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    
    await call.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=category_settings_keyboard(category, current_settings)
    )
    await call.answer()

async def generate_prices_summary():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö
    rank_prices = await SettingsManager.get_setting("RANK_PRICES")
    coaching_prices = await SettingsManager.get_setting("COACHING_PRICES")
    multipliers = await SettingsManager.get_setting("BOOST_MULTIPLIERS")
    
    text = "üíé <b>–°–≤–æ–¥–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω</b>\n\n"
    
    # –°–≤–æ–¥–∫–∞ –ø–æ –æ–±—É—á–µ–Ω–∏—é
    text += "üéì <b>–û–±—É—á–µ–Ω–∏–µ (–∑–∞ —á–∞—Å):</b>\n"
    for region in ["üá∞üá¨ –ö–†", "üá∞üáø –ö–ó", "üá∑üá∫ –†–£"]:
        price = coaching_prices.get(region, 0)
        currency = REGION_CURRENCIES.get(region, "")
        text += f"‚Ä¢ {region}: {price} {currency}\n"
    
    # –°–≤–æ–¥–∫–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–∞–Ω–≥–∞–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
    text += f"\nüèÜ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–Ω–≥–∏:</b>\n"
    for region in ["üá∞üá¨ –ö–†", "üá∞üáø –ö–ó", "üá∑üá∫ –†–£"]:
        region_prices = rank_prices.get(region, {})
        price = region_prices.get("–í–æ–∏–Ω", 0)  # –ë–µ—Ä–µ–º —Ü–µ–Ω—É –í–æ–∏–Ω–∞ –∫–∞–∫ –±–∞–∑–æ–≤—É—é
        currency = REGION_CURRENCIES.get(region, "")
        text += f"‚Ä¢ {region}: {price} {currency} (–∑–∞ —Ä–∞–Ω–≥)\n"
    
    # –ú–∏—Ñ–∏–∫ –∑–≤–µ–∑–¥—ã –¥–ª—è –ö–† –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    text += f"\n‚≠ê <b>–ú–∏—Ñ–∏–∫ –∑–≤–µ–∑–¥—ã (–ø—Ä–∏–º–µ—Ä –¥–ª—è üá∞üá¨ –ö–†):</b>\n"
    kg_prices = rank_prices.get("üá∞üá¨ –ö–†", {})
    mythic_ranges = [
        ("0-25 –∑–≤–µ–∑–¥", "–ú–∏—Ñ–∏–∫0-25"),
        ("25-50 –∑–≤–µ–∑–¥", "–ú–∏—Ñ–∏–∫25-50"), 
        ("50-100 –∑–≤–µ–∑–¥", "–ú–∏—Ñ–∏–∫50-100"),
        ("100+ –∑–≤–µ–∑–¥", "–ú–∏—Ñ–∏–∫100+")
    ]
    for display_name, key in mythic_ranges:
        price = kg_prices.get(key, 0)
        text += f"‚Ä¢ {display_name}: {price} —Å–æ–º\n"
    
    # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
    text += f"\n‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –±—É—Å—Ç–∞:</b>\n"
    multiplier_names = {
        "account": "üîê –ê–∫–∫–∞—É–Ω—Ç",
        "shared": "üë• –û–±—â–∏–π", 
        "winrate": "üìà –í–∏–Ω—Ä–µ–π—Ç",
        "mmr": "üéØ MMR",
        "coaching": "üéì –û–±—É—á–µ–Ω–∏–µ"
    }
    for key, name in multiplier_names.items():
        value = multipliers.get(key, 1.0)
        text += f"‚Ä¢ {name}: x{value}\n"
    
    text += f"\nüìù <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>"
    
    return text

@router.callback_query(F.data.startswith("setting_edit:"))
@admin_only
async def setting_edit_menu(call: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    key = call.data.split(":")[1]
    
    if key not in DEFAULT_SETTINGS:
        await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    config = DEFAULT_SETTINGS[key]
    current_value = await SettingsManager.get_setting(key)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω
    if key in ["RANK_PRICES", "COACHING_PRICES", "BOOST_MULTIPLIERS"]:
        if key == "RANK_PRICES":
            value_display = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ —Ä–∞–Ω–≥–∞–º"
        elif key == "COACHING_PRICES":
            value_display = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω –æ–±—É—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"
        elif key == "BOOST_MULTIPLIERS":
            value_display = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –±—É—Å—Ç–∞"
    else:
        # –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if isinstance(current_value, dict):
            value_display = json.dumps(current_value, indent=2, ensure_ascii=False)
        else:
            value_display = str(current_value)
    
    text = (
        f"‚öôÔ∏è <b>{config['description']}</b>\n\n"
        f"üìù <b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b>\n"
        f"<code>{value_display}</code>\n\n"
        f"ÔøΩ {SETTINGS_CATEGORIES.get(config['category'], config['category'])}"
    )
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=setting_edit_keyboard(key))
    await call.answer()

@router.callback_query(F.data.startswith("setting_change:"))
@admin_only
async def setting_change_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    key = call.data.split(":")[1]
    
    if key not in DEFAULT_SETTINGS:
        await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    config = DEFAULT_SETTINGS[key]
    current_value = await SettingsManager.get_setting(key)
    
    await state.update_data(setting_key=key)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if isinstance(current_value, dict):
        value_display = json.dumps(current_value, indent=2, ensure_ascii=False)
        instruction = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:"
    else:
        value_display = str(current_value)
        instruction = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    
    text = (
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üìù <b>{config['description']}</b>\n"
        f"üìã <b>–°–µ–π—á–∞—Å:</b>\n"
        f"<code>{value_display}</code>\n\n"
        f"{instruction}"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"setting_edit:{key}")]
        ]
    )
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_setting_value)
    await call.answer()

@router.message(AdminStates.waiting_for_setting_value)
@admin_only
async def setting_change_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–ª–∏ —Ü–µ–Ω–∞
    if "price_setting_key" in data:
        await process_price_change(message, state, data)
    else:
        await process_regular_setting_change(message, state, data)

async def process_price_change(message: Message, state: FSMContext, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    setting_key = data.get("price_setting_key")
    price_type = data.get("price_type")
    new_value_str = message.text.strip()
    
    try:
        if price_type == "multiplier":
            new_value = float(new_value_str)
            if new_value <= 0:
                await message.answer("‚ùå –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
        else:
            new_value = int(new_value_str)
            if new_value <= 0:
                await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current_settings = await SettingsManager.get_setting(setting_key)
        
        if price_type == "rank":
            region = data.get("price_region")
            rank = data.get("price_rank")
            
            if region not in current_settings:
                current_settings[region] = {}
            current_settings[region][rank] = new_value
            
            success_msg = f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è {rank} –≤ {region} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_value}"
            callback_data = f"price_region:ranks:{setting_key}:{region}"
            
        elif price_type == "coaching":
            region = data.get("price_region")
            current_settings[region] = new_value
            
            currency = REGION_CURRENCIES.get(region, "")
            success_msg = f"‚úÖ –¶–µ–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –≤ {region} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_value} {currency}/—á–∞—Å"
            callback_data = f"price_edit_coaching:{setting_key}"
            
        elif price_type == "multiplier":
            multiplier_key = data.get("price_multiplier_key")
            current_settings[multiplier_key] = new_value
            
            success_msg = f"‚úÖ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ x{new_value}"
            callback_data = f"price_edit_multipliers:{setting_key}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = DEFAULT_SETTINGS[setting_key]
        success = await SettingsManager.set_setting(
            setting_key,
            current_settings,
            config["description"],
            config["category"]
        )
        
        if success:
            logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –∏–∑–º–µ–Ω–∏–ª —Ü–µ–Ω—É {setting_key}: {data}")
            await message.answer(
                success_msg,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data)]
                    ]
                )
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
            
    except (ValueError, TypeError):
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 1.5)"
        )
        return
    
    await state.clear()

async def process_regular_setting_change(message: Message, state: FSMContext, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)"""
    key = data.get("setting_key")
    
    if not key or key not in DEFAULT_SETTINGS:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    config = DEFAULT_SETTINGS[key]
    new_value_str = message.text.strip()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–∂–Ω—ã–π —Ç–∏–ø
        if isinstance(config["value"], (dict, list)):
            new_value = json.loads(new_value_str)
        elif isinstance(config["value"], int):
            new_value = int(new_value_str)
        elif isinstance(config["value"], float):
            new_value = float(new_value_str)
        elif isinstance(config["value"], bool):
            new_value = new_value_str.lower() in ('true', '1', '–¥–∞', 'yes')
        else:
            new_value = new_value_str
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await SettingsManager.set_setting(
            key, 
            new_value, 
            config["description"], 
            config["category"]
        )
        
        if success:
            logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –∏–∑–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É {key}: {new_value}")
            await message.answer(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{config['description']}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"setting_edit:{key}")]
                    ]
                )
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
    except (json.JSONDecodeError, ValueError, TypeError) as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."
        )
        return
    
    await state.clear()

@router.callback_query(F.data.startswith("setting_reset:"))
@admin_only
async def setting_reset(call: CallbackQuery):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    key = call.data.split(":")[1]
    
    if key not in DEFAULT_SETTINGS:
        await call.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    config = DEFAULT_SETTINGS[key]
    success = await SettingsManager.set_setting(
        key,
        config["value"],
        config["description"],
        config["category"]
    )
    
    if success:
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} —Å–±—Ä–æ—Å–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É {key} –∫ —É–º–æ–ª—á–∞–Ω–∏—é")
        await call.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        current_value = config["value"]
        if isinstance(current_value, dict):
            value_display = json.dumps(current_value, indent=2, ensure_ascii=False)
        else:
            value_display = str(current_value)
        
        text = (
            f"‚öôÔ∏è <b>{config['description']}</b>\n\n"
            f"üìù <b>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n"
            f"<code>{value_display}</code>\n\n"
            f"üìã <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {SETTINGS_CATEGORIES.get(config['category'], config['category'])}"
        )
        
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=setting_edit_keyboard(key))
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

@router.callback_query(F.data == "settings_reset_all")
@admin_only
async def settings_reset_all_confirm(call: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    text = (
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
        "–°–±—Ä–æ—Å–∏—Ç—å –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —É–º–æ–ª—á–∞–Ω–∏—é?\n\n"
        "‚ùó –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="settings_reset_all_confirm"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="settings_main")
            ]
        ]
    )
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await call.answer()

@router.callback_query(F.data == "settings_reset_all_confirm")
@admin_only
async def settings_reset_all_process(call: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        for key, config in DEFAULT_SETTINGS.items():
            await SettingsManager.set_setting(
                key,
                config["value"],
                config["description"],
                config["category"]
            )
        
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} —Å–±—Ä–æ—Å–∏–ª –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        text = (
            "‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n"
            "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        )
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_main")]
            ]
        )
        
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
        await call.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data == "settings_back")
@admin_only
async def settings_back_to_admin(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await call.message.delete()
    await call.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=admin_menu_keyboard()
    )
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω

@router.callback_query(F.data.startswith("price_edit_ranks:"))
@admin_only
async def price_edit_ranks_menu(call: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω —Ä–∞–Ω–≥–æ–≤"""
    setting_key = call.data.split(":")[1]
    
    text = (
        "üíé <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω —Ä–∞–Ω–≥–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    await call.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=price_regions_keyboard(setting_key, "ranks")
    )
    await call.answer()

@router.callback_query(F.data.startswith("price_region:ranks:"))
@admin_only
async def price_region_ranks_menu(call: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞"""
    parts = call.data.split(":")
    setting_key = parts[2]
    region = parts[3]
    
    current_prices = await SettingsManager.get_setting(setting_key)
    currency = REGION_CURRENCIES.get(region, "")
    
    text = (
        f"üíé <b>–¶–µ–Ω—ã —Ä–∞–Ω–≥–æ–≤ - {region}</b>\n\n"
        f"–í–∞–ª—é—Ç–∞: {currency}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:"
    )
    
    await call.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=rank_prices_keyboard(region, setting_key, current_prices)
    )
    await call.answer()

@router.callback_query(F.data.startswith("price_edit_rank:"))
@admin_only
async def price_edit_rank_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞"""
    parts = call.data.split(":")
    setting_key = parts[1]
    region = parts[2]
    rank = parts[3]
    
    current_prices = await SettingsManager.get_setting(setting_key)
    current_price = current_prices.get(region, {}).get(rank, 0)
    currency = REGION_CURRENCIES.get(region, "")
    
    await state.update_data(
        price_setting_key=setting_key,
        price_region=region,
        price_rank=rank,
        price_type="rank"
    )
    
    text = (
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ä–∞–Ω–≥–∞</b>\n\n"
        f"üèÜ <b>–†–∞–Ω–≥:</b> {rank}\n"
        f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {region}\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price} {currency}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"price_region:ranks:{setting_key}:{region}")]
        ]
    )
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_setting_value)
    await call.answer()

@router.callback_query(F.data.startswith("price_edit_coaching:"))
@admin_only
async def price_edit_coaching_menu(call: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –æ–±—É—á–µ–Ω–∏—è"""
    setting_key = call.data.split(":")[1]
    current_prices = await SettingsManager.get_setting(setting_key)
    
    text = (
        "üéì <b>–¶–µ–Ω—ã –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:"
    )
    
    await call.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=coaching_prices_keyboard(setting_key, current_prices)
    )
    await call.answer()

@router.callback_query(F.data.startswith("price_edit_coaching_region:"))
@admin_only
async def price_edit_coaching_region_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    parts = call.data.split(":")
    setting_key = parts[1]
    region = parts[2]
    
    current_prices = await SettingsManager.get_setting(setting_key)
    current_price = current_prices.get(region, 0)
    currency = REGION_CURRENCIES.get(region, "")
    
    await state.update_data(
        price_setting_key=setting_key,
        price_region=region,
        price_type="coaching"
    )
    
    text = (
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ–±—É—á–µ–Ω–∏—è</b>\n\n"
        f"üåç <b>–†–µ–≥–∏–æ–Ω:</b> {region}\n"
        f"üí∞ <b>–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:</b> {current_price} {currency}/—á–∞—Å\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ —á–∞—Å:"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"price_edit_coaching:{setting_key}")]
        ]
    )
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_setting_value)
    await call.answer()

@router.callback_query(F.data.startswith("price_edit_multipliers:"))
@admin_only
async def price_edit_multipliers_menu(call: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π"""
    setting_key = call.data.split(":")[1]
    current_multipliers = await SettingsManager.get_setting(setting_key)
    
    text = (
        "‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –±—É—Å—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è:"
    )
    
    await call.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=multipliers_keyboard(setting_key, current_multipliers)
    )
    await call.answer()

@router.callback_query(F.data.startswith("price_edit_multiplier:"))
@admin_only
async def price_edit_multiplier_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è"""
    parts = call.data.split(":")
    setting_key = parts[1]
    multiplier_key = parts[2]
    
    current_multipliers = await SettingsManager.get_setting(setting_key)
    current_value = current_multipliers.get(multiplier_key, 1.0)
    
    multiplier_names = {
        "account": "üîê –ê–∫–∫–∞—É–Ω—Ç",
        "shared": "üë• –û–±—â–∏–π",
        "winrate": "üìà –í–∏–Ω—Ä–µ–π—Ç",
        "mmr": "üéØ MMR",
        "coaching": "üéì –û–±—É—á–µ–Ω–∏–µ"
    }
    
    multiplier_name = multiplier_names.get(multiplier_key, multiplier_key)
    
    await state.update_data(
        price_setting_key=setting_key,
        price_multiplier_key=multiplier_key,
        price_type="multiplier"
    )
    
    text = (
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è</b>\n\n"
        f"‚ö° <b>–¢–∏–ø:</b> {multiplier_name}\n"
        f"üìä <b>–¢–µ–∫—É—â–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å:</b> x{current_value}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):"
    )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"price_edit_multipliers:{setting_key}")]
        ]
    )
    
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_setting_value)
    await call.answer()

from app.keyboards.admin.admin_menu import admin_menu_keyboard
