from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from datetime import datetime
from app.database.models import PromoCode
from app.database.db import AsyncSessionLocal
from app.utils.roles import admin_only
from app.states.admin_states import PromoCreateStates
from sqlalchemy import select
from app.keyboards.admin.promo import (
    promo_type_keyboard,
    promo_currency_keyboard,
    promo_onetime_keyboard,
    promo_confirm_keyboard,
    cancel_keyboard,
    promo_menu_keyboard,
    promo_list_keyboard,
    promo_manage_keyboard
)
import logging

logger = logging.getLogger(__name__)

router = Router()

PROMOS_PER_PAGE = 7

async def delete_last_bot_message(message, state):
    data = await state.get_data()
    if data.get("last_bot_msg"):
        try:
            await message.bot.delete_message(message.chat.id, data["last_bot_msg"])
        except Exception:
            pass

@router.message(F.text.lower() == "üéÅ –ø—Ä–æ–º–æ–∫–æ–¥—ã")
@admin_only
async def promo_main_menu(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=promo_menu_keyboard())
    await state.update_data(last_bot_msg=msg.message_id)

@router.callback_query(F.data == "promo_create")
@admin_only
async def promo_create_entry(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    await call.message.edit_text("üî§ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã):", reply_markup=cancel_keyboard())
    await state.set_state(PromoCreateStates.waiting_for_code)

@router.callback_query(F.data == "promo_active")
@admin_only
async def promo_active_list(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    await show_promo_page(call.message, state, page=1)

async def show_promo_page(event, state, page=1, search_query=None):
    # –ª–æ–≥ –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    async with AsyncSessionLocal() as session:
        if search_query:
            query = select(PromoCode).where(PromoCode.code.ilike(f"%{search_query}%"))
        else:
            query = select(PromoCode).where(PromoCode.is_active == True)
        promos = (await session.execute(query.order_by(PromoCode.id.desc()))).scalars().all()
    total = len(promos)
    total_pages = max(1, (total + PROMOS_PER_PAGE - 1) // PROMOS_PER_PAGE)
    page = max(1, min(page, total_pages))
    start = (page - 1) * PROMOS_PER_PAGE
    end = start + PROMOS_PER_PAGE
    page_promos = promos[start:end]
    if search_query:
        text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:" if promos else "–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    else:
        text = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:" if promos else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."
    kb = promo_list_keyboard(page_promos, page, total_pages) if promos else promo_menu_keyboard()

    try:
        await event.edit_text(text, reply_markup=kb)
    except Exception:
        await event.answer(text, reply_markup=kb)
    await state.update_data(promo_search=search_query or "")

@router.callback_query(F.data.startswith("promo_page:"))
@admin_only
async def promo_page_nav(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –ª–∏—Å—Ç–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {call.data.split(':')[1]})")
    page = call.data.split(":")[1]
    if page == "cur":
        await call.answer()
        return
    page = int(page)
    data = await state.get_data()
    search_query = data.get("promo_search")
    await show_promo_page(call.message, state, page=page, search_query=search_query)

@router.callback_query(F.data == "promo_search")
@admin_only
async def promo_search_start(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=cancel_keyboard())
    await state.set_state(PromoCreateStates.waiting_for_search)

@router.message(PromoCreateStates.waiting_for_search)
@admin_only
async def promo_search_query(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –∏—â–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {message.text.strip()}")
    try:
        await message.delete()
    except Exception:
        pass
    await delete_last_bot_message(message, state)
    query = message.text.strip()
    if not query:
        msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return
    await show_promo_page(message, state, page=1, search_query=query)
    await state.clear()

@router.callback_query(F.data == "promo_cancel")
@admin_only
async def promo_cancel_callback(call: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == PromoCreateStates.waiting_for_search.state:
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        await call.message.edit_text("–ü–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=promo_menu_keyboard())
    else:
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        await call.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=promo_menu_keyboard())
    await state.clear()

@router.message(PromoCreateStates.waiting_for_code)
@admin_only
async def promo_code_step(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {message.text.strip()}")
    try:
        await message.delete()
    except Exception:
        pass
    await delete_last_bot_message(message, state)
    if not message.text:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return
    code = message.text.strip().upper()
    if not code.isalnum():
        msg = await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return
    async with AsyncSessionLocal() as session:
        exists = await session.execute(
            select(PromoCode).where(PromoCode.code == code)
        )
        if exists.scalar_one_or_none():
            msg = await message.answer("–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.", reply_markup=cancel_keyboard())
            await state.update_data(last_bot_msg=msg.message_id)
            return
    await state.update_data(code=code)
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=promo_type_keyboard())
    await state.update_data(last_bot_msg=msg.message_id)

@router.callback_query(F.data.startswith("promo_type:"))
@admin_only
async def promo_type_callback(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞: {call.data.split(':')[1]}")
    promo_type = call.data.split(":")[1]
    await state.update_data(type=promo_type)
    await call.message.edit_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å–∫–∏–¥–∫–∏ –∏–ª–∏ —Å—É–º–º—É –¥–ª—è –±–æ–Ω—É—Å–∞):",
        reply_markup=cancel_keyboard()
    )
    await state.update_data(last_bot_msg=call.message.message_id)
    await state.set_state(PromoCreateStates.waiting_for_value)

@router.message(PromoCreateStates.waiting_for_value)
@admin_only
async def promo_value_step(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {message.text.strip()}")
    try:
        await message.delete()
    except Exception:
        pass
    await delete_last_bot_message(message, state)
    if not message.text:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return
    try:
        value = float(message.text.replace(",", "."))
    except Exception:
        msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return

    data = await state.get_data()
    if value <= 0:
        msg = await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return

    if data.get("type") == "discount":
        if not (1 <= value <= 100):
            msg = await message.answer("–î–ª—è —Å–∫–∏–¥–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100.", reply_markup=cancel_keyboard())
            await state.update_data(last_bot_msg=msg.message_id)
            return

    await state.update_data(value=value)
    if data["type"] == "bonus":
        msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –±–æ–Ω—É—Å–∞:", reply_markup=promo_currency_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        await state.set_state(PromoCreateStates.waiting_for_currency)
    else:
        await state.update_data(currency=None)
        msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=promo_onetime_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        await state.set_state(PromoCreateStates.waiting_for_one_time)

@router.callback_query(F.data.startswith("promo_currency:"))
@admin_only
async def promo_currency_callback(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª –≤–∞–ª—é—Ç—É –±–æ–Ω—É—Å–∞: {call.data.split(':')[1]}")
    currency = call.data.split(":")[1]
    await state.update_data(currency=currency)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=promo_onetime_keyboard())
    await state.set_state(PromoCreateStates.waiting_for_one_time)

@router.callback_query(F.data.startswith("promo_onetime:"))
@admin_only
async def promo_onetime_callback(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤—ã–±—Ä–∞–ª –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥–∞: {call.data.split(':')[1]}")
    is_one_time = call.data.split(":")[1] == "yes"
    await state.update_data(is_one_time=is_one_time)
    if not is_one_time:
        await call.message.edit_text("üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π? (—á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ)", reply_markup=cancel_keyboard())
        await state.set_state(PromoCreateStates.waiting_for_max_activations)
    else:
        await state.update_data(max_activations=1)
        await call.message.edit_text("üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è? (–¥–¥.–º–º.–≥–≥–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ '–Ω–µ—Ç')", reply_markup=cancel_keyboard())
        await state.set_state(PromoCreateStates.waiting_for_expires)

@router.message(PromoCreateStates.waiting_for_max_activations)
@admin_only
async def promo_max_activations_step(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {message.text.strip()}")
    try:
        await message.delete()
    except Exception:
        pass
    await delete_last_bot_message(message, state)
    if not message.text:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return
    try:
        max_activations = int(message.text)
        if max_activations <= 0:
            max_activations = None
    except Exception:
        msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return
    await state.update_data(max_activations=max_activations)
    msg = await message.answer("üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è? (–¥–¥.–º–º.–≥–≥–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ '–Ω–µ—Ç')", reply_markup=cancel_keyboard())
    await state.update_data(last_bot_msg=msg.message_id)
    await state.set_state(PromoCreateStates.waiting_for_expires)

@router.message(PromoCreateStates.waiting_for_expires)
@admin_only
async def promo_expires_step(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {message.text.strip()}")
    try:
        await message.delete()
    except Exception:
        pass
    await delete_last_bot_message(message, state)
    if not message.text:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return
    text = message.text.strip().lower()
    if text == "–Ω–µ—Ç":
        expires = None
    else:
        expires = None
        for fmt in ("%d.%m.%Y %H:%M", "%d.%m.%Y"):
            try:
                expires = datetime.strptime(text, fmt)
                break
            except Exception:
                continue
        if not expires:
            msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º, –ª–∏–±–æ '–Ω–µ—Ç'.", reply_markup=cancel_keyboard())
            await state.update_data(last_bot_msg=msg.message_id)
            return
        now = datetime.now()
        if expires < now:
            msg = await message.answer("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.", reply_markup=cancel_keyboard())
            await state.update_data(last_bot_msg=msg.message_id)
            return
    await state.update_data(expires_at=expires)
    msg = await message.answer("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ–º–æ–∫–æ–¥—É (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω):", reply_markup=cancel_keyboard())
    await state.update_data(last_bot_msg=msg.message_id)
    await state.set_state(PromoCreateStates.waiting_for_comment)

@router.message(PromoCreateStates.waiting_for_comment)
@admin_only
async def promo_comment_step(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –≤–≤–æ–¥–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ–º–æ–∫–æ–¥—É: {message.text.strip()}")
    try:
        await message.delete()
    except Exception:
        pass
    await delete_last_bot_message(message, state)
    if not message.text:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω.", reply_markup=cancel_keyboard())
        await state.update_data(last_bot_msg=msg.message_id)
        return
    comment = message.text.strip()
    if comment == "-":
        comment = None
    await state.update_data(comment=comment)
    data = await state.get_data()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
    if data["type"] == "bonus":
        value_str = f"{data['value']} {data.get('currency','')}"
    else:
        value_str = f"{data['value']}%"

    max_activations = data.get('max_activations')
    if max_activations in (None, 0):
        max_activations_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ"
    else:
        max_activations_str = str(max_activations)

    expires_at = data.get('expires_at')
    if not expires_at:
        expires_str = "–ë–µ–∑ —Å—Ä–æ–∫–∞"
    elif isinstance(expires_at, str):
        expires_str = expires_at
    elif isinstance(expires_at, datetime):
        expires_str = expires_at.strftime("%d.%m.%Y %H:%M") if (expires_at.hour or expires_at.minute) else expires_at.strftime("%d.%m.%Y")
    else:
        expires_str = str(expires_at)

    comment_str = comment or "-"

    text = (
        f"<b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {data['code']}\n"
        f"<b>–¢–∏–ø:</b> {data['type']}\n"
        f"<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {value_str}\n"
        f"<b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π:</b> {'–î–∞' if data['is_one_time'] else '–ù–µ—Ç'}\n"
        f"<b>–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {max_activations_str}\n"
        f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {expires_str}\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment_str if comment_str != '-' else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞?"
    )
    msg = await message.answer(text, parse_mode="HTML", reply_markup=promo_confirm_keyboard())
    await state.update_data(last_bot_msg=msg.message_id)
    await state.set_state(PromoCreateStates.confirm)

@router.callback_query(F.data.startswith("promo_confirm:"))
@admin_only
async def promo_confirm_callback(call: CallbackQuery, state: FSMContext):
    answer = call.data.split(":")[1]
    if answer != "yes":
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        await call.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    data = await state.get_data()
    expires_at = data.get("expires_at")
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∞–¥–º–∏–Ω–∞
    from app.database.crud import get_user_by_tg_id
    admin_user = await get_user_by_tg_id(call.from_user.id)
    region = getattr(admin_user, "region", None) if admin_user else None
    # –ö–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Ç–∞–π–º–∑–æ–Ω—ã
    region_tz = {
        "üá∞üá¨ –ö–†": "Asia/Bishkek",
        "kg": "Asia/Bishkek",
        "üá∞üáø –ö–ó": "Asia/Almaty",
        "kz": "Asia/Almaty",
        "üá∑üá∫ –†–£": "Europe/Moscow",
        "ru": "Europe/Moscow",
    }
    import pytz
    tz_name = region_tz.get(region, "Asia/Bishkek")
    tz = pytz.timezone(tz_name)
    if isinstance(expires_at, datetime):
        expires_at = expires_at.replace(microsecond=0)
        if expires_at.tzinfo is None:
            # expires_at –≤–≤–µ–¥—ë–Ω –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC
            local_dt = tz.localize(expires_at)
            expires_at = local_dt.astimezone(pytz.utc)
    async with AsyncSessionLocal() as session:
        promo = PromoCode(
            code=data["code"],
            type=data["type"],
            value=data["value"],
            currency=data.get("currency"),
            is_one_time=data["is_one_time"],
            max_activations=data.get("max_activations"),
            expires_at=expires_at,
            comment=data.get("comment"),
        )
        session.add(promo)
        await session.commit()
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} —Å–æ–∑–¥–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ {data['code']}")
    await call.message.edit_text("–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=promo_menu_keyboard())
    await state.clear()

@router.callback_query(F.data.startswith("promo_manage:"))
@admin_only
async def promo_manage_panel(call: CallbackQuery, state: FSMContext):
    promo_id = int(call.data.split(":")[1])
    async with AsyncSessionLocal() as session:
        promo = await session.get(PromoCode, promo_id)
    if not promo:
        await call.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º {promo.code} (id={promo.id})")
    text = (
        f"<b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {promo.code}\n"
        f"<b>–¢–∏–ø:</b> {promo.type}\n"
        f"<b>–ó–Ω–∞—á–µ–Ω–∏–µ:</b> {promo.value} {promo.currency or '%'}\n"
        f"<b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π:</b> {'–î–∞' if promo.is_one_time else '–ù–µ—Ç'}\n"
        f"<b>–õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {promo.max_activations or '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ'}\n"
        f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {promo.expires_at.strftime('%d.%m.%Y %H:%M') if promo.expires_at else '–ë–µ–∑ —Å—Ä–æ–∫–∞'}\n"
        f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {promo.comment or '-'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if promo.is_active else 'üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω'}"
    )
    await call.message.edit_text(
        text, parse_mode="HTML", reply_markup=promo_manage_keyboard(promo)
    )

@router.callback_query(F.data.startswith("promo_toggle:"))
@admin_only
async def promo_toggle_status(call: CallbackQuery, state: FSMContext):
    promo_id = int(call.data.split(":")[1])
    async with AsyncSessionLocal() as session:
        promo = await session.get(PromoCode, promo_id)
        if not promo:
            await call.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        promo.is_active = not promo.is_active
        await session.commit()
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞ {promo.code} (id={promo.id}) –Ω–∞ {'–∞–∫—Ç–∏–≤–µ–Ω' if promo.is_active else '–∑–∞–º–æ—Ä–æ–∂–µ–Ω'}")
    await call.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω")
    await promo_manage_panel(call, state)

@router.callback_query(F.data.startswith("promo_delete:"))
@admin_only
async def promo_delete(call: CallbackQuery, state: FSMContext):
    promo_id = int(call.data.split(":")[1])
    async with AsyncSessionLocal() as session:
        promo = await session.get(PromoCode, promo_id)
        if not promo:
            await call.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} —É–¥–∞–ª–∏–ª –ø—Ä–æ–º–æ–∫–æ–¥ {promo.code} (id={promo.id})")
        await session.delete(promo)
        await session.commit()
    await call.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª—ë–Ω")
    await promo_active_list(call, state)

@router.callback_query(F.data == "promo_menu")
@admin_only
async def promo_menu_back(call: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω @{call.from_user.username} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=promo_menu_keyboard())
    await state.update_data(last_bot_msg=call.message.message_id)
