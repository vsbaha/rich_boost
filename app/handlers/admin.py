import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from app.keyboards.admin.admin_menu import admin_menu_keyboard
from app.keyboards.admin.users_pagination import users_pagination_keyboard, users_search_keyboard, user_profile_keyboard
from app.utils.roles import admin_only
from app.database.crud import get_users_page, count_users, count_users_by_role, search_users, get_user_by_tg_id, update_user_balance
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.states.admin_states import AdminStates

router = Router()
logger = logging.getLogger(__name__)

USERS_PER_PAGE = 5

@router.message(Command("admin"))
@admin_only
async def admin_panel(message: Message):
    logger.info(f"–ê–¥–º–∏–Ω @{message.from_user.username} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_menu_keyboard())

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
@admin_only
async def admin_users(message: Message):
    page = 1
    total_users = await count_users()
    total_clients = await count_users_by_role("user")
    total_boosters = await count_users_by_role("booster")
    total_pages = max(1, (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE)
    users = await get_users_page(offset=0, limit=USERS_PER_PAGE)
    text = (
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç–æ–≤:</b> {total_clients}\n"
        f"<b>–ë—É—Å—Ç–µ—Ä–æ–≤:</b> {total_boosters}\n\n"
        f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"
    )
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=users_pagination_keyboard(users, page, total_pages)
    )

@router.callback_query(F.data.startswith("users_page:"))
@admin_only
async def users_page_callback(call: CallbackQuery):
    page = int(call.data.split(":")[1])
    total_users = await count_users()
    total_pages = max(1, (total_users + USERS_PER_PAGE - 1) // USERS_PER_PAGE)
    offset = (page - 1) * USERS_PER_PAGE
    users = await get_users_page(offset=offset, limit=USERS_PER_PAGE)
    total_clients = await count_users_by_role("user")
    total_boosters = await count_users_by_role("booster")
    text = (
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç–æ–≤:</b> {total_clients}\n"
        f"<b>–ë—É—Å—Ç–µ—Ä–æ–≤:</b> {total_boosters}\n\n"
        f"<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>"
    )
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=users_pagination_keyboard(users, page, total_pages)
    )
    await call.answer()

@router.message(F.text == "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã")
@admin_only
async def admin_orders(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤.")

@router.message(F.text == "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@admin_only
async def admin_settings(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
@admin_only
async def admin_support(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

@router.callback_query(F.data == "users_search")
@admin_only
async def users_search_start(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(AdminStates.waiting_for_query)
    await call.answer()

@router.message(AdminStates.waiting_for_query)
@admin_only
async def users_search_process(message: Message, state: FSMContext):
    query = message.text.strip().lstrip("@")
    users = await search_users(query)
    if not users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_page:1")]
            ]
        )
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
    else:
        await message.answer(
            "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:</b>",
            parse_mode="HTML",
            reply_markup=users_search_keyboard(users)
        )
    await state.clear()

@router.callback_query(F.data.startswith("user_info:"))
@admin_only
async def user_info_callback(call: CallbackQuery):
    tg_id = int(call.data.split(":")[1])
    user = await get_user_by_tg_id(tg_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    text = (
        f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"ID: <code>{user.tg_id}</code>\n"
        f"Username: @{user.username or '‚Äî'}\n"
        f"–†–µ–≥–∏–æ–Ω: {user.region or '‚Äî'}\n"
        f"–†–æ–ª—å: {user.role}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user.balance}\n"
        f"–ë–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user.bonus_balance}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M') if user.created_at else '‚Äî'}"
    )
    await call.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=user_profile_keyboard(user)
    )
    await call.answer()

@router.callback_query(F.data.startswith("user_ban:"))
@admin_only
async def user_ban_callback(call: CallbackQuery):
    tg_id = int(call.data.split(":")[1])
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞ "banned"
    # await update_user_role(tg_id, "banned")
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞).")

@router.callback_query(F.data.startswith("user_unban:"))
@admin_only
async def user_unban_callback(call: CallbackQuery):
    tg_id = int(call.data.split(":")[1])
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –Ω–∞ "user"
    # await update_user_role(tg_id, "user")
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞).")

@router.callback_query(F.data.startswith("user_balance:"))
@admin_only
async def user_balance_callback(call: CallbackQuery, state: FSMContext):
    tg_id = int(call.data.split(":")[1])
    await state.update_data(balance_tg_id=tg_id)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:")
    await state.set_state(AdminStates.waiting_for_balance)
    await call.answer()

@router.message(AdminStates.waiting_for_balance)
@admin_only
async def set_user_balance(message: Message, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("balance_tg_id")
    try:
        new_balance = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    await update_user_balance(tg_id, new_balance)
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω: {new_balance}")
    await state.clear()